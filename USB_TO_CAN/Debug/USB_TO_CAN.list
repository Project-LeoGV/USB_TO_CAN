
USB_TO_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800803c  0800803c  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800803c  0800803c  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800803c  0800803c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800803c  0800803c  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08008044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  20000194  080081d8  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001354  080081d8  00021354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ede7  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a02  00000000  00000000  0002efab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00032550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efb6  00000000  00000000  00032fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef98  00000000  00000000  00051f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6105  00000000  00000000  00060ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116ffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d78  00000000  00000000  0011704c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007fac 	.word	0x08007fac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	08007fac 	.word	0x08007fac

08000218 <main>:

	RCC->APB1ENR1 |= (1 << 25);
}

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b0a4      	sub	sp, #144	; 0x90
 800021c:	af00      	add	r7, sp, #0
	// Clock System Initialize
	RCC_voidInit();
 800021e:	f005 fb5f 	bl	80058e0 <RCC_voidInit>
	//RCC_voidPeripheralClockCfg(RCC_CCIPR_REG1, FDCAN_Cfg);
	RCC->CCIPR |= (1 << 25);
 8000222:	4ba6      	ldr	r3, [pc, #664]	; (80004bc <main+0x2a4>)
 8000224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000228:	4aa4      	ldr	r2, [pc, #656]	; (80004bc <main+0x2a4>)
 800022a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800022e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	// Enable Peripherals
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_A);
 8000232:	2100      	movs	r1, #0
 8000234:	2001      	movs	r0, #1
 8000236:	f005 fbb7 	bl	80059a8 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_B);
 800023a:	2101      	movs	r1, #1
 800023c:	2001      	movs	r0, #1
 800023e:	f005 fbb3 	bl	80059a8 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_C);
 8000242:	2102      	movs	r1, #2
 8000244:	2001      	movs	r0, #1
 8000246:	f005 fbaf 	bl	80059a8 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, RCC_FDCAN);
 800024a:	2119      	movs	r1, #25
 800024c:	2003      	movs	r0, #3
 800024e:	f005 fbab 	bl	80059a8 <RCC_voidPeripheralClockEnable>

	//RCC_Init();
	RCC_voidPeripheralClockCfg(RCC_CCIPR_REG1,CLK48_Cfg);
 8000252:	211a      	movs	r1, #26
 8000254:	2001      	movs	r0, #1
 8000256:	f005 fc0b 	bl	8005a70 <RCC_voidPeripheralClockCfg>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, RCC_USB);
 800025a:	2117      	movs	r1, #23
 800025c:	2003      	movs	r0, #3
 800025e:	f005 fba3 	bl	80059a8 <RCC_voidPeripheralClockEnable>

	// Initialize Variables
	MGPIO_Config_t canTxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8000262:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	f8c3 2003 	str.w	r2, [r3, #3]
 800026e:	2301      	movs	r3, #1
 8000270:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000274:	2309      	movs	r3, #9
 8000276:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 800027a:	2302      	movs	r3, #2
 800027c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000280:	2309      	movs	r3, #9
 8000282:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	MGPIO_Config_t canRxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN8, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8000286:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000292:	2301      	movs	r3, #1
 8000294:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000298:	2308      	movs	r3, #8
 800029a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 800029e:	2302      	movs	r3, #2
 80002a0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80002a4:	2309      	movs	r3, #9
 80002a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

	CAN_TxConfig_t txConfig = {.automaticTransmission = CAN_AUTOMATIC_TRANSMISSION_DISABLE, .bufferType = CAN_TX_BUFFER_FIFO, .transmitPause = CAN_TX_PAUSE_DISABLE};
 80002aa:	2300      	movs	r3, #0
 80002ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 80002b0:	2300      	movs	r3, #0
 80002b2:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 80002b6:	2301      	movs	r3, #1
 80002b8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	MGPIO_Config_t usbCfg = {.Port = GPIO_PORTB,.Pin = GPIO_PIN3,.Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF3, .OutputType = GPIO_OT_PUSHPULL, .OutputSpeed = GPIO_SPEED_LOW,.InputPull=GPIO_NO_PULL};
 80002bc:	4a80      	ldr	r2, [pc, #512]	; (80004c0 <main+0x2a8>)
 80002be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c6:	6018      	str	r0, [r3, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	8019      	strh	r1, [r3, #0]
 80002cc:	3302      	adds	r3, #2
 80002ce:	0c0a      	lsrs	r2, r1, #16
 80002d0:	701a      	strb	r2, [r3, #0]

	CAN_RxConfig_t rxConfig;
	rxConfig.FIFO0_IDs = IDs;
 80002d2:	4b7c      	ldr	r3, [pc, #496]	; (80004c4 <main+0x2ac>)
 80002d4:	66bb      	str	r3, [r7, #104]	; 0x68
	rxConfig.FIFO0_numberOfIDs = CAN_IDS_COUNT;
 80002d6:	2302      	movs	r3, #2
 80002d8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	rxConfig.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 80002dc:	2301      	movs	r3, #1
 80002de:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	rxConfig.nonMatchingFrames = CAN_RX_ACCEPT_FIFO1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

	CAN_RxConfig_t rxCfg;
		rxCfg.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		rxCfg.FIFO1_Mode = CAN_RX_FIFO_OVERWRITE;
 80002ee:	2301      	movs	r3, #1
 80002f0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
		rxCfg.FIFO0_numberOfIDs = 2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		rxCfg.FIFO1_numberOfIDs = 2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		u32 ids[2] = {0x30, 0x31};
 8000300:	4a71      	ldr	r2, [pc, #452]	; (80004c8 <main+0x2b0>)
 8000302:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800030a:	e883 0003 	stmia.w	r3, {r0, r1}
		rxCfg.FIFO0_IDs = ids;
 800030e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000312:	65bb      	str	r3, [r7, #88]	; 0x58
		rxCfg.FIFO1_IDs = ids;
 8000314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000318:	65fb      	str	r3, [r7, #92]	; 0x5c
		rxCfg.nonMatchingFrames = CAN_RX_REJECT;
 800031a:	2302      	movs	r3, #2
 800031c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	CAN_Frame_t receiveFrame;
	u8 receiveData[8];
	receiveFrame.data = receiveData;
 8000320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000324:	647b      	str	r3, [r7, #68]	; 0x44
	receiveFrame.id = 0x00;
 8000326:	2300      	movs	r3, #0
 8000328:	63fb      	str	r3, [r7, #60]	; 0x3c

	u8 receivedMsgCount = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c


	CAN_Frame_t transmitFrame;
	transmitFrame.ide = CAN_FRAME_STANDARD_ID;
 8000330:	2300      	movs	r3, #0
 8000332:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	// Initialize Peripherals
	//GPIO_voidInitPin(&usbCfg);
	GPIO_voidInitPin(&canTxPin);
 8000336:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800033a:	4618      	mov	r0, r3
 800033c:	f005 faa2 	bl	8005884 <GPIO_voidInitPin>
	GPIO_voidInitPin(&canRxPin);
 8000340:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000344:	4618      	mov	r0, r3
 8000346:	f005 fa9d 	bl	8005884 <GPIO_voidInitPin>
	CAN_voidInit(CAN1, &rxCfg, &txConfig);
 800034a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800034e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000352:	4619      	mov	r1, r3
 8000354:	485d      	ldr	r0, [pc, #372]	; (80004cc <main+0x2b4>)
 8000356:	f004 fdb7 	bl	8004ec8 <CAN_voidInit>

	MX_USB_Device_Init();
 800035a:	f007 f8cb 	bl	80074f4 <MX_USB_Device_Init>

	u8 d[8] = "0123456\n";
 800035e:	4a5c      	ldr	r2, [pc, #368]	; (80004d0 <main+0x2b8>)
 8000360:	f107 0320 	add.w	r3, r7, #32
 8000364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000368:	e883 0003 	stmia.w	r3, {r0, r1}
	transmitFrame.ide = CAN_FRAME_STANDARD_ID;
 800036c:	2300      	movs	r3, #0
 800036e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	transmitFrame.id = 0x000;
 8000372:	2300      	movs	r3, #0
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
	transmitFrame.rtr = CAN_FRAME_DATA;
 8000376:	2300      	movs	r3, #0
 8000378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	transmitFrame.dlc = 8;
 800037c:	2308      	movs	r3, #8
 800037e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	transmitFrame.data = d;
 8000382:	f107 0320 	add.w	r3, r7, #32
 8000386:	633b      	str	r3, [r7, #48]	; 0x30
	CAN_voidSendDataFrame(CAN1, &transmitFrame);
 8000388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038c:	4619      	mov	r1, r3
 800038e:	484f      	ldr	r0, [pc, #316]	; (80004cc <main+0x2b4>)
 8000390:	f005 f820 	bl	80053d4 <CAN_voidSendDataFrame>
	while(1)
	{


		// Receive from USB
		Receive_USB_data(buffer,&DecodedData);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	484e      	ldr	r0, [pc, #312]	; (80004d4 <main+0x2bc>)
 800039c:	f000 f930 	bl	8000600 <Receive_USB_data>

		sameMsg = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		if(previousData.msg_id == DecodedData.msg_id
 80003a6:	683a      	ldr	r2, [r7, #0]
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d12a      	bne.n	8000404 <main+0x1ec>
		&& previousData.rtr == DecodedData.rtr
 80003ae:	793a      	ldrb	r2, [r7, #4]
 80003b0:	7d3b      	ldrb	r3, [r7, #20]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d126      	bne.n	8000404 <main+0x1ec>
		&& previousData.dlc == DecodedData.dlc
 80003b6:	797a      	ldrb	r2, [r7, #5]
 80003b8:	7d7b      	ldrb	r3, [r7, #21]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d122      	bne.n	8000404 <main+0x1ec>
		){
			sameMsg = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			for(u8 i = 0; i < DecodedData.dlc; i++){
 80003c4:	2300      	movs	r3, #0
 80003c6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80003ca:	e016      	b.n	80003fa <main+0x1e2>
				if(previousData.data[i] != DecodedData.data[i]){
 80003cc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80003d0:	3390      	adds	r3, #144	; 0x90
 80003d2:	443b      	add	r3, r7
 80003d4:	f813 2c8a 	ldrb.w	r2, [r3, #-138]
 80003d8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80003dc:	3390      	adds	r3, #144	; 0x90
 80003de:	443b      	add	r3, r7
 80003e0:	f813 3c7a 	ldrb.w	r3, [r3, #-122]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d003      	beq.n	80003f0 <main+0x1d8>
					sameMsg = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					break;
 80003ee:	e009      	b.n	8000404 <main+0x1ec>
			for(u8 i = 0; i < DecodedData.dlc; i++){
 80003f0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80003f4:	3301      	adds	r3, #1
 80003f6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80003fa:	7d7b      	ldrb	r3, [r7, #21]
 80003fc:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000400:	429a      	cmp	r2, r3
 8000402:	d3e3      	bcc.n	80003cc <main+0x1b4>
			}
		}

		// Send CAN Message
		//if msg_id contains address 0x000 and rtr contains 0 then there is no data
		if(DecodedData.msg_id == 0x000 && DecodedData.rtr == 0 )
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d102      	bne.n	8000410 <main+0x1f8>
 800040a:	7d3b      	ldrb	r3, [r7, #20]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d035      	beq.n	800047c <main+0x264>
		{

		}
		else if(sameMsg == 0){
 8000410:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000414:	2b00      	cmp	r3, #0
 8000416:	d131      	bne.n	800047c <main+0x264>
			transmitFrame.id   = DecodedData.msg_id;
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
			transmitFrame.rtr  = DecodedData.rtr;
 800041c:	7d3b      	ldrb	r3, [r7, #20]
 800041e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			transmitFrame.dlc  = DecodedData.dlc;
 8000422:	7d7b      	ldrb	r3, [r7, #21]
 8000424:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			transmitFrame.data = DecodedData.data;
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	3306      	adds	r3, #6
 800042e:	633b      	str	r3, [r7, #48]	; 0x30

			CAN_voidSendDataFrame(CAN1, &transmitFrame);
 8000430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000434:	4619      	mov	r1, r3
 8000436:	4825      	ldr	r0, [pc, #148]	; (80004cc <main+0x2b4>)
 8000438:	f004 ffcc 	bl	80053d4 <CAN_voidSendDataFrame>
			previousData.msg_id = DecodedData.msg_id;
 800043c:	693b      	ldr	r3, [r7, #16]
 800043e:	603b      	str	r3, [r7, #0]
			previousData.rtr = DecodedData.rtr;
 8000440:	7d3b      	ldrb	r3, [r7, #20]
 8000442:	713b      	strb	r3, [r7, #4]
			previousData.dlc = DecodedData.dlc;
 8000444:	7d7b      	ldrb	r3, [r7, #21]
 8000446:	717b      	strb	r3, [r7, #5]
			for(u8 i = 0; i < DecodedData.dlc; i++){
 8000448:	2300      	movs	r3, #0
 800044a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800044e:	e010      	b.n	8000472 <main+0x25a>
				previousData.data[i] = DecodedData.data[i];
 8000450:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8000454:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000458:	3290      	adds	r2, #144	; 0x90
 800045a:	443a      	add	r2, r7
 800045c:	f812 2c7a 	ldrb.w	r2, [r2, #-122]
 8000460:	3390      	adds	r3, #144	; 0x90
 8000462:	443b      	add	r3, r7
 8000464:	f803 2c8a 	strb.w	r2, [r3, #-138]
			for(u8 i = 0; i < DecodedData.dlc; i++){
 8000468:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800046c:	3301      	adds	r3, #1
 800046e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8000472:	7d7b      	ldrb	r3, [r7, #21]
 8000474:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8000478:	429a      	cmp	r2, r3
 800047a:	d3e9      	bcc.n	8000450 <main+0x238>
			}
		}


		// Check CAN Receive Buffer
		receivedMsgCount = CAN_u8IsRxBufferFull(CAN1, CAN_RX_FIFO0);
 800047c:	2100      	movs	r1, #0
 800047e:	4813      	ldr	r0, [pc, #76]	; (80004cc <main+0x2b4>)
 8000480:	f004 ff86 	bl	8005390 <CAN_u8IsRxBufferFull>
 8000484:	4603      	mov	r3, r0
 8000486:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

		// Send USB Acknowledge (Containing whether we will send or receive)
		if(receivedMsgCount == 0){
 800048a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800048e:	2b00      	cmp	r3, #0
 8000490:	d103      	bne.n	800049a <main+0x282>
			USB_voidSendAck(1);
 8000492:	2001      	movs	r0, #1
 8000494:	f000 f820 	bl	80004d8 <USB_voidSendAck>
 8000498:	e77c      	b.n	8000394 <main+0x17c>
		}
		else{
			USB_voidSendAck(2);
 800049a:	2002      	movs	r0, #2
 800049c:	f000 f81c 	bl	80004d8 <USB_voidSendAck>
			CAN_voidReceiveDataFrame(CAN1, &receiveFrame, CAN_RX_FIFO0);
 80004a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004a4:	2200      	movs	r2, #0
 80004a6:	4619      	mov	r1, r3
 80004a8:	4808      	ldr	r0, [pc, #32]	; (80004cc <main+0x2b4>)
 80004aa:	f004 fe9d 	bl	80051e8 <CAN_voidReceiveDataFrame>
			USB_voidSendCan(&receiveFrame);
 80004ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f82e 	bl	8000514 <USB_voidSendCan>
		Receive_USB_data(buffer,&DecodedData);
 80004b8:	e76c      	b.n	8000394 <main+0x17c>
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	08007fc4 	.word	0x08007fc4
 80004c4:	20000000 	.word	0x20000000
 80004c8:	08007fcc 	.word	0x08007fcc
 80004cc:	40006400 	.word	0x40006400
 80004d0:	08007fd4 	.word	0x08007fd4
 80004d4:	20000008 	.word	0x20000008

080004d8 <USB_voidSendAck>:
		}
	}
}

void USB_voidSendAck(u8 A_ack)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	u8 msg[5] = "0000\n";
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <USB_voidSendAck+0x38>)
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ec:	6018      	str	r0, [r3, #0]
 80004ee:	3304      	adds	r3, #4
 80004f0:	7019      	strb	r1, [r3, #0]
	msg[3] = '0' + A_ack;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3330      	adds	r3, #48	; 0x30
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	72fb      	strb	r3, [r7, #11]
	CDC_Transmit_FS(msg, 5);
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	2105      	movs	r1, #5
 8000500:	4618      	mov	r0, r3
 8000502:	f007 f8cb 	bl	800769c <CDC_Transmit_FS>
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08007fdc 	.word	0x08007fdc

08000514 <USB_voidSendCan>:

void USB_voidSendCan(CAN_Frame_t* A_frame)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	 *  ID  RTR DLC data       end
	 *  000  0   0   00000000	\n
	 */

	// ID
	decimalToHex(A_frame->id, msg);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f107 0208 	add.w	r2, r7, #8
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f83c 	bl	80005a4 <decimalToHex>

	// RTR
	msg[3] = '0' + A_frame->rtr;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	3330      	adds	r3, #48	; 0x30
 8000532:	b2db      	uxtb	r3, r3
 8000534:	72fb      	strb	r3, [r7, #11]

	// DLC
	msg[4] = '0' + A_frame->dlc;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	3330      	adds	r3, #48	; 0x30
 800053c:	b2db      	uxtb	r3, r3
 800053e:	733b      	strb	r3, [r7, #12]

	// Data
	u8 i = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	75fb      	strb	r3, [r7, #23]
	for(i = 0; i < 8; i++){
 8000544:	2300      	movs	r3, #0
 8000546:	75fb      	strb	r3, [r7, #23]
 8000548:	e01c      	b.n	8000584 <USB_voidSendCan+0x70>
		if(i < A_frame->dlc)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	7dfa      	ldrb	r2, [r7, #23]
 8000550:	429a      	cmp	r2, r3
 8000552:	d20d      	bcs.n	8000570 <USB_voidSendCan+0x5c>
			msg[5 + i] = '0' + A_frame->data[i];
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	4413      	add	r3, r2
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	7dfb      	ldrb	r3, [r7, #23]
 8000560:	3305      	adds	r3, #5
 8000562:	3230      	adds	r2, #48	; 0x30
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	3318      	adds	r3, #24
 8000568:	443b      	add	r3, r7
 800056a:	f803 2c10 	strb.w	r2, [r3, #-16]
 800056e:	e006      	b.n	800057e <USB_voidSendCan+0x6a>
		else
			msg[5 + i] = '0';
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	3305      	adds	r3, #5
 8000574:	3318      	adds	r3, #24
 8000576:	443b      	add	r3, r7
 8000578:	2230      	movs	r2, #48	; 0x30
 800057a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i = 0; i < 8; i++){
 800057e:	7dfb      	ldrb	r3, [r7, #23]
 8000580:	3301      	adds	r3, #1
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	7dfb      	ldrb	r3, [r7, #23]
 8000586:	2b07      	cmp	r3, #7
 8000588:	d9df      	bls.n	800054a <USB_voidSendCan+0x36>
	}

	// End
	msg[13] = '\n';
 800058a:	230a      	movs	r3, #10
 800058c:	757b      	strb	r3, [r7, #21]

	// Send Message Via USB
	CDC_Transmit_FS(msg, 14);
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	210e      	movs	r1, #14
 8000594:	4618      	mov	r0, r3
 8000596:	f007 f881 	bl	800769c <CDC_Transmit_FS>
}
 800059a:	bf00      	nop
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <decimalToHex>:

void decimalToHex(u32 decimal, u8* hex)
{
 80005a4:	b490      	push	{r4, r7}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	u8 h[16] = {'0', '1', '2', '3', '4',
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <decimalToHex+0x58>)
 80005b0:	f107 0408 	add.w	r4, r7, #8
 80005b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			'5', '6', '7', '8', '9',
			'A', 'B', 'C', 'D', 'E',
			'F'};
	hex[2] = h[decimal % 16];
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f003 020f 	and.w	r2, r3, #15
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3302      	adds	r3, #2
 80005c4:	3218      	adds	r2, #24
 80005c6:	443a      	add	r2, r7
 80005c8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80005cc:	701a      	strb	r2, [r3, #0]
	hex[1] = h[(decimal % 256) / 16];
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	091a      	lsrs	r2, r3, #4
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	3218      	adds	r2, #24
 80005da:	443a      	add	r2, r7
 80005dc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80005e0:	701a      	strb	r2, [r3, #0]
	hex[0] = h[decimal / 256];
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	3318      	adds	r3, #24
 80005e8:	443b      	add	r3, r7
 80005ea:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	701a      	strb	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc90      	pop	{r4, r7}
 80005fa:	4770      	bx	lr
 80005fc:	08007fe4 	.word	0x08007fe4

08000600 <Receive_USB_data>:
void  Receive_USB_data(uint8_t* buffer,USB_RX_t *A_xDecoded_data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	u8 hex_str[3];
	hex_str[0] = buffer[0] ;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	733b      	strb	r3, [r7, #12]
	hex_str[1] = buffer[1] ;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	737b      	strb	r3, [r7, #13]
	hex_str[2] = buffer[2] ;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	73bb      	strb	r3, [r7, #14]

	A_xDecoded_data->msg_id = hexstr_to_Hex(hex_str);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f82c 	bl	800067e <hexstr_to_Hex>
 8000626:	4602      	mov	r2, r0
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	601a      	str	r2, [r3, #0]

	A_xDecoded_data->rtr = buffer[3] - '0';
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3303      	adds	r3, #3
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3b30      	subs	r3, #48	; 0x30
 8000634:	b2da      	uxtb	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	711a      	strb	r2, [r3, #4]

	A_xDecoded_data->dlc = buffer[4] - '0';
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3304      	adds	r3, #4
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b30      	subs	r3, #48	; 0x30
 8000642:	b2da      	uxtb	r2, r3
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	715a      	strb	r2, [r3, #5]

	for (u8 i = 0; i < A_xDecoded_data->dlc; i++) {
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e00d      	b.n	800066a <Receive_USB_data+0x6a>
		A_xDecoded_data->data[i] = buffer[5 + i];
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	3305      	adds	r3, #5
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	441a      	add	r2, r3
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	7811      	ldrb	r1, [r2, #0]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	719a      	strb	r2, [r3, #6]
	for (u8 i = 0; i < A_xDecoded_data->dlc; i++) {
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	7bfa      	ldrb	r2, [r7, #15]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3ec      	bcc.n	800064e <Receive_USB_data+0x4e>
	}

}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <hexstr_to_Hex>:
u32 hexstr_to_Hex(u8 *A_u8str)
{
 800067e:	b480      	push	{r7}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	u32 hex = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
	for(u8 i = 0; i<3; i++)
 800068a:	2300      	movs	r3, #0
 800068c:	72fb      	strb	r3, [r7, #11]
 800068e:	e02d      	b.n	80006ec <hexstr_to_Hex+0x6e>
	{
		if(A_u8str[i]>='0' && A_u8str[i]<= '9')
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b2f      	cmp	r3, #47	; 0x2f
 800069a:	d90f      	bls.n	80006bc <hexstr_to_Hex+0x3e>
 800069c:	7afb      	ldrb	r3, [r7, #11]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b39      	cmp	r3, #57	; 0x39
 80006a6:	d809      	bhi.n	80006bc <hexstr_to_Hex+0x3e>
		{
			hex = hex *16 +  (A_u8str[i]-'0');
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	7afa      	ldrb	r2, [r7, #11]
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	440a      	add	r2, r1
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	3b30      	subs	r3, #48	; 0x30
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	e014      	b.n	80006e6 <hexstr_to_Hex+0x68>
		}else if(A_u8str[i]>='A' && A_u8str[i]<= 'F')
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b40      	cmp	r3, #64	; 0x40
 80006c6:	d90e      	bls.n	80006e6 <hexstr_to_Hex+0x68>
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b46      	cmp	r3, #70	; 0x46
 80006d2:	d808      	bhi.n	80006e6 <hexstr_to_Hex+0x68>
		{
			hex = hex *16 +  (A_u8str[i]-'A' + 10);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	7afa      	ldrb	r2, [r7, #11]
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	440a      	add	r2, r1
 80006de:	7812      	ldrb	r2, [r2, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	3b37      	subs	r3, #55	; 0x37
 80006e4:	60fb      	str	r3, [r7, #12]
	for(u8 i = 0; i<3; i++)
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	3301      	adds	r3, #1
 80006ea:	72fb      	strb	r3, [r7, #11]
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d9ce      	bls.n	8000690 <hexstr_to_Hex+0x12>
		}
	}
	return hex;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <Error_Handler>:
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>

0800070a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070e:	e7fe      	b.n	800070e <NMI_Handler+0x4>

08000710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <HardFault_Handler+0x4>

08000716 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <MemManage_Handler+0x4>

0800071c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <BusFault_Handler+0x4>

08000722 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <UsageFault_Handler+0x4>

08000728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 f849 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <USB_LP_IRQHandler+0x10>)
 8000766:	f000 fa00 	bl	8000b6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000e58 	.word	0x20000e58

08000774 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SystemInit+0x20>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <SystemInit+0x20>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff ffea 	bl	8000774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	; (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80007c6:	f007 fbb7 	bl	8007f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ca:	f7ff fd25 	bl	8000218 <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 80007dc:	08008044 	.word	0x08008044
  ldr r2, =_sbss
 80007e0:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 80007e4:	20001354 	.word	0x20001354

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x1c>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x20>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a03      	ldr	r2, [pc, #12]	; (8000808 <HAL_IncTick+0x1c>)
 80007fc:	6013      	str	r3, [r2, #0]
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	200001b0 	.word	0x200001b0
 800080c:	20000018 	.word	0x20000018

08000810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200001b0 	.word	0x200001b0

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db0b      	blt.n	800086e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 021f 	and.w	r2, r3, #31
 800085c:	4907      	ldr	r1, [pc, #28]	; (800087c <__NVIC_EnableIRQ+0x38>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	; 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000948:	f7ff ff6e 	bl	8000828 <__NVIC_GetPriorityGrouping>
 800094c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	68b9      	ldr	r1, [r7, #8]
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f7ff ffbe 	bl	80008d4 <NVIC_EncodePriority>
 8000958:	4602      	mov	r2, r0
 800095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff8d 	bl	8000880 <__NVIC_SetPriority>
}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff61 	bl	8000844 <__NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e0c0      	b.n	8000b1e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d106      	bne.n	80009b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f006 ffbb 	bl	800792c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2203      	movs	r2, #3
 80009ba:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 ff1d 	bl	8002802 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e03e      	b.n	8000a4c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3311      	adds	r3, #17
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3310      	adds	r3, #16
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009f6:	7bfa      	ldrb	r2, [r7, #15]
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3313      	adds	r3, #19
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3320      	adds	r3, #32
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a1e:	7bfa      	ldrb	r2, [r7, #15]
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	440b      	add	r3, r1
 8000a2c:	3324      	adds	r3, #36	; 0x24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	440b      	add	r3, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	791b      	ldrb	r3, [r3, #4]
 8000a50:	7bfa      	ldrb	r2, [r7, #15]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3bb      	bcc.n	80009ce <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e044      	b.n	8000ae6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a5c:	7bfa      	ldrb	r2, [r7, #15]
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	440b      	add	r3, r1
 8000a6a:	f203 1351 	addw	r3, r3, #337	; 0x151
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	f203 1353 	addw	r3, r3, #339	; 0x153
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000aca:	7bfa      	ldrb	r2, [r7, #15]
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	7bfa      	ldrb	r2, [r7, #15]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d3b5      	bcc.n	8000a5c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3304      	adds	r3, #4
 8000af8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000afc:	f001 fe9c 	bl	8002838 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7a9b      	ldrb	r3, [r3, #10]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d102      	bne.n	8000b1c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f001 fc41 	bl	800239e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d101      	bne.n	8000b3c <HAL_PCD_Start+0x16>
 8000b38:	2302      	movs	r3, #2
 8000b3a:	e012      	b.n	8000b62 <HAL_PCD_Start+0x3c>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fe43 	bl	80027d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 f903 	bl	8004d5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 f908 	bl	8004d8c <USB_ReadInterrupts>
 8000b7c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 fb04 	bl	8001196 <PCD_EP_ISR_Handler>

    return;
 8000b8e:	e110      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d013      	beq.n	8000bc2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bac:	b292      	uxth	r2, r2
 8000bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f006 ff4b 	bl	8007a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 f8fc 	bl	8000db8 <HAL_PCD_SetAddress>

    return;
 8000bc0:	e0f7      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00c      	beq.n	8000be6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000bde:	b292      	uxth	r2, r2
 8000be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000be4:	e0e5      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00c      	beq.n	8000c0a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c02:	b292      	uxth	r2, r2
 8000c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000c08:	e0d3      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d034      	beq.n	8000c7e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0204 	bic.w	r2, r2, #4
 8000c26:	b292      	uxth	r2, r2
 8000c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0208 	bic.w	r2, r2, #8
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d107      	bne.n	8000c5e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000c56:	2100      	movs	r1, #0
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f007 f8eb 	bl	8007e34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f006 ff2e 	bl	8007ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c76:	b292      	uxth	r2, r2
 8000c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000c7c:	e099      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d027      	beq.n	8000cd8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f042 0208 	orr.w	r2, r2, #8
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cb2:	b292      	uxth	r2, r2
 8000cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 0204 	orr.w	r2, r2, #4
 8000cca:	b292      	uxth	r2, r2
 8000ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f006 fedb 	bl	8007a8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000cd6:	e06c      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d040      	beq.n	8000d64 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf4:	b292      	uxth	r2, r2
 8000cf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d12b      	bne.n	8000d5c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0204 	orr.w	r2, r2, #4
 8000d16:	b292      	uxth	r2, r2
 8000d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0208 	orr.w	r2, r2, #8
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000d52:	2101      	movs	r1, #1
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f007 f86d 	bl	8007e34 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000d5a:	e02a      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f006 fe95 	bl	8007a8c <HAL_PCD_SuspendCallback>
    return;
 8000d62:	e026      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00f      	beq.n	8000d8e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d80:	b292      	uxth	r2, r2
 8000d82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f006 fe53 	bl	8007a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000d8c:	e011      	b.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00c      	beq.n	8000db2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000daa:	b292      	uxth	r2, r2
 8000dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000db0:	bf00      	nop
  }
}
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d101      	bne.n	8000dd2 <HAL_PCD_SetAddress+0x1a>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e012      	b.n	8000df8 <HAL_PCD_SetAddress+0x40>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	78fa      	ldrb	r2, [r7, #3]
 8000dde:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 ffa4 	bl	8004d36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	70fb      	strb	r3, [r7, #3]
 8000e12:	460b      	mov	r3, r1
 8000e14:	803b      	strh	r3, [r7, #0]
 8000e16:	4613      	mov	r3, r2
 8000e18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	da0e      	bge.n	8000e44 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	f003 0207 	and.w	r2, r3, #7
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	3310      	adds	r3, #16
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	705a      	strb	r2, [r3, #1]
 8000e42:	e00e      	b.n	8000e62 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	f003 0207 	and.w	r2, r3, #7
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000e6e:	883a      	ldrh	r2, [r7, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	78ba      	ldrb	r2, [r7, #2]
 8000e78:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000e7a:	78bb      	ldrb	r3, [r7, #2]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d102      	bne.n	8000e86 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2200      	movs	r2, #0
 8000e84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d101      	bne.n	8000e94 <HAL_PCD_EP_Open+0x94>
 8000e90:	2302      	movs	r3, #2
 8000e92:	e00e      	b.n	8000eb2 <HAL_PCD_EP_Open+0xb2>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68f9      	ldr	r1, [r7, #12]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fce6 	bl	8002874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8000eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da0e      	bge.n	8000eec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	f003 0207 	and.w	r2, r3, #7
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	3310      	adds	r3, #16
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	705a      	strb	r2, [r3, #1]
 8000eea:	e00e      	b.n	8000f0a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	f003 0207 	and.w	r2, r3, #7
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_PCD_EP_Close+0x6a>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e00e      	b.n	8000f42 <HAL_PCD_EP_Close+0x88>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68f9      	ldr	r1, [r7, #12]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 f862 	bl	8002ffc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	460b      	mov	r3, r1
 8000f58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	f003 0207 	and.w	r2, r3, #7
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2200      	movs	r2, #0
 8000f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6979      	ldr	r1, [r7, #20]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fa1a 	bl	80033d6 <USB_EPStartXfer>

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	f003 0207 	and.w	r2, r3, #7
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fec:	7afb      	ldrb	r3, [r7, #11]
 8000fee:	f003 0207 	and.w	r2, r3, #7
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	3310      	adds	r3, #16
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2201      	movs	r2, #1
 8001026:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	b2da      	uxtb	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6979      	ldr	r1, [r7, #20]
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f9cb 	bl	80033d6 <USB_EPStartXfer>

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	7912      	ldrb	r2, [r2, #4]
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e03e      	b.n	80010e6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	da0e      	bge.n	800108e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	f003 0207 	and.w	r2, r3, #7
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	3310      	adds	r3, #16
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2201      	movs	r2, #1
 800108a:	705a      	strb	r2, [r3, #1]
 800108c:	e00c      	b.n	80010a8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800108e:	78fa      	ldrb	r2, [r7, #3]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2201      	movs	r2, #1
 80010ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_PCD_EP_SetStall+0x7e>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e00e      	b.n	80010e6 <HAL_PCD_EP_SetStall+0x9c>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fd2e 	bl	8004b38 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	7912      	ldrb	r2, [r2, #4]
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e040      	b.n	800118e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800110c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	da0e      	bge.n	8001132 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	f003 0207 	and.w	r2, r3, #7
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	3310      	adds	r3, #16
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2201      	movs	r2, #1
 800112e:	705a      	strb	r2, [r3, #1]
 8001130:	e00e      	b.n	8001150 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	f003 0207 	and.w	r2, r3, #7
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_PCD_EP_ClrStall+0x82>
 800116c:	2302      	movs	r3, #2
 800116e:	e00e      	b.n	800118e <HAL_PCD_EP_ClrStall+0xa0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fd2b 	bl	8004bda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b096      	sub	sp, #88	; 0x58
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800119e:	e3ae      	b.n	80018fe <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80011ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80011ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8170 	bne.w	80014a4 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80011c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d14d      	bne.n	800126c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80011dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011e0:	81fb      	strh	r3, [r7, #14]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3310      	adds	r3, #16
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001202:	b29b      	uxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	4413      	add	r3, r2
 8001214:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800121e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001220:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	441a      	add	r2, r3
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001230:	2100      	movs	r1, #0
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f006 fbe3 	bl	80079fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7b1b      	ldrb	r3, [r3, #12]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 835d 	beq.w	80018fe <PCD_EP_ISR_Handler+0x768>
 8001244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 8358 	bne.w	80018fe <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7b1b      	ldrb	r3, [r3, #12]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001258:	b2da      	uxtb	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	731a      	strb	r2, [r3, #12]
 800126a:	e348      	b.n	80018fe <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001272:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800127e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001286:	2b00      	cmp	r3, #0
 8001288:	d032      	beq.n	80012f0 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001292:	b29b      	uxth	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80012bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80012c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f003 fdb3 	bl	8004e30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012d6:	4013      	ands	r3, r2
 80012d8:	823b      	strh	r3, [r7, #16]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	8a3a      	ldrh	r2, [r7, #16]
 80012e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012e4:	b292      	uxth	r2, r2
 80012e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f006 fb5b 	bl	80079a4 <HAL_PCD_SetupStageCallback>
 80012ee:	e306      	b.n	80018fe <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f280 8302 	bge.w	80018fe <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	b29a      	uxth	r2, r3
 8001302:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001306:	4013      	ands	r3, r2
 8001308:	83fb      	strh	r3, [r7, #30]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	8bfa      	ldrh	r2, [r7, #30]
 8001310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001314:	b292      	uxth	r2, r2
 8001316:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001320:	b29b      	uxth	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	4413      	add	r3, r2
 8001332:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800133c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d019      	beq.n	800137c <PCD_EP_ISR_Handler+0x1e6>
 8001348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d015      	beq.n	800137c <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001356:	6959      	ldr	r1, [r3, #20]
 8001358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800135c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001360:	b29b      	uxth	r3, r3
 8001362:	f003 fd65 	bl	8004e30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	441a      	add	r2, r3
 8001370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001372:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001374:	2100      	movs	r1, #0
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f006 fb26 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001386:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800138a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 82b5 	bne.w	80018fe <PCD_EP_ISR_Handler+0x768>
 8001394:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001398:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800139c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80013a0:	f000 82ad 	beq.w	80018fe <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4413      	add	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	801a      	strh	r2, [r3, #0]
 80013d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2b3e      	cmp	r3, #62	; 0x3e
 80013da:	d91d      	bls.n	8001418 <PCD_EP_ISR_Handler+0x282>
 80013dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
 80013e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <PCD_EP_ISR_Handler+0x260>
 80013f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f2:	3b01      	subs	r3, #1
 80013f4:	647b      	str	r3, [r7, #68]	; 0x44
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fe:	b29b      	uxth	r3, r3
 8001400:	029b      	lsls	r3, r3, #10
 8001402:	b29b      	uxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b29b      	uxth	r3, r3
 8001408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800140c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001410:	b29a      	uxth	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	e026      	b.n	8001466 <PCD_EP_ISR_Handler+0x2d0>
 8001418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10a      	bne.n	8001436 <PCD_EP_ISR_Handler+0x2a0>
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800142a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800142e:	b29a      	uxth	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	801a      	strh	r2, [r3, #0]
 8001434:	e017      	b.n	8001466 <PCD_EP_ISR_Handler+0x2d0>
 8001436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
 800143e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <PCD_EP_ISR_Handler+0x2ba>
 800144a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144c:	3301      	adds	r3, #1
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b29a      	uxth	r2, r3
 8001456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001458:	b29b      	uxth	r3, r3
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	b29b      	uxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b29a      	uxth	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001476:	827b      	strh	r3, [r7, #18]
 8001478:	8a7b      	ldrh	r3, [r7, #18]
 800147a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800147e:	827b      	strh	r3, [r7, #18]
 8001480:	8a7b      	ldrh	r3, [r7, #18]
 8001482:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001486:	827b      	strh	r3, [r7, #18]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	8a7b      	ldrh	r3, [r7, #18]
 800148e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149e:	b29b      	uxth	r3, r3
 80014a0:	8013      	strh	r3, [r2, #0]
 80014a2:	e22c      	b.n	80018fe <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f280 80f6 	bge.w	80016ae <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014d8:	4013      	ands	r3, r2
 80014da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80014f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014f4:	b292      	uxth	r2, r2
 80014f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80014f8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800150e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001510:	7b1b      	ldrb	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d123      	bne.n	800155e <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	4413      	add	r3, r2
 8001530:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800153a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800153e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 808e 	beq.w	8001664 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154e:	6959      	ldr	r1, [r3, #20]
 8001550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001552:	88da      	ldrh	r2, [r3, #6]
 8001554:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001558:	f003 fc6a 	bl	8004e30 <USB_ReadPMA>
 800155c:	e082      	b.n	8001664 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800155e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d10a      	bne.n	800157c <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001566:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800156a:	461a      	mov	r2, r3
 800156c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f9d3 	bl	800191a <HAL_PCD_EP_DB_Receive>
 8001574:	4603      	mov	r3, r0
 8001576:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800157a:	e073      	b.n	8001664 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001596:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	441a      	add	r2, r3
 80015a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80015ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80015b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80015b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015bc:	b29b      	uxth	r3, r3
 80015be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d022      	beq.n	8001620 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001602:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001606:	2b00      	cmp	r3, #0
 8001608:	d02c      	beq.n	8001664 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001610:	6959      	ldr	r1, [r3, #20]
 8001612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001614:	891a      	ldrh	r2, [r3, #8]
 8001616:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800161a:	f003 fc09 	bl	8004e30 <USB_ReadPMA>
 800161e:	e021      	b.n	8001664 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001628:	b29b      	uxth	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	4413      	add	r3, r2
 800163a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001644:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001648:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001656:	6959      	ldr	r1, [r3, #20]
 8001658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800165a:	895a      	ldrh	r2, [r3, #10]
 800165c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001660:	f003 fbe6 	bl	8004e30 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001666:	69da      	ldr	r2, [r3, #28]
 8001668:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800166c:	441a      	add	r2, r3
 800166e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001670:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800167a:	441a      	add	r2, r3
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <PCD_EP_ISR_Handler+0x4fe>
 8001688:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800168c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d206      	bcs.n	80016a2 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f006 f994 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
 80016a0:	e005      	b.n	80016ae <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fe94 	bl	80033d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80016ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8121 	beq.w	80018fe <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80016bc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	3310      	adds	r3, #16
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	441a      	add	r2, r3
 80016fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001708:	b29b      	uxth	r3, r3
 800170a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800170c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170e:	78db      	ldrb	r3, [r3, #3]
 8001710:	2b01      	cmp	r3, #1
 8001712:	f040 80a2 	bne.w	800185a <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8093 	beq.w	800184c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001726:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d046      	beq.n	80017c0 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d126      	bne.n	8001788 <PCD_EP_ISR_Handler+0x5f2>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001748:	b29b      	uxth	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	4413      	add	r3, r2
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	00da      	lsls	r2, r3, #3
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	4413      	add	r3, r2
 800175c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800176c:	b29a      	uxth	r2, r3
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800177c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001780:	b29a      	uxth	r2, r3
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	801a      	strh	r2, [r3, #0]
 8001786:	e061      	b.n	800184c <PCD_EP_ISR_Handler+0x6b6>
 8001788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d15d      	bne.n	800184c <PCD_EP_ISR_Handler+0x6b6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	4413      	add	r3, r2
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	00da      	lsls	r2, r3, #3
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	4413      	add	r3, r2
 80017b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ba:	2200      	movs	r2, #0
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	e045      	b.n	800184c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	785b      	ldrb	r3, [r3, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d126      	bne.n	800181c <PCD_EP_ISR_Handler+0x686>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e2:	4413      	add	r3, r2
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
 80017e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	00da      	lsls	r2, r3, #3
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ee:	4413      	add	r3, r2
 80017f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001800:	b29a      	uxth	r2, r3
 8001802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001804:	801a      	strh	r2, [r3, #0]
 8001806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001814:	b29a      	uxth	r2, r3
 8001816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	e017      	b.n	800184c <PCD_EP_ISR_Handler+0x6b6>
 800181c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d113      	bne.n	800184c <PCD_EP_ISR_Handler+0x6b6>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800182c:	b29b      	uxth	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001832:	4413      	add	r3, r2
 8001834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	00da      	lsls	r2, r3, #3
 800183c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183e:	4413      	add	r3, r2
 8001840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
 8001846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001848:	2200      	movs	r2, #0
 800184a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800184c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f006 f8d3 	bl	80079fe <HAL_PCD_DataInStageCallback>
 8001858:	e051      	b.n	80018fe <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800185a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d144      	bne.n	80018f0 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4413      	add	r3, r2
 8001880:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800188a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001896:	429a      	cmp	r2, r3
 8001898:	d907      	bls.n	80018aa <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800189a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189c:	699a      	ldr	r2, [r3, #24]
 800189e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018a2:	1ad2      	subs	r2, r2, r3
 80018a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	e002      	b.n	80018b0 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80018aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d106      	bne.n	80018c6 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f006 f89d 	bl	80079fe <HAL_PCD_DataInStageCallback>
 80018c4:	e01b      	b.n	80018fe <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80018c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018ce:	441a      	add	r2, r3
 80018d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80018d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018dc:	441a      	add	r2, r3
 80018de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fd74 	bl	80033d6 <USB_EPStartXfer>
 80018ee:	e006      	b.n	80018fe <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80018f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018f4:	461a      	mov	r2, r3
 80018f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f917 	bl	8001b2c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001906:	b29b      	uxth	r3, r3
 8001908:	b21b      	sxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	f6ff ac48 	blt.w	80011a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3758      	adds	r7, #88	; 0x58
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b088      	sub	sp, #32
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	4613      	mov	r3, r2
 8001926:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d07c      	beq.n	8001a2c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	4413      	add	r3, r2
 800194c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001956:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	8b7b      	ldrh	r3, [r7, #26]
 800195e:	429a      	cmp	r2, r3
 8001960:	d306      	bcc.n	8001970 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	8b7b      	ldrh	r3, [r7, #26]
 8001968:	1ad2      	subs	r2, r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	619a      	str	r2, [r3, #24]
 800196e:	e002      	b.n	8001976 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d123      	bne.n	80019c6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001998:	833b      	strh	r3, [r7, #24]
 800199a:	8b3b      	ldrh	r3, [r7, #24]
 800199c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019a0:	833b      	strh	r3, [r7, #24]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	441a      	add	r2, r3
 80019b0:	8b3b      	ldrh	r3, [r7, #24]
 80019b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01f      	beq.n	8001a10 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ea:	82fb      	strh	r3, [r7, #22]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	441a      	add	r2, r3
 80019fa:	8afb      	ldrh	r3, [r7, #22]
 80019fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a10:	8b7b      	ldrh	r3, [r7, #26]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8085 	beq.w	8001b22 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	6959      	ldr	r1, [r3, #20]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	891a      	ldrh	r2, [r3, #8]
 8001a24:	8b7b      	ldrh	r3, [r7, #26]
 8001a26:	f003 fa03 	bl	8004e30 <USB_ReadPMA>
 8001a2a:	e07a      	b.n	8001b22 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	8b7b      	ldrh	r3, [r7, #26]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d306      	bcc.n	8001a6a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	8b7b      	ldrh	r3, [r7, #26]
 8001a62:	1ad2      	subs	r2, r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	e002      	b.n	8001a70 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d123      	bne.n	8001ac0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a92:	83fb      	strh	r3, [r7, #30]
 8001a94:	8bfb      	ldrh	r3, [r7, #30]
 8001a96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a9a:	83fb      	strh	r3, [r7, #30]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	441a      	add	r2, r3
 8001aaa:	8bfb      	ldrh	r3, [r7, #30]
 8001aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11f      	bne.n	8001b0a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae4:	83bb      	strh	r3, [r7, #28]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	441a      	add	r2, r3
 8001af4:	8bbb      	ldrh	r3, [r7, #28]
 8001af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b0a:	8b7b      	ldrh	r3, [r7, #26]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	6959      	ldr	r1, [r3, #20]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	895a      	ldrh	r2, [r3, #10]
 8001b1c:	8b7b      	ldrh	r3, [r7, #26]
 8001b1e:	f003 f987 	bl	8004e30 <USB_ReadPMA>
    }
  }

  return count;
 8001b22:	8b7b      	ldrh	r3, [r7, #26]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0a4      	sub	sp, #144	; 0x90
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 81db 	beq.w	8001efc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b6a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d907      	bls.n	8001b8a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b82:	1ad2      	subs	r2, r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	619a      	str	r2, [r3, #24]
 8001b88:	e002      	b.n	8001b90 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 80b9 	bne.w	8001d0c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d126      	bne.n	8001bf0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb6:	4413      	add	r3, r2
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	00da      	lsls	r2, r3, #3
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	e01a      	b.n	8001c26 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d116      	bne.n	8001c26 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0c:	4413      	add	r3, r2
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	00da      	lsls	r2, r3, #3
 8001c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c18:	4413      	add	r3, r2
 8001c1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c22:	2200      	movs	r2, #0
 8001c24:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	785b      	ldrb	r3, [r3, #1]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d126      	bne.n	8001c82 <HAL_PCD_EP_DB_Transmit+0x156>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4413      	add	r3, r2
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	00da      	lsls	r2, r3, #3
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	801a      	strh	r2, [r3, #0]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	801a      	strh	r2, [r3, #0]
 8001c80:	e017      	b.n	8001cb2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	785b      	ldrb	r3, [r3, #1]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d113      	bne.n	8001cb2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	4413      	add	r3, r2
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	00da      	lsls	r2, r3, #3
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f005 fea0 	bl	80079fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 82fa 	beq.w	80022be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce4:	82fb      	strh	r3, [r7, #22]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	441a      	add	r2, r3
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	8013      	strh	r3, [r2, #0]
 8001d0a:	e2d8      	b.n	80022be <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d021      	beq.n	8001d5a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	f040 82ac 	bne.w	80022be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d6e:	441a      	add	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d7c:	441a      	add	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d30b      	bcc.n	8001da6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	621a      	str	r2, [r3, #32]
 8001da4:	e017      	b.n	8001dd6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001dae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dbe:	e00a      	b.n	8001dd6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d165      	bne.n	8001eaa <HAL_PCD_EP_DB_Transmit+0x37e>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df2:	4413      	add	r3, r2
 8001df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00da      	lsls	r2, r3, #3
 8001dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfe:	4413      	add	r3, r2
 8001e00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8001e1c:	d91d      	bls.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x32e>
 8001e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_PCD_EP_DB_Transmit+0x30c>
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e34:	3b01      	subs	r3, #1
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	e044      	b.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <HAL_PCD_EP_DB_Transmit+0x34c>
 8001e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	e035      	b.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <HAL_PCD_EP_DB_Transmit+0x366>
 8001e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e8e:	3301      	adds	r3, #1
 8001e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	e01c      	b.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d118      	bne.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	4413      	add	r3, r2
 8001ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	00da      	lsls	r2, r3, #3
 8001ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8001eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6959      	ldr	r1, [r3, #20]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	891a      	ldrh	r2, [r3, #8]
 8001ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f002 ff59 	bl	8004dac <USB_WritePMA>
 8001efa:	e1e0      	b.n	80022be <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f20:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d307      	bcc.n	8001f40 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f38:	1ad2      	subs	r2, r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	619a      	str	r2, [r3, #24]
 8001f3e:	e002      	b.n	8001f46 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80c0 	bne.w	80020d0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d126      	bne.n	8001fa6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6c:	4413      	add	r3, r2
 8001f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	00da      	lsls	r2, r3, #3
 8001f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f78:	4413      	add	r3, r2
 8001f7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fa2:	801a      	strh	r2, [r3, #0]
 8001fa4:	e01a      	b.n	8001fdc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d116      	bne.n	8001fdc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	667b      	str	r3, [r7, #100]	; 0x64
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fc2:	4413      	add	r3, r2
 8001fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	00da      	lsls	r2, r3, #3
 8001fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fce:	4413      	add	r3, r2
 8001fd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	677b      	str	r3, [r7, #116]	; 0x74
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	785b      	ldrb	r3, [r3, #1]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12b      	bne.n	8002042 <HAL_PCD_EP_DB_Transmit+0x516>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ffe:	4413      	add	r3, r2
 8002000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	00da      	lsls	r2, r3, #3
 8002008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200a:	4413      	add	r3, r2
 800200c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002020:	b29a      	uxth	r2, r3
 8002022:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002038:	b29a      	uxth	r2, r3
 800203a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800203e:	801a      	strh	r2, [r3, #0]
 8002040:	e017      	b.n	8002072 <HAL_PCD_EP_DB_Transmit+0x546>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	785b      	ldrb	r3, [r3, #1]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d113      	bne.n	8002072 <HAL_PCD_EP_DB_Transmit+0x546>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002058:	4413      	add	r3, r2
 800205a:	677b      	str	r3, [r7, #116]	; 0x74
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	00da      	lsls	r2, r3, #3
 8002062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002064:	4413      	add	r3, r2
 8002066:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800206a:	673b      	str	r3, [r7, #112]	; 0x70
 800206c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800206e:	2200      	movs	r2, #0
 8002070:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4619      	mov	r1, r3
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f005 fcc0 	bl	80079fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 811a 	bne.w	80022be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	441a      	add	r2, r3
 80020b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80020ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	8013      	strh	r3, [r2, #0]
 80020ce:	e0f6      	b.n	80022be <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d121      	bne.n	800211e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800210a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800210e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211a:	b29b      	uxth	r3, r3
 800211c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 80ca 	bne.w	80022be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002132:	441a      	add	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002140:	441a      	add	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	429a      	cmp	r2, r3
 8002150:	d30b      	bcc.n	800216a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	621a      	str	r2, [r3, #32]
 8002168:	e017      	b.n	800219a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002172:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002182:	e00a      	b.n	800219a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	657b      	str	r3, [r7, #84]	; 0x54
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d165      	bne.n	8002274 <HAL_PCD_EP_DB_Transmit+0x748>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021bc:	4413      	add	r3, r2
 80021be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	00da      	lsls	r2, r3, #3
 80021c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c8:	4413      	add	r3, r2
 80021ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80021d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021da:	b29a      	uxth	r2, r3
 80021dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021de:	801a      	strh	r2, [r3, #0]
 80021e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e4:	2b3e      	cmp	r3, #62	; 0x3e
 80021e6:	d91d      	bls.n	8002224 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80021e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80021f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80021fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021fe:	3b01      	subs	r3, #1
 8002200:	66bb      	str	r3, [r7, #104]	; 0x68
 8002202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29a      	uxth	r2, r3
 8002208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220a:	b29b      	uxth	r3, r3
 800220c:	029b      	lsls	r3, r3, #10
 800220e:	b29b      	uxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800221c:	b29a      	uxth	r2, r3
 800221e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	e041      	b.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_PCD_EP_DB_Transmit+0x716>
 800222c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223a:	b29a      	uxth	r2, r3
 800223c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	e032      	b.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	66bb      	str	r3, [r7, #104]	; 0x68
 800224a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_PCD_EP_DB_Transmit+0x730>
 8002256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002258:	3301      	adds	r3, #1
 800225a:	66bb      	str	r3, [r7, #104]	; 0x68
 800225c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29a      	uxth	r2, r3
 8002262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002264:	b29b      	uxth	r3, r3
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	b29b      	uxth	r3, r3
 800226a:	4313      	orrs	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	e019      	b.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d115      	bne.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002284:	b29b      	uxth	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228a:	4413      	add	r3, r2
 800228c:	657b      	str	r3, [r7, #84]	; 0x54
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	00da      	lsls	r2, r3, #3
 8002294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002296:	4413      	add	r3, r2
 8002298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800229c:	653b      	str	r3, [r7, #80]	; 0x50
 800229e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6959      	ldr	r1, [r3, #20]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	895a      	ldrh	r2, [r3, #10]
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f002 fd77 	bl	8004dac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022d8:	82bb      	strh	r3, [r7, #20]
 80022da:	8abb      	ldrh	r3, [r7, #20]
 80022dc:	f083 0310 	eor.w	r3, r3, #16
 80022e0:	82bb      	strh	r3, [r7, #20]
 80022e2:	8abb      	ldrh	r3, [r7, #20]
 80022e4:	f083 0320 	eor.w	r3, r3, #32
 80022e8:	82bb      	strh	r3, [r7, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	441a      	add	r2, r3
 80022f8:	8abb      	ldrh	r3, [r7, #20]
 80022fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	b29b      	uxth	r3, r3
 800230c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3790      	adds	r7, #144	; 0x90
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	817b      	strh	r3, [r7, #10]
 8002326:	4613      	mov	r3, r2
 8002328:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002336:	897b      	ldrh	r3, [r7, #10]
 8002338:	f003 0207 	and.w	r2, r3, #7
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	3310      	adds	r3, #16
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4413      	add	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e009      	b.n	8002362 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800234e:	897a      	ldrh	r2, [r7, #10]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002362:	893b      	ldrh	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	b29a      	uxth	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	80da      	strh	r2, [r3, #6]
 8002376:	e00b      	b.n	8002390 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2201      	movs	r2, #1
 800237c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	b29a      	uxth	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	b29a      	uxth	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023fc:	2300      	movs	r3, #0
 80023fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002400:	2300      	movs	r3, #0
 8002402:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8098 	beq.w	8002542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002416:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243e:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a39      	ldr	r2, [pc, #228]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800244a:	f7fe f9e1 	bl	8000810 <HAL_GetTick>
 800244e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002450:	e009      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe f9dd 	bl	8000810 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	74fb      	strb	r3, [r7, #19]
        break;
 8002464:	e005      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002466:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ef      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d159      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002482:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01e      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	d019      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002494:	4b23      	ldr	r3, [pc, #140]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024a0:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe f99d 	bl	8000810 <HAL_GetTick>
 80024d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d8:	e00b      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe f999 	bl	8000810 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d902      	bls.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	74fb      	strb	r3, [r7, #19]
            break;
 80024f0:	e006      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ec      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	4903      	ldr	r1, [pc, #12]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800251c:	e008      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	74bb      	strb	r3, [r7, #18]
 8002522:	e005      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002530:	7c7b      	ldrb	r3, [r7, #17]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4ba6      	ldr	r3, [pc, #664]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4aa5      	ldr	r2, [pc, #660]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800254e:	4ba0      	ldr	r3, [pc, #640]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f023 0203 	bic.w	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	499c      	ldr	r1, [pc, #624]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002570:	4b97      	ldr	r3, [pc, #604]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 020c 	bic.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4994      	ldr	r1, [pc, #592]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002592:	4b8f      	ldr	r3, [pc, #572]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	498b      	ldr	r1, [pc, #556]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b4:	4b86      	ldr	r3, [pc, #536]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	4983      	ldr	r1, [pc, #524]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025d6:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	497a      	ldr	r1, [pc, #488]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f8:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4972      	ldr	r1, [pc, #456]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4969      	ldr	r1, [pc, #420]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800263c:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4961      	ldr	r1, [pc, #388]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800265e:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	4958      	ldr	r1, [pc, #352]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	4950      	ldr	r1, [pc, #320]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269e:	d105      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a4a      	ldr	r2, [pc, #296]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026b8:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	4942      	ldr	r1, [pc, #264]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d6:	d105      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a3c      	ldr	r2, [pc, #240]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d015      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f0:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4934      	ldr	r1, [pc, #208]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800270e:	d105      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002710:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	4926      	ldr	r1, [pc, #152]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002752:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	4918      	ldr	r1, [pc, #96]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800277e:	d105      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b6:	d105      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80027e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80027e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800280a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800280e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	b29b      	uxth	r3, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	b29b      	uxth	r3, r3
 8002820:	4013      	ands	r3, r2
 8002822:	b29a      	uxth	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002874:	b480      	push	{r7}
 8002876:	b09d      	sub	sp, #116	; 0x74
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	78db      	ldrb	r3, [r3, #3]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d81f      	bhi.n	80028e6 <USB_ActivateEndpoint+0x72>
 80028a6:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <USB_ActivateEndpoint+0x38>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028d9 	.word	0x080028d9
 80028b4:	080028ef 	.word	0x080028ef
 80028b8:	080028cb 	.word	0x080028cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80028bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80028c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80028c8:	e012      	b.n	80028f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80028ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80028ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80028d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80028d6:	e00b      	b.n	80028f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80028d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80028dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80028e4:	e004      	b.n	80028f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80028ec:	e000      	b.n	80028f0 <USB_ActivateEndpoint+0x7c>
      break;
 80028ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80028fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	b29b      	uxth	r3, r3
 8002910:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	b21b      	sxth	r3, r3
 8002922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	b21a      	sxth	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	b21b      	sxth	r3, r3
 8002932:	4313      	orrs	r3, r2
 8002934:	b21b      	sxth	r3, r3
 8002936:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	441a      	add	r2, r3
 8002944:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800294c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002958:	b29b      	uxth	r3, r3
 800295a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	7b1b      	ldrb	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 8178 	bne.w	8002c56 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8084 	beq.w	8002a78 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	00da      	lsls	r2, r3, #3
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	88db      	ldrh	r3, [r3, #6]
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	b29b      	uxth	r3, r3
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	827b      	strh	r3, [r7, #18]
 80029b2:	8a7b      	ldrh	r3, [r7, #18]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01b      	beq.n	80029f4 <USB_ActivateEndpoint+0x180>
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	823b      	strh	r3, [r7, #16]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	8a3b      	ldrh	r3, [r7, #16]
 80029e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	78db      	ldrb	r3, [r3, #3]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d020      	beq.n	8002a3e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a12:	81bb      	strh	r3, [r7, #12]
 8002a14:	89bb      	ldrh	r3, [r7, #12]
 8002a16:	f083 0320 	eor.w	r3, r3, #32
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	89bb      	ldrh	r3, [r7, #12]
 8002a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	8013      	strh	r3, [r2, #0]
 8002a3c:	e2d5      	b.n	8002fea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a54:	81fb      	strh	r3, [r7, #14]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	441a      	add	r2, r3
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	8013      	strh	r3, [r2, #0]
 8002a76:	e2b8      	b.n	8002fea <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	4413      	add	r3, r2
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	00da      	lsls	r2, r3, #3
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	88db      	ldrh	r3, [r3, #6]
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	4413      	add	r3, r2
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	00da      	lsls	r2, r3, #3
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	4413      	add	r3, r2
 8002aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ae6:	d91d      	bls.n	8002b24 <USB_ActivateEndpoint+0x2b0>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <USB_ActivateEndpoint+0x28e>
 8002afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002afe:	3b01      	subs	r3, #1
 8002b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	029b      	lsls	r3, r3, #10
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	e026      	b.n	8002b72 <USB_ActivateEndpoint+0x2fe>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <USB_ActivateEndpoint+0x2ce>
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e017      	b.n	8002b72 <USB_ActivateEndpoint+0x2fe>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <USB_ActivateEndpoint+0x2e8>
 8002b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b58:	3301      	adds	r3, #1
 8002b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	029b      	lsls	r3, r3, #10
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01b      	beq.n	8002bc2 <USB_ActivateEndpoint+0x34e>
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	843b      	strh	r3, [r7, #32]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	441a      	add	r2, r3
 8002bac:	8c3b      	ldrh	r3, [r7, #32]
 8002bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d124      	bne.n	8002c14 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be0:	83bb      	strh	r3, [r7, #28]
 8002be2:	8bbb      	ldrh	r3, [r7, #28]
 8002be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002be8:	83bb      	strh	r3, [r7, #28]
 8002bea:	8bbb      	ldrh	r3, [r7, #28]
 8002bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bf0:	83bb      	strh	r3, [r7, #28]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	8bbb      	ldrh	r3, [r7, #28]
 8002bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	8013      	strh	r3, [r2, #0]
 8002c12:	e1ea      	b.n	8002fea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	83fb      	strh	r3, [r7, #30]
 8002c2c:	8bfb      	ldrh	r3, [r7, #30]
 8002c2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c32:	83fb      	strh	r3, [r7, #30]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	8bfb      	ldrh	r3, [r7, #30]
 8002c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	8013      	strh	r3, [r2, #0]
 8002c54:	e1c9      	b.n	8002fea <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d11e      	bne.n	8002c9c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	8013      	strh	r3, [r2, #0]
 8002c9a:	e01d      	b.n	8002cd8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce8:	4413      	add	r3, r2
 8002cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	00da      	lsls	r2, r3, #3
 8002cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	891b      	ldrh	r3, [r3, #8]
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1c:	4413      	add	r3, r2
 8002d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	00da      	lsls	r2, r3, #3
 8002d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d28:	4413      	add	r3, r2
 8002d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	895b      	ldrh	r3, [r3, #10]
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 8093 	bne.w	8002e70 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01b      	beq.n	8002d9e <USB_ActivateEndpoint+0x52a>
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002dac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01b      	beq.n	8002dee <USB_ActivateEndpoint+0x57a>
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e04:	873b      	strh	r3, [r7, #56]	; 0x38
 8002e06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e0c:	873b      	strh	r3, [r7, #56]	; 0x38
 8002e0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e14:	873b      	strh	r3, [r7, #56]	; 0x38
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	441a      	add	r2, r3
 8002e58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	8013      	strh	r3, [r2, #0]
 8002e6e:	e0bc      	b.n	8002fea <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01d      	beq.n	8002ec8 <USB_ActivateEndpoint+0x654>
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	441a      	add	r2, r3
 8002eb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002ed8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01d      	beq.n	8002f20 <USB_ActivateEndpoint+0x6ac>
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	441a      	add	r2, r3
 8002f08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	78db      	ldrb	r3, [r3, #3]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d024      	beq.n	8002f72 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f46:	f083 0320 	eor.w	r3, r3, #32
 8002f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	441a      	add	r2, r3
 8002f58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	8013      	strh	r3, [r2, #0]
 8002f70:	e01d      	b.n	8002fae <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8002fea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3774      	adds	r7, #116	; 0x74
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b08d      	sub	sp, #52	; 0x34
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	7b1b      	ldrb	r3, [r3, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 808e 	bne.w	800312c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d044      	beq.n	80030a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	81bb      	strh	r3, [r7, #12]
 8003026:	89bb      	ldrh	r3, [r7, #12]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <USB_DeactivateEndpoint+0x6c>
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	817b      	strh	r3, [r7, #10]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	441a      	add	r2, r3
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003064:	b29b      	uxth	r3, r3
 8003066:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307e:	813b      	strh	r3, [r7, #8]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
 80030a0:	e192      	b.n	80033c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	827b      	strh	r3, [r7, #18]
 80030b0:	8a7b      	ldrh	r3, [r7, #18]
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01b      	beq.n	80030f2 <USB_DeactivateEndpoint+0xf6>
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d0:	823b      	strh	r3, [r7, #16]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	441a      	add	r2, r3
 80030dc:	8a3b      	ldrh	r3, [r7, #16]
 80030de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003108:	81fb      	strh	r3, [r7, #14]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	441a      	add	r2, r3
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003126:	b29b      	uxth	r3, r3
 8003128:	8013      	strh	r3, [r2, #0]
 800312a:	e14d      	b.n	80033c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80a5 	bne.w	8003280 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	843b      	strh	r3, [r7, #32]
 8003144:	8c3b      	ldrh	r3, [r7, #32]
 8003146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d01b      	beq.n	8003186 <USB_DeactivateEndpoint+0x18a>
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003164:	83fb      	strh	r3, [r7, #30]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	441a      	add	r2, r3
 8003170:	8bfb      	ldrh	r3, [r7, #30]
 8003172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800317a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800317e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003182:	b29b      	uxth	r3, r3
 8003184:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	83bb      	strh	r3, [r7, #28]
 8003194:	8bbb      	ldrh	r3, [r7, #28]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01b      	beq.n	80031d6 <USB_DeactivateEndpoint+0x1da>
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	837b      	strh	r3, [r7, #26]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	441a      	add	r2, r3
 80031c0:	8b7b      	ldrh	r3, [r7, #26]
 80031c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ec:	833b      	strh	r3, [r7, #24]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	8b3b      	ldrh	r3, [r7, #24]
 80031fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800320a:	b29b      	uxth	r3, r3
 800320c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	82fb      	strh	r3, [r7, #22]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	8afb      	ldrh	r3, [r7, #22]
 8003232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003242:	b29b      	uxth	r3, r3
 8003244:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325c:	82bb      	strh	r3, [r7, #20]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	441a      	add	r2, r3
 8003268:	8abb      	ldrh	r3, [r7, #20]
 800326a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800326e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327a:	b29b      	uxth	r3, r3
 800327c:	8013      	strh	r3, [r2, #0]
 800327e:	e0a3      	b.n	80033c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800328e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <USB_DeactivateEndpoint+0x2d4>
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80032de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <USB_DeactivateEndpoint+0x324>
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800330c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800331c:	b29b      	uxth	r3, r3
 800331e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800334c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003354:	b29b      	uxth	r3, r3
 8003356:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800337c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338c:	b29b      	uxth	r3, r3
 800338e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3734      	adds	r7, #52	; 0x34
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b0c2      	sub	sp, #264	; 0x108
 80033da:	af00      	add	r7, sp, #0
 80033dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033e4:	6018      	str	r0, [r3, #0]
 80033e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80033f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f040 86b7 	bne.w	8004170 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	429a      	cmp	r2, r3
 800341c:	d908      	bls.n	8003430 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800341e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800342e:	e007      	b.n	8003440 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	7b1b      	ldrb	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d13a      	bne.n	80034c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6959      	ldr	r1, [r3, #20]
 800345c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	88da      	ldrh	r2, [r3, #6]
 8003468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800346c:	b29b      	uxth	r3, r3
 800346e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003472:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003476:	6800      	ldr	r0, [r0, #0]
 8003478:	f001 fc98 	bl	8004dac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800347c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800348c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	00da      	lsls	r2, r3, #3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	801a      	strh	r2, [r3, #0]
 80034c2:	f000 be1f 	b.w	8004104 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80034c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	78db      	ldrb	r3, [r3, #3]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f040 8462 	bne.w	8003d9c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80034d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f240 83df 	bls.w	8003cb4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80034f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800352e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800353e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003546:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800354a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354e:	b29b      	uxth	r3, r3
 8003550:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800357e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 81c7 	beq.w	8003926 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800359c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
 80035a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	785b      	ldrb	r3, [r3, #1]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d177      	bne.n	80036a4 <USB_EPStartXfer+0x2ce>
 80035b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	4413      	add	r3, r2
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00da      	lsls	r2, r3, #3
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	4413      	add	r3, r2
 80035ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003604:	2b3e      	cmp	r3, #62	; 0x3e
 8003606:	d921      	bls.n	800364c <USB_EPStartXfer+0x276>
 8003608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <USB_EPStartXfer+0x252>
 800361e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003622:	3b01      	subs	r3, #1
 8003624:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29a      	uxth	r2, r3
 800362e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003632:	b29b      	uxth	r3, r3
 8003634:	029b      	lsls	r3, r3, #10
 8003636:	b29b      	uxth	r3, r3
 8003638:	4313      	orrs	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003644:	b29a      	uxth	r2, r3
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	e050      	b.n	80036ee <USB_EPStartXfer+0x318>
 800364c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <USB_EPStartXfer+0x294>
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003662:	b29a      	uxth	r2, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e041      	b.n	80036ee <USB_EPStartXfer+0x318>
 800366a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <USB_EPStartXfer+0x2b4>
 8003680:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003684:	3301      	adds	r3, #1
 8003686:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29a      	uxth	r2, r3
 8003690:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003694:	b29b      	uxth	r3, r3
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	b29b      	uxth	r3, r3
 800369a:	4313      	orrs	r3, r2
 800369c:	b29a      	uxth	r2, r3
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	e024      	b.n	80036ee <USB_EPStartXfer+0x318>
 80036a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d11c      	bne.n	80036ee <USB_EPStartXfer+0x318>
 80036b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	4413      	add	r3, r2
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
 80036cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	00da      	lsls	r2, r3, #3
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	4413      	add	r3, r2
 80036de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80036ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	895b      	ldrh	r3, [r3, #10]
 80036fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6959      	ldr	r1, [r3, #20]
 800370a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800370e:	b29b      	uxth	r3, r3
 8003710:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003714:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003718:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800371c:	6800      	ldr	r0, [r0, #0]
 800371e:	f001 fb45 	bl	8004dac <USB_WritePMA>
            ep->xfer_buff += len;
 8003722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003732:	441a      	add	r2, r3
 8003734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	429a      	cmp	r2, r3
 800375a:	d90f      	bls.n	800377c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800375c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800376c:	1ad2      	subs	r2, r2, r3
 800376e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	621a      	str	r2, [r3, #32]
 800377a:	e00e      	b.n	800379a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800377c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800378c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800379a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800379e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d177      	bne.n	800389a <USB_EPStartXfer+0x4c4>
 80037aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	00da      	lsls	r2, r3, #3
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4413      	add	r3, r2
 80037e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037fa:	2b3e      	cmp	r3, #62	; 0x3e
 80037fc:	d921      	bls.n	8003842 <USB_EPStartXfer+0x46c>
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <USB_EPStartXfer+0x448>
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003818:	3b01      	subs	r3, #1
 800381a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29a      	uxth	r2, r3
 8003824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003828:	b29b      	uxth	r3, r3
 800382a:	029b      	lsls	r3, r3, #10
 800382c:	b29b      	uxth	r3, r3
 800382e:	4313      	orrs	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383a:	b29a      	uxth	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	e056      	b.n	80038f0 <USB_EPStartXfer+0x51a>
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <USB_EPStartXfer+0x48a>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003858:	b29a      	uxth	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e047      	b.n	80038f0 <USB_EPStartXfer+0x51a>
 8003860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800386a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <USB_EPStartXfer+0x4aa>
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387a:	3301      	adds	r3, #1
 800387c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29a      	uxth	r2, r3
 8003886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388a:	b29b      	uxth	r3, r3
 800388c:	029b      	lsls	r3, r3, #10
 800388e:	b29b      	uxth	r3, r3
 8003890:	4313      	orrs	r3, r2
 8003892:	b29a      	uxth	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	801a      	strh	r2, [r3, #0]
 8003898:	e02a      	b.n	80038f0 <USB_EPStartXfer+0x51a>
 800389a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800389e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d122      	bne.n	80038f0 <USB_EPStartXfer+0x51a>
 80038aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	4413      	add	r3, r2
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	00da      	lsls	r2, r3, #3
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	4413      	add	r3, r2
 80038e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80038f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	891b      	ldrh	r3, [r3, #8]
 80038fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6959      	ldr	r1, [r3, #20]
 800390c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003910:	b29b      	uxth	r3, r3
 8003912:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003916:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800391a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800391e:	6800      	ldr	r0, [r0, #0]
 8003920:	f001 fa44 	bl	8004dac <USB_WritePMA>
 8003924:	e3ee      	b.n	8004104 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800392a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	785b      	ldrb	r3, [r3, #1]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d177      	bne.n	8003a26 <USB_EPStartXfer+0x650>
 8003936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800393a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	64bb      	str	r3, [r7, #72]	; 0x48
 8003942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003950:	b29b      	uxth	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003956:	4413      	add	r3, r2
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
 800395a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800395e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	00da      	lsls	r2, r3, #3
 8003968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396a:	4413      	add	r3, r2
 800396c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003970:	647b      	str	r3, [r7, #68]	; 0x44
 8003972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800397c:	b29a      	uxth	r2, r3
 800397e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003986:	2b3e      	cmp	r3, #62	; 0x3e
 8003988:	d921      	bls.n	80039ce <USB_EPStartXfer+0x5f8>
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <USB_EPStartXfer+0x5d4>
 80039a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039a4:	3b01      	subs	r3, #1
 80039a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	029b      	lsls	r3, r3, #10
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	4313      	orrs	r3, r2
 80039bc:	b29b      	uxth	r3, r3
 80039be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	e056      	b.n	8003a7c <USB_EPStartXfer+0x6a6>
 80039ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <USB_EPStartXfer+0x616>
 80039d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	e047      	b.n	8003a7c <USB_EPStartXfer+0x6a6>
 80039ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <USB_EPStartXfer+0x636>
 8003a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a06:	3301      	adds	r3, #1
 8003a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a22:	801a      	strh	r2, [r3, #0]
 8003a24:	e02a      	b.n	8003a7c <USB_EPStartXfer+0x6a6>
 8003a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d122      	bne.n	8003a7c <USB_EPStartXfer+0x6a6>
 8003a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	653b      	str	r3, [r7, #80]	; 0x50
 8003a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a56:	4413      	add	r3, r2
 8003a58:	653b      	str	r3, [r7, #80]	; 0x50
 8003a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	00da      	lsls	r2, r3, #3
 8003a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	891b      	ldrh	r3, [r3, #8]
 8003a88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6959      	ldr	r1, [r3, #20]
 8003a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003aa2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003aa6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003aaa:	6800      	ldr	r0, [r0, #0]
 8003aac:	f001 f97e 	bl	8004dac <USB_WritePMA>
            ep->xfer_buff += len;
 8003ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac0:	441a      	add	r2, r3
 8003ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a1a      	ldr	r2, [r3, #32]
 8003ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d90f      	bls.n	8003b0a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	621a      	str	r2, [r3, #32]
 8003b08:	e00e      	b.n	8003b28 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	643b      	str	r3, [r7, #64]	; 0x40
 8003b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d177      	bne.n	8003c34 <USB_EPStartXfer+0x85e>
 8003b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	4413      	add	r3, r2
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	00da      	lsls	r2, r3, #3
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	4413      	add	r3, r2
 8003b7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b94:	2b3e      	cmp	r3, #62	; 0x3e
 8003b96:	d921      	bls.n	8003bdc <USB_EPStartXfer+0x806>
 8003b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <USB_EPStartXfer+0x7e2>
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	029b      	lsls	r3, r3, #10
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e050      	b.n	8003c7e <USB_EPStartXfer+0x8a8>
 8003bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <USB_EPStartXfer+0x824>
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e041      	b.n	8003c7e <USB_EPStartXfer+0x8a8>
 8003bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <USB_EPStartXfer+0x844>
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	3301      	adds	r3, #1
 8003c16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	029b      	lsls	r3, r3, #10
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	e024      	b.n	8003c7e <USB_EPStartXfer+0x8a8>
 8003c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d11c      	bne.n	8003c7e <USB_EPStartXfer+0x8a8>
 8003c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c58:	4413      	add	r3, r2
 8003c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	00da      	lsls	r2, r3, #3
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	895b      	ldrh	r3, [r3, #10]
 8003c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6959      	ldr	r1, [r3, #20]
 8003c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003cac:	6800      	ldr	r0, [r0, #0]
 8003cae:	f001 f87d 	bl	8004dac <USB_WritePMA>
 8003cb2:	e227      	b.n	8004104 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	441a      	add	r2, r3
 8003d08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d40:	4413      	add	r3, r2
 8003d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	00da      	lsls	r2, r3, #3
 8003d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d54:	4413      	add	r3, r2
 8003d56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	891b      	ldrh	r3, [r3, #8]
 8003d72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6959      	ldr	r1, [r3, #20]
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003d8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003d90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003d94:	6800      	ldr	r0, [r0, #0]
 8003d96:	f001 f809 	bl	8004dac <USB_WritePMA>
 8003d9a:	e1b3      	b.n	8004104 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dac:	1ad2      	subs	r2, r2, r3
 8003dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80c6 	beq.w	8003f6e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	673b      	str	r3, [r7, #112]	; 0x70
 8003dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	785b      	ldrb	r3, [r3, #1]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d177      	bne.n	8003eee <USB_EPStartXfer+0xb18>
 8003dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e1e:	4413      	add	r3, r2
 8003e20:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	00da      	lsls	r2, r3, #3
 8003e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e32:	4413      	add	r3, r2
 8003e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e38:	667b      	str	r3, [r7, #100]	; 0x64
 8003e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e48:	801a      	strh	r2, [r3, #0]
 8003e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e50:	d921      	bls.n	8003e96 <USB_EPStartXfer+0xac0>
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <USB_EPStartXfer+0xa9c>
 8003e68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	e050      	b.n	8003f38 <USB_EPStartXfer+0xb62>
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <USB_EPStartXfer+0xade>
 8003e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	e041      	b.n	8003f38 <USB_EPStartXfer+0xb62>
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <USB_EPStartXfer+0xafe>
 8003eca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	029b      	lsls	r3, r3, #10
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e024      	b.n	8003f38 <USB_EPStartXfer+0xb62>
 8003eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d11c      	bne.n	8003f38 <USB_EPStartXfer+0xb62>
 8003efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f12:	4413      	add	r3, r2
 8003f14:	673b      	str	r3, [r7, #112]	; 0x70
 8003f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	00da      	lsls	r2, r3, #3
 8003f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f26:	4413      	add	r3, r2
 8003f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	895b      	ldrh	r3, [r3, #10]
 8003f44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6959      	ldr	r1, [r3, #20]
 8003f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003f62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003f66:	6800      	ldr	r0, [r0, #0]
 8003f68:	f000 ff20 	bl	8004dac <USB_WritePMA>
 8003f6c:	e0ca      	b.n	8004104 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d177      	bne.n	800406e <USB_EPStartXfer+0xc98>
 8003f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f9e:	4413      	add	r3, r2
 8003fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	00da      	lsls	r2, r3, #3
 8003fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fce:	2b3e      	cmp	r3, #62	; 0x3e
 8003fd0:	d921      	bls.n	8004016 <USB_EPStartXfer+0xc40>
 8003fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <USB_EPStartXfer+0xc1c>
 8003fe8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fec:	3b01      	subs	r3, #1
 8003fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	029b      	lsls	r3, r3, #10
 8004000:	b29b      	uxth	r3, r3
 8004002:	4313      	orrs	r3, r2
 8004004:	b29b      	uxth	r3, r3
 8004006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400e:	b29a      	uxth	r2, r3
 8004010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	e05c      	b.n	80040d0 <USB_EPStartXfer+0xcfa>
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <USB_EPStartXfer+0xc5e>
 800401e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402c:	b29a      	uxth	r2, r3
 800402e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	e04d      	b.n	80040d0 <USB_EPStartXfer+0xcfa>
 8004034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <USB_EPStartXfer+0xc7e>
 800404a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800404e:	3301      	adds	r3, #1
 8004050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29a      	uxth	r2, r3
 800405a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800405e:	b29b      	uxth	r3, r3
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	b29b      	uxth	r3, r3
 8004064:	4313      	orrs	r3, r2
 8004066:	b29a      	uxth	r2, r3
 8004068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e030      	b.n	80040d0 <USB_EPStartXfer+0xcfa>
 800406e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d128      	bne.n	80040d0 <USB_EPStartXfer+0xcfa>
 800407e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800408c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a2:	4413      	add	r3, r2
 80040a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	00da      	lsls	r2, r3, #3
 80040b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ba:	4413      	add	r3, r2
 80040bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	891b      	ldrh	r3, [r3, #8]
 80040dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6959      	ldr	r1, [r3, #20]
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80040f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80040fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80040fe:	6800      	ldr	r0, [r0, #0]
 8004100:	f000 fe54 	bl	8004dac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412a:	817b      	strh	r3, [r7, #10]
 800412c:	897b      	ldrh	r3, [r7, #10]
 800412e:	f083 0310 	eor.w	r3, r3, #16
 8004132:	817b      	strh	r3, [r7, #10]
 8004134:	897b      	ldrh	r3, [r7, #10]
 8004136:	f083 0320 	eor.w	r3, r3, #32
 800413a:	817b      	strh	r3, [r7, #10]
 800413c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800414a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	897b      	ldrh	r3, [r7, #10]
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]
 800416c:	f000 bcde 	b.w	8004b2c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	7b1b      	ldrb	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 80bb 	bne.w	80042f8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	d917      	bls.n	80041ce <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800419e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80041ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	619a      	str	r2, [r3, #24]
 80041cc:	e00e      	b.n	80041ec <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80041ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80041de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80041ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004210:	4413      	add	r3, r2
 8004212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800421a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	00da      	lsls	r2, r3, #3
 8004224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004228:	4413      	add	r3, r2
 800422a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800422e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423e:	b29a      	uxth	r2, r3
 8004240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424a:	2b3e      	cmp	r3, #62	; 0x3e
 800424c:	d924      	bls.n	8004298 <USB_EPStartXfer+0xec2>
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <USB_EPStartXfer+0xe98>
 8004264:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004268:	3b01      	subs	r3, #1
 800426a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800426e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29a      	uxth	r2, r3
 8004276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800427a:	b29b      	uxth	r3, r3
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	b29b      	uxth	r3, r3
 8004280:	4313      	orrs	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428c:	b29a      	uxth	r2, r3
 800428e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	f000 bc10 	b.w	8004ab8 <USB_EPStartXfer+0x16e2>
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10c      	bne.n	80042ba <USB_EPStartXfer+0xee4>
 80042a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e3fe      	b.n	8004ab8 <USB_EPStartXfer+0x16e2>
 80042ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <USB_EPStartXfer+0xf04>
 80042d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042d4:	3301      	adds	r3, #1
 80042d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	4313      	orrs	r3, r2
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	e3df      	b.n	8004ab8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80042f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	78db      	ldrb	r3, [r3, #3]
 8004304:	2b02      	cmp	r3, #2
 8004306:	f040 8218 	bne.w	800473a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800430a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800430e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 809d 	bne.w	8004456 <USB_EPStartXfer+0x1080>
 800431c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800432a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800432e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004338:	b29b      	uxth	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004340:	4413      	add	r3, r2
 8004342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800434a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	00da      	lsls	r2, r3, #3
 8004354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004358:	4413      	add	r3, r2
 800435a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800435e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800436e:	b29a      	uxth	r2, r3
 8004370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b3e      	cmp	r3, #62	; 0x3e
 8004384:	d92b      	bls.n	80043de <USB_EPStartXfer+0x1008>
 8004386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800438a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800439c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <USB_EPStartXfer+0xfe0>
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	3b01      	subs	r3, #1
 80043b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	029b      	lsls	r3, r3, #10
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043da:	801a      	strh	r2, [r3, #0]
 80043dc:	e070      	b.n	80044c0 <USB_EPStartXfer+0x10ea>
 80043de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10c      	bne.n	8004408 <USB_EPStartXfer+0x1032>
 80043ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fe:	b29a      	uxth	r2, r3
 8004400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	e05b      	b.n	80044c0 <USB_EPStartXfer+0x10ea>
 8004408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800440c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800441a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <USB_EPStartXfer+0x1062>
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	3301      	adds	r3, #1
 8004434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29a      	uxth	r2, r3
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004444:	b29b      	uxth	r3, r3
 8004446:	029b      	lsls	r3, r3, #10
 8004448:	b29b      	uxth	r3, r3
 800444a:	4313      	orrs	r3, r2
 800444c:	b29a      	uxth	r2, r3
 800444e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	e034      	b.n	80044c0 <USB_EPStartXfer+0x10ea>
 8004456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800445a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d12c      	bne.n	80044c0 <USB_EPStartXfer+0x10ea>
 8004466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800446a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004482:	b29b      	uxth	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800448a:	4413      	add	r3, r2
 800448c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	00da      	lsls	r2, r3, #3
 800449e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044a2:	4413      	add	r3, r2
 80044a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 809d 	bne.w	800461a <USB_EPStartXfer+0x1244>
 80044e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004504:	4413      	add	r3, r2
 8004506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800450a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800450e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	00da      	lsls	r2, r3, #3
 8004518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800451c:	4413      	add	r3, r2
 800451e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004532:	b29a      	uxth	r2, r3
 8004534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800453e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b3e      	cmp	r3, #62	; 0x3e
 8004548:	d92b      	bls.n	80045a2 <USB_EPStartXfer+0x11cc>
 800454a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800454e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800455c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <USB_EPStartXfer+0x11a4>
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004574:	3b01      	subs	r3, #1
 8004576:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800457a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29a      	uxth	r2, r3
 8004582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004586:	b29b      	uxth	r3, r3
 8004588:	029b      	lsls	r3, r3, #10
 800458a:	b29b      	uxth	r3, r3
 800458c:	4313      	orrs	r3, r2
 800458e:	b29b      	uxth	r3, r3
 8004590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004598:	b29a      	uxth	r2, r3
 800459a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	e069      	b.n	8004676 <USB_EPStartXfer+0x12a0>
 80045a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <USB_EPStartXfer+0x11f6>
 80045b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e054      	b.n	8004676 <USB_EPStartXfer+0x12a0>
 80045cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <USB_EPStartXfer+0x1226>
 80045f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f6:	3301      	adds	r3, #1
 80045f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29a      	uxth	r2, r3
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004608:	b29b      	uxth	r3, r3
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	b29b      	uxth	r3, r3
 800460e:	4313      	orrs	r3, r2
 8004610:	b29a      	uxth	r2, r3
 8004612:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004616:	801a      	strh	r2, [r3, #0]
 8004618:	e02d      	b.n	8004676 <USB_EPStartXfer+0x12a0>
 800461a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800461e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d125      	bne.n	8004676 <USB_EPStartXfer+0x12a0>
 800462a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800462e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004638:	b29b      	uxth	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004640:	4413      	add	r3, r2
 8004642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800464a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	00da      	lsls	r2, r3, #3
 8004654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004658:	4413      	add	r3, r2
 800465a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800465e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	b29a      	uxth	r2, r3
 8004670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004674:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8218 	beq.w	8004ab8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80046ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <USB_EPStartXfer+0x12ea>
 80046b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80046c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 81f5 	bne.w	8004ab8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 81ee 	bne.w	8004ab8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80046dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
 8004738:	e1be      	b.n	8004ab8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800473a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800473e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	78db      	ldrb	r3, [r3, #3]
 8004746:	2b01      	cmp	r3, #1
 8004748:	f040 81b4 	bne.w	8004ab4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800474c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800475c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d917      	bls.n	8004798 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800477c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004788:	1ad2      	subs	r2, r2, r3
 800478a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800478e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	619a      	str	r2, [r3, #24]
 8004796:	e00e      	b.n	80047b6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80047a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80047b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 8085 	bne.w	80048d2 <USB_EPStartXfer+0x14fc>
 80047c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047ec:	4413      	add	r3, r2
 80047ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	00da      	lsls	r2, r3, #3
 8004800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004804:	4413      	add	r3, r2
 8004806:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800480a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800480e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481a:	b29a      	uxth	r2, r3
 800481c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004826:	2b3e      	cmp	r3, #62	; 0x3e
 8004828:	d923      	bls.n	8004872 <USB_EPStartXfer+0x149c>
 800482a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <USB_EPStartXfer+0x1474>
 8004840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004844:	3b01      	subs	r3, #1
 8004846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800484a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29a      	uxth	r2, r3
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004856:	b29b      	uxth	r3, r3
 8004858:	029b      	lsls	r3, r3, #10
 800485a:	b29b      	uxth	r3, r3
 800485c:	4313      	orrs	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004868:	b29a      	uxth	r2, r3
 800486a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e060      	b.n	8004934 <USB_EPStartXfer+0x155e>
 8004872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10c      	bne.n	8004894 <USB_EPStartXfer+0x14be>
 800487a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488a:	b29a      	uxth	r2, r3
 800488c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	e04f      	b.n	8004934 <USB_EPStartXfer+0x155e>
 8004894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800489e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <USB_EPStartXfer+0x14de>
 80048aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ae:	3301      	adds	r3, #1
 80048b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	029b      	lsls	r3, r3, #10
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4313      	orrs	r3, r2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	e030      	b.n	8004934 <USB_EPStartXfer+0x155e>
 80048d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d128      	bne.n	8004934 <USB_EPStartXfer+0x155e>
 80048e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004906:	4413      	add	r3, r2
 8004908:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	00da      	lsls	r2, r3, #3
 800491a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491e:	4413      	add	r3, r2
 8004920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800492c:	b29a      	uxth	r2, r3
 800492e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 8085 	bne.w	8004a5e <USB_EPStartXfer+0x1688>
 8004954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004970:	b29b      	uxth	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004978:	4413      	add	r3, r2
 800497a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800497e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	00da      	lsls	r2, r3, #3
 800498c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004990:	4413      	add	r3, r2
 8004992:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800499a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b2:	2b3e      	cmp	r3, #62	; 0x3e
 80049b4:	d923      	bls.n	80049fe <USB_EPStartXfer+0x1628>
 80049b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <USB_EPStartXfer+0x1600>
 80049cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d0:	3b01      	subs	r3, #1
 80049d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e05c      	b.n	8004ab8 <USB_EPStartXfer+0x16e2>
 80049fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10c      	bne.n	8004a20 <USB_EPStartXfer+0x164a>
 8004a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e04b      	b.n	8004ab8 <USB_EPStartXfer+0x16e2>
 8004a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <USB_EPStartXfer+0x166a>
 8004a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	4313      	orrs	r3, r2
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	e02c      	b.n	8004ab8 <USB_EPStartXfer+0x16e2>
 8004a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d124      	bne.n	8004ab8 <USB_EPStartXfer+0x16e2>
 8004a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a84:	4413      	add	r3, r2
 8004a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	00da      	lsls	r2, r3, #3
 8004a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	e001      	b.n	8004ab8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e03a      	b.n	8004b2e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004ae2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ae6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004aea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004aee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004af2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004af6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b60:	81bb      	strh	r3, [r7, #12]
 8004b62:	89bb      	ldrh	r3, [r7, #12]
 8004b64:	f083 0310 	eor.w	r3, r3, #16
 8004b68:	81bb      	strh	r3, [r7, #12]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	89bb      	ldrh	r3, [r7, #12]
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
 8004b8a:	e01f      	b.n	8004bcc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	81fb      	strh	r3, [r7, #14]
 8004ba4:	89fb      	ldrh	r3, [r7, #14]
 8004ba6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004baa:	81fb      	strh	r3, [r7, #14]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	89fb      	ldrh	r3, [r7, #14]
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	7b1b      	ldrb	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 809d 	bne.w	8004d28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04c      	beq.n	8004c90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	823b      	strh	r3, [r7, #16]
 8004c04:	8a3b      	ldrh	r3, [r7, #16]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01b      	beq.n	8004c46 <USB_EPClearStall+0x6c>
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	81fb      	strh	r3, [r7, #14]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	78db      	ldrb	r3, [r3, #3]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d06c      	beq.n	8004d28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c64:	81bb      	strh	r3, [r7, #12]
 8004c66:	89bb      	ldrh	r3, [r7, #12]
 8004c68:	f083 0320 	eor.w	r3, r3, #32
 8004c6c:	81bb      	strh	r3, [r7, #12]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	89bb      	ldrh	r3, [r7, #12]
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]
 8004c8e:	e04b      	b.n	8004d28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	82fb      	strh	r3, [r7, #22]
 8004c9e:	8afb      	ldrh	r3, [r7, #22]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <USB_EPClearStall+0x106>
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	82bb      	strh	r3, [r7, #20]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	8abb      	ldrh	r3, [r7, #20]
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	827b      	strh	r3, [r7, #18]
 8004cf8:	8a7b      	ldrh	r3, [r7, #18]
 8004cfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cfe:	827b      	strh	r3, [r7, #18]
 8004d00:	8a7b      	ldrh	r3, [r7, #18]
 8004d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d06:	827b      	strh	r3, [r7, #18]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2280      	movs	r2, #128	; 0x80
 8004d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b08b      	sub	sp, #44	; 0x2c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4611      	mov	r1, r2
 8004db8:	461a      	mov	r2, r3
 8004dba:	460b      	mov	r3, r1
 8004dbc:	80fb      	strh	r3, [r7, #6]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004dc2:	88bb      	ldrh	r3, [r7, #4]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ddc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
 8004de2:	e01b      	b.n	8004e1c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3301      	adds	r3, #1
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	b21a      	sxth	r2, r3
 8004df4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	b21b      	sxth	r3, r3
 8004dfc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	8a7a      	ldrh	r2, [r7, #18]
 8004e02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	3302      	adds	r3, #2
 8004e08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	3301      	adds	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e0      	bne.n	8004de4 <USB_WritePMA+0x38>
  }
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	372c      	adds	r7, #44	; 0x2c
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b08b      	sub	sp, #44	; 0x2c
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	460b      	mov	r3, r1
 8004e40:	80fb      	strh	r3, [r7, #6]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e46:	88bb      	ldrh	r3, [r7, #4]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	e018      	b.n	8004e9a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	3302      	adds	r3, #2
 8004e74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3301      	adds	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3301      	adds	r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	3b01      	subs	r3, #1
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e3      	bne.n	8004e68 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004ea0:	88bb      	ldrh	r3, [r7, #4]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	701a      	strb	r2, [r3, #0]
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	372c      	adds	r7, #44	; 0x2c
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <CAN_voidInit>:
 */

#include "CAN_Interface.h"

void CAN_voidInit(CAN_RegMap_t* A_canx, CAN_RxConfig_t* A_rxConfig, CAN_TxConfig_t* A_txConfig)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b08b      	sub	sp, #44	; 0x2c
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4aa0      	ldr	r2, [pc, #640]	; (8005158 <CAN_voidInit+0x290>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d102      	bne.n	8004ee2 <CAN_voidInit+0x1a>
		L_msg = CAN1_MESSAGES;
 8004edc:	4b9f      	ldr	r3, [pc, #636]	; (800515c <CAN_voidInit+0x294>)
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee0:	e00c      	b.n	8004efc <CAN_voidInit+0x34>
	else if(A_canx == CAN2)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a9e      	ldr	r2, [pc, #632]	; (8005160 <CAN_voidInit+0x298>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d102      	bne.n	8004ef0 <CAN_voidInit+0x28>
		L_msg = CAN2_MESSAGES;
 8004eea:	4b9e      	ldr	r3, [pc, #632]	; (8005164 <CAN_voidInit+0x29c>)
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	e005      	b.n	8004efc <CAN_voidInit+0x34>
	else if(A_canx == CAN3)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a9d      	ldr	r2, [pc, #628]	; (8005168 <CAN_voidInit+0x2a0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <CAN_voidInit+0x34>
			L_msg = CAN3_MESSAGES;
 8004ef8:	4b9c      	ldr	r3, [pc, #624]	; (800516c <CAN_voidInit+0x2a4>)
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enter Initialization mode */
	A_canx->CCCR |= (1 << 0);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f043 0201 	orr.w	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	619a      	str	r2, [r3, #24]
	while(! ((A_canx->CCCR >> 0) & 1));  // Wait to make sure INIT bit has been written (Recommendation from reference manual)
 8004f08:	bf00      	nop
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f9      	beq.n	8004f0a <CAN_voidInit+0x42>

	// might configure Timeout value here
	A_canx->CCCR |= (1 << 1);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f043 0202 	orr.w	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	619a      	str	r2, [r3, #24]

/* Setup General Configuration */
#if CAN_FDCAN_OPERATION == CAN_FDCAN_DISABLE
		A_canx->CCCR &= ~(1 << 8);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 8);
#endif

#if CAN_BIT_RATE_SWITCHING == CAN_BIT_RATE_SWITCHING_DISABLE
		A_canx->CCCR &= ~(1 << 9);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 9);
#endif

#if CAN_EDGE_FILTERING == CAN_FILTERING_DISABLE
		A_canx->CCCR &= ~(1 << 13);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 13);
#endif

#if CAN_EXCEPTION_HANDLING == CAN_EXCEPTION_ENABLE
		A_canx->CCCR &= ~(1 << 12);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 12);
#endif

#if CAN_BUS_MONITORING == CAN_BUS_MONITORING_DISABLE
		A_canx->CCCR &= ~(1 << 5);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f023 0220 	bic.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 5);
#endif

#if CAN_OPERATION_MODE == CAN_MODE_NORMAL_OPERATION
		A_canx->CCCR &= ~(1 << 2);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f023 0204 	bic.w	r2, r3, #4
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 2);
#endif

	/* Timing Configuration */
	u32 L_timing = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 25);		// 3 is default value for NSJW (Nominal (re)synchronization jump width)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8004f74:	61bb      	str	r3, [r7, #24]
	// L_timing |= (0 << 16);		// 0 is the default value for NBRP (Bit rate prescaler)
	L_timing |= (10 << 8);		// 10 is the default value for NTSEG1
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8004f7c:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 0);		// 3 is the default value for NTSEG2
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f043 0303 	orr.w	r3, r3, #3
 8004f84:	61bb      	str	r3, [r7, #24]
	 * for 125kb  (8us)	 BRB = 8
	 * for 250kb  (4us)  BRB = 4
	 * for 500kb  (2us)  BRB = 2
	 * for 1000kb (1us)  BRB = 1
	 * */
	L_timing |= (CAN_BAUD_RATE << 16);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004f8c:	61bb      	str	r3, [r7, #24]

	A_canx->NBTP = L_timing;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	61da      	str	r2, [r3, #28]

	/* Receiver Configuration */
	if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO0){
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <CAN_voidInit+0xe6>
		A_canx->RXGFC &= ~(0b11 << 4);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004fac:	e01c      	b.n	8004fe8 <CAN_voidInit+0x120>
	}
	else if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO1){
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d110      	bne.n	8004fd8 <CAN_voidInit+0x110>
		A_canx->RXGFC &= ~(0b11 << 4);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		A_canx->RXGFC |= (1 << 4);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fcc:	f043 0210 	orr.w	r2, r3, #16
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004fd6:	e007      	b.n	8004fe8 <CAN_voidInit+0x120>
	}
	else{	// Reject
		A_canx->RXGFC |= (0b11 << 4);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fde:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	if(A_rxConfig->FIFO0_Mode == CAN_RX_FIFO_BLOCKING)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d108      	bne.n	8005002 <CAN_voidInit+0x13a>
		A_canx->RXGFC &= ~(1 << 9);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005000:	e007      	b.n	8005012 <CAN_voidInit+0x14a>
	else	// Overwrite
		A_canx->RXGFC |= (1 << 9);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	if(A_rxConfig->FIFO1_Mode == CAN_RX_FIFO_BLOCKING)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	789b      	ldrb	r3, [r3, #2]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d108      	bne.n	800502c <CAN_voidInit+0x164>
			A_canx->RXGFC &= ~(1 << 8);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800502a:	e007      	b.n	800503c <CAN_voidInit+0x174>
		else
			A_canx->RXGFC |= (1 << 8);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005032:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	A_canx->RXGFC &= ~(0b11111 << 16);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005042:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	A_canx->RXGFC |= ((A_rxConfig->FIFO0_numberOfIDs + A_rxConfig->FIFO1_numberOfIDs) << 16);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	78d2      	ldrb	r2, [r2, #3]
 8005056:	4611      	mov	r1, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	7912      	ldrb	r2, [r2, #4]
 800505c:	440a      	add	r2, r1
 800505e:	0412      	lsls	r2, r2, #16
 8005060:	431a      	orrs	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Flush SRAM */
	u32 pointer;
	pointer = (u32)L_msg;
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e008      	b.n	8005084 <CAN_voidInit+0x1bc>
		*(u32 *)(pointer) = 0x00000000U;
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
		pointer += 4;
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	3304      	adds	r3, #4
 800507c:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 800507e:	7ffb      	ldrb	r3, [r7, #31]
 8005080:	3301      	adds	r3, #1
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	7ffb      	ldrb	r3, [r7, #31]
 8005086:	2bd3      	cmp	r3, #211	; 0xd3
 8005088:	d9f3      	bls.n	8005072 <CAN_voidInit+0x1aa>
	}

	/* Store The IDs */
	u32 L_temp;
	u8 L_idIndex = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	77bb      	strb	r3, [r7, #30]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 800508e:	2300      	movs	r3, #0
 8005090:	777b      	strb	r3, [r7, #29]
 8005092:	e023      	b.n	80050dc <CAN_voidInit+0x214>
		L_temp = A_rxConfig->FIFO0_IDs[i];			// SID1
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	7f7b      	ldrb	r3, [r7, #29]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO0_IDs[i] << 16);	// SID2
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	7f7b      	ldrb	r3, [r7, #29]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 27);				// Store in FIFO0 (if filter matches)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050bc:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050c4:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 80050c6:	7fbb      	ldrb	r3, [r7, #30]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	77ba      	strb	r2, [r7, #30]
 80050cc:	4619      	mov	r1, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 80050d6:	7f7b      	ldrb	r3, [r7, #29]
 80050d8:	3301      	adds	r3, #1
 80050da:	777b      	strb	r3, [r7, #29]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	78db      	ldrb	r3, [r3, #3]
 80050e0:	7f7a      	ldrb	r2, [r7, #29]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3d6      	bcc.n	8005094 <CAN_voidInit+0x1cc>
	}

	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 80050e6:	2300      	movs	r3, #0
 80050e8:	773b      	strb	r3, [r7, #28]
 80050ea:	e023      	b.n	8005134 <CAN_voidInit+0x26c>
		L_temp = A_rxConfig->FIFO1_IDs[i];			// SID1
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	7f3b      	ldrb	r3, [r7, #28]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO1_IDs[i] << 16);	// SID2
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	7f3b      	ldrb	r3, [r7, #28]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 28);				// Store in FIFO1 (if filter matches)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800511c:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 800511e:	7fbb      	ldrb	r3, [r7, #30]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	77ba      	strb	r2, [r7, #30]
 8005124:	4619      	mov	r1, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 800512e:	7f3b      	ldrb	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	773b      	strb	r3, [r7, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	791b      	ldrb	r3, [r3, #4]
 8005138:	7f3a      	ldrb	r2, [r7, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	d3d6      	bcc.n	80050ec <CAN_voidInit+0x224>
	}

	/* Transmitter Configuration */
	if(A_txConfig->bufferType == CAN_TX_BUFFER_FIFO)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d114      	bne.n	8005170 <CAN_voidInit+0x2a8>
		A_canx->TXBC &= ~(1 << 24);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800514c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005156:	e013      	b.n	8005180 <CAN_voidInit+0x2b8>
 8005158:	40006400 	.word	0x40006400
 800515c:	4000a400 	.word	0x4000a400
 8005160:	40006800 	.word	0x40006800
 8005164:	4000a800 	.word	0x4000a800
 8005168:	40006c00 	.word	0x40006c00
 800516c:	4000ac00 	.word	0x4000ac00
	else // Queue FIFO
		A_canx->TXBC |= (1 << 24);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005176:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	if(A_txConfig->transmitPause == CAN_TX_PAUSE_DISABLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <CAN_voidInit+0x2ce>
		A_canx->CCCR &= ~(1 << 14);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]
 8005194:	e005      	b.n	80051a2 <CAN_voidInit+0x2da>
	else
		A_canx->CCCR |= (1 << 14);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]

	if (A_txConfig->automaticTransmission == CAN_AUTOMATIC_TRANSMISSION_ENABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	789b      	ldrb	r3, [r3, #2]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <CAN_voidInit+0x2f0>
		A_canx->CCCR &= ~(1 << 6);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	619a      	str	r2, [r3, #24]
 80051b6:	e005      	b.n	80051c4 <CAN_voidInit+0x2fc>
	else
		A_canx->CCCR |= (1 << 6);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	619a      	str	r2, [r3, #24]

	/* Exit Initialization and Enter Normal mode */
	A_canx->CCCR &= ~(1 << 1);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f023 0202 	bic.w	r2, r3, #2
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	619a      	str	r2, [r3, #24]
	A_canx->CCCR &= ~(1 << 0);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f023 0201 	bic.w	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	619a      	str	r2, [r3, #24]
}
 80051dc:	bf00      	nop
 80051de:	372c      	adds	r7, #44	; 0x2c
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <CAN_voidReceiveDataFrame>:

void CAN_voidReceiveDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame, u8 A_fifox)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	71fb      	strb	r3, [r7, #7]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a5f      	ldr	r2, [pc, #380]	; (8005378 <CAN_voidReceiveDataFrame+0x190>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d102      	bne.n	8005204 <CAN_voidReceiveDataFrame+0x1c>
		L_msg = CAN1_MESSAGES;
 80051fe:	4b5f      	ldr	r3, [pc, #380]	; (800537c <CAN_voidReceiveDataFrame+0x194>)
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e00c      	b.n	800521e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN2)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a5e      	ldr	r2, [pc, #376]	; (8005380 <CAN_voidReceiveDataFrame+0x198>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d102      	bne.n	8005212 <CAN_voidReceiveDataFrame+0x2a>
		L_msg = CAN2_MESSAGES;
 800520c:	4b5d      	ldr	r3, [pc, #372]	; (8005384 <CAN_voidReceiveDataFrame+0x19c>)
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e005      	b.n	800521e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN3)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a5c      	ldr	r2, [pc, #368]	; (8005388 <CAN_voidReceiveDataFrame+0x1a0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <CAN_voidReceiveDataFrame+0x36>
			L_msg = CAN3_MESSAGES;
 800521a:	4b5c      	ldr	r3, [pc, #368]	; (800538c <CAN_voidReceiveDataFrame+0x1a4>)
 800521c:	617b      	str	r3, [r7, #20]

	if(A_fifox == 0)
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d150      	bne.n	80052c6 <CAN_voidReceiveDataFrame+0xde>
	{
		u8 L_getIndex = (u8)(A_canx->RXF0S & (0b11 << 8));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	2300      	movs	r3, #0
 800522c:	743b      	strb	r3, [r7, #16]

		A_frame->id = (L_msg->RxFIFO0[L_getIndex].ID >> 18) & (0b11111111111);
 800522e:	7c3a      	ldrb	r2, [r7, #16]
 8005230:	6979      	ldr	r1, [r7, #20]
 8005232:	4613      	mov	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	33b0      	adds	r3, #176	; 0xb0
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0c9b      	lsrs	r3, r3, #18
 8005242:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	601a      	str	r2, [r3, #0]
		A_frame->dlc = (u8)((L_msg->RxFIFO0[L_getIndex].DLC >> 16) & (0b111));
 800524a:	7c3a      	ldrb	r2, [r7, #16]
 800524c:	6979      	ldr	r1, [r7, #20]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	440b      	add	r3, r1
 8005258:	33b4      	adds	r3, #180	; 0xb4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	711a      	strb	r2, [r3, #4]
		for(u8 i = 0; i < A_frame->dlc; i++)
 800526a:	2300      	movs	r3, #0
 800526c:	74fb      	strb	r3, [r7, #19]
 800526e:	e01c      	b.n	80052aa <CAN_voidReceiveDataFrame+0xc2>
			A_frame->data[i] = (u8)((L_msg->RxFIFO0[L_getIndex].data[i/4] >> 4*(i%4)) & (0xFF));
 8005270:	7c3a      	ldrb	r2, [r7, #16]
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	b2db      	uxtb	r3, r3
 8005278:	4618      	mov	r0, r3
 800527a:	6979      	ldr	r1, [r7, #20]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	4403      	add	r3, r0
 8005286:	332e      	adds	r3, #46	; 0x2e
 8005288:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fa22 f103 	lsr.w	r1, r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	4413      	add	r3, r2
 80052a0:	b2ca      	uxtb	r2, r1
 80052a2:	701a      	strb	r2, [r3, #0]
		for(u8 i = 0; i < A_frame->dlc; i++)
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	3301      	adds	r3, #1
 80052a8:	74fb      	strb	r3, [r7, #19]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	791b      	ldrb	r3, [r3, #4]
 80052ae:	7cfa      	ldrb	r2, [r7, #19]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d3dd      	bcc.n	8005270 <CAN_voidReceiveDataFrame+0x88>

		// Acknowledge Reading
		A_canx->RXF0A |= L_getIndex;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80052ba:	7c3b      	ldrb	r3, [r7, #16]
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			A_frame->data[i] = (u8)((L_msg->RxFIFO1[L_getIndex].data[i/4] >> 4*(i%4)) & (0xFF));

		// Acknowledge Reading
		A_canx->RXF1A |= L_getIndex;
	}
}
 80052c4:	e051      	b.n	800536a <CAN_voidReceiveDataFrame+0x182>
		u8 L_getIndex = (u8)(A_canx->RXF1S & (0b11 << 8));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052cc:	2300      	movs	r3, #0
 80052ce:	747b      	strb	r3, [r7, #17]
		A_frame->id = (L_msg->RxFIFO1[L_getIndex].ID >> 18) & (0b11111111111);
 80052d0:	7c7a      	ldrb	r2, [r7, #17]
 80052d2:	6979      	ldr	r1, [r7, #20]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	0c9b      	lsrs	r3, r3, #18
 80052e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	601a      	str	r2, [r3, #0]
		A_frame->dlc = (u8)((L_msg->RxFIFO1[L_getIndex].DLC >> 16) & (0b111));
 80052ee:	7c7a      	ldrb	r2, [r7, #17]
 80052f0:	6979      	ldr	r1, [r7, #20]
 80052f2:	4613      	mov	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	711a      	strb	r2, [r3, #4]
		for(u8 i = 0; i < A_frame->dlc; i++)
 8005310:	2300      	movs	r3, #0
 8005312:	74bb      	strb	r3, [r7, #18]
 8005314:	e01c      	b.n	8005350 <CAN_voidReceiveDataFrame+0x168>
			A_frame->data[i] = (u8)((L_msg->RxFIFO1[L_getIndex].data[i/4] >> 4*(i%4)) & (0xFF));
 8005316:	7c7a      	ldrb	r2, [r7, #17]
 8005318:	7cbb      	ldrb	r3, [r7, #18]
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	b2db      	uxtb	r3, r3
 800531e:	4618      	mov	r0, r3
 8005320:	6979      	ldr	r1, [r7, #20]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4403      	add	r3, r0
 800532c:	3364      	adds	r3, #100	; 0x64
 800532e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005332:	7cbb      	ldrb	r3, [r7, #18]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	fa22 f103 	lsr.w	r1, r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	7cbb      	ldrb	r3, [r7, #18]
 8005344:	4413      	add	r3, r2
 8005346:	b2ca      	uxtb	r2, r1
 8005348:	701a      	strb	r2, [r3, #0]
		for(u8 i = 0; i < A_frame->dlc; i++)
 800534a:	7cbb      	ldrb	r3, [r7, #18]
 800534c:	3301      	adds	r3, #1
 800534e:	74bb      	strb	r3, [r7, #18]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	791b      	ldrb	r3, [r3, #4]
 8005354:	7cba      	ldrb	r2, [r7, #18]
 8005356:	429a      	cmp	r2, r3
 8005358:	d3dd      	bcc.n	8005316 <CAN_voidReceiveDataFrame+0x12e>
		A_canx->RXF1A |= L_getIndex;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005360:	7c7b      	ldrb	r3, [r7, #17]
 8005362:	431a      	orrs	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40006400 	.word	0x40006400
 800537c:	4000a400 	.word	0x4000a400
 8005380:	40006800 	.word	0x40006800
 8005384:	4000a800 	.word	0x4000a800
 8005388:	40006c00 	.word	0x40006c00
 800538c:	4000ac00 	.word	0x4000ac00

08005390 <CAN_u8IsRxBufferFull>:
		L_result = (u8)(A_canx->RXF1S & (0b11 << 0));
	return L_result;
}

u8 CAN_u8IsRxBufferFull(CAN_RegMap_t* A_canx, u8 A_fifox)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
	u8 L_result;
	if(A_fifox == CAN_RX_FIFO0)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <CAN_u8IsRxBufferFull+0x24>
		L_result = (A_canx->RXF0S & (1 << 24)) >> 24;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a8:	0e1b      	lsrs	r3, r3, #24
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
 80053b2:	e007      	b.n	80053c4 <CAN_u8IsRxBufferFull+0x34>
	else
		L_result = (A_canx->RXF1S & (1 << 24)) >> 24;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ba:	0e1b      	lsrs	r3, r3, #24
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
	return L_result;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <CAN_voidSendDataFrame>:

void CAN_voidSendDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame)
{
 80053d4:	b490      	push	{r4, r7}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a48      	ldr	r2, [pc, #288]	; (8005504 <CAN_voidSendDataFrame+0x130>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d102      	bne.n	80053ec <CAN_voidSendDataFrame+0x18>
		L_msg = CAN1_MESSAGES;
 80053e6:	4b48      	ldr	r3, [pc, #288]	; (8005508 <CAN_voidSendDataFrame+0x134>)
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e00c      	b.n	8005406 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a47      	ldr	r2, [pc, #284]	; (800550c <CAN_voidSendDataFrame+0x138>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d102      	bne.n	80053fa <CAN_voidSendDataFrame+0x26>
		L_msg = CAN2_MESSAGES;
 80053f4:	4b46      	ldr	r3, [pc, #280]	; (8005510 <CAN_voidSendDataFrame+0x13c>)
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e005      	b.n	8005406 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN3)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a45      	ldr	r2, [pc, #276]	; (8005514 <CAN_voidSendDataFrame+0x140>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <CAN_voidSendDataFrame+0x32>
			L_msg = CAN3_MESSAGES;
 8005402:	4b45      	ldr	r3, [pc, #276]	; (8005518 <CAN_voidSendDataFrame+0x144>)
 8005404:	617b      	str	r3, [r7, #20]

	// Define the put index
	u8 L_putIndex = (u8)((A_canx->TXFQS >> 16) & 0b11);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800540c:	0c1b      	lsrs	r3, r3, #16
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	73bb      	strb	r3, [r7, #14]

	// write the message
	u32 L_tmp = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	613b      	str	r3, [r7, #16]
	if(A_frame->ide == CAN_FRAME_EXTENDED_ID){
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	799b      	ldrb	r3, [r3, #6]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d107      	bne.n	8005432 <CAN_voidSendDataFrame+0x5e>
		L_tmp = A_frame->id;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]
		L_tmp |= (1 << 30); // XTD bit
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e003      	b.n	800543a <CAN_voidSendDataFrame+0x66>
	}
	else{
		L_tmp = A_frame->id << 18;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	049b      	lsls	r3, r3, #18
 8005438:	613b      	str	r3, [r7, #16]
	}
	if(A_frame->rtr == CAN_FRAME_REMOTE)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	795b      	ldrb	r3, [r3, #5]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d103      	bne.n	800544a <CAN_voidSendDataFrame+0x76>
		L_tmp |= (1 << 29);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005448:	613b      	str	r3, [r7, #16]
	L_msg->TxBuffer[L_putIndex].ID = L_tmp;
 800544a:	7bba      	ldrb	r2, [r7, #14]
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	4613      	mov	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4413      	add	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	440b      	add	r3, r1
 8005458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 23); // Don't store event
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 21); // Classic Can
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 20); // No bit rate switching
*/

	L_msg->TxBuffer[L_putIndex].DLC = (A_frame->dlc << 16); // write DLC
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	791b      	ldrb	r3, [r3, #4]
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	7bba      	ldrb	r2, [r7, #14]
 8005468:	4618      	mov	r0, r3
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	440b      	add	r3, r1
 8005476:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800547a:	6018      	str	r0, [r3, #0]

	for(u8 i = 0; i < A_frame->dlc; i++)
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e02a      	b.n	80054d8 <CAN_voidSendDataFrame+0x104>
		L_msg->TxBuffer[L_putIndex].data[i/4] |= (u32)(A_frame->data[i] << (8 * (i%4)));
 8005482:	7bba      	ldrb	r2, [r7, #14]
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	b2d8      	uxtb	r0, r3
 800548a:	4604      	mov	r4, r0
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4423      	add	r3, r4
 8005498:	33a0      	adds	r3, #160	; 0xa0
 800549a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	6891      	ldr	r1, [r2, #8]
 80054a2:	7bfa      	ldrb	r2, [r7, #15]
 80054a4:	440a      	add	r2, r1
 80054a6:	7812      	ldrb	r2, [r2, #0]
 80054a8:	4611      	mov	r1, r2
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	f002 0203 	and.w	r2, r2, #3
 80054b0:	00d2      	lsls	r2, r2, #3
 80054b2:	fa01 f202 	lsl.w	r2, r1, r2
 80054b6:	4611      	mov	r1, r2
 80054b8:	7bba      	ldrb	r2, [r7, #14]
 80054ba:	4604      	mov	r4, r0
 80054bc:	ea43 0001 	orr.w	r0, r3, r1
 80054c0:	6979      	ldr	r1, [r7, #20]
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	4423      	add	r3, r4
 80054cc:	33a0      	adds	r3, #160	; 0xa0
 80054ce:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	for(u8 i = 0; i < A_frame->dlc; i++)
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	3301      	adds	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	791b      	ldrb	r3, [r3, #4]
 80054dc:	7bfa      	ldrb	r2, [r7, #15]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d3cf      	bcc.n	8005482 <CAN_voidSendDataFrame+0xae>

	// Request Transmission
	A_canx->TXBAR |= (1 << L_putIndex);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80054e8:	7bba      	ldrb	r2, [r7, #14]
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f202 	lsl.w	r2, r1, r2
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	// Wait for transmission to be done
	//while(! ((A_canx->TXBTO >> L_putIndex) & 1) );
}
 80054f8:	bf00      	nop
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc90      	pop	{r4, r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40006400 	.word	0x40006400
 8005508:	4000a400 	.word	0x4000a400
 800550c:	40006800 	.word	0x40006800
 8005510:	4000a800 	.word	0x4000a800
 8005514:	40006c00 	.word	0x40006c00
 8005518:	4000ac00 	.word	0x4000ac00

0800551c <GPIO_voidSetPinMode>:
/************************************************************/
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D);
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc);

static void GPIO_voidSetPinMode(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Mode)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	71fb      	strb	r3, [r7, #7]
 8005526:	460b      	mov	r3, r1
 8005528:	71bb      	strb	r3, [r7, #6]
 800552a:	4613      	mov	r3, r2
 800552c:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	2b06      	cmp	r3, #6
 8005536:	d827      	bhi.n	8005588 <GPIO_voidSetPinMode+0x6c>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <GPIO_voidSetPinMode+0x24>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	0800555d 	.word	0x0800555d
 8005544:	08005565 	.word	0x08005565
 8005548:	0800556b 	.word	0x0800556b
 800554c:	08005571 	.word	0x08005571
 8005550:	08005577 	.word	0x08005577
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005583 	.word	0x08005583
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 800555c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005560:	60fb      	str	r3, [r7, #12]
		break;
 8005562:	e012      	b.n	800558a <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8005564:	4b16      	ldr	r3, [pc, #88]	; (80055c0 <GPIO_voidSetPinMode+0xa4>)
 8005566:	60fb      	str	r3, [r7, #12]
		break;
 8005568:	e00f      	b.n	800558a <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <GPIO_voidSetPinMode+0xa8>)
 800556c:	60fb      	str	r3, [r7, #12]
		break;
 800556e:	e00c      	b.n	800558a <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005570:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <GPIO_voidSetPinMode+0xac>)
 8005572:	60fb      	str	r3, [r7, #12]
		break;
 8005574:	e009      	b.n	800558a <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8005576:	4b15      	ldr	r3, [pc, #84]	; (80055cc <GPIO_voidSetPinMode+0xb0>)
 8005578:	60fb      	str	r3, [r7, #12]
		break;
 800557a:	e006      	b.n	800558a <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <GPIO_voidSetPinMode+0xb4>)
 800557e:	60fb      	str	r3, [r7, #12]
		break;
 8005580:	e003      	b.n	800558a <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <GPIO_voidSetPinMode+0xb8>)
 8005584:	60fb      	str	r3, [r7, #12]
		break;
 8005586:	e000      	b.n	800558a <GPIO_voidSetPinMode+0x6e>
	default:
		/* Port ID out of range */
		break;
 8005588:	bf00      	nop
	}
	GPIOx->MODER &= ~(0b11<<(2*A_u8PinNo));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	79ba      	ldrb	r2, [r7, #6]
 8005590:	0052      	lsls	r2, r2, #1
 8005592:	2103      	movs	r1, #3
 8005594:	fa01 f202 	lsl.w	r2, r1, r2
 8005598:	43d2      	mvns	r2, r2
 800559a:	401a      	ands	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (A_u8Mode<<(2*A_u8PinNo));
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	7979      	ldrb	r1, [r7, #5]
 80055a6:	79ba      	ldrb	r2, [r7, #6]
 80055a8:	0052      	lsls	r2, r2, #1
 80055aa:	fa01 f202 	lsl.w	r2, r1, r2
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	48000400 	.word	0x48000400
 80055c4:	48000800 	.word	0x48000800
 80055c8:	48000c00 	.word	0x48000c00
 80055cc:	48001000 	.word	0x48001000
 80055d0:	48001400 	.word	0x48001400
 80055d4:	48001800 	.word	0x48001800

080055d8 <GPIO_voidSetPinOutput_typ_spd>:
static void GPIO_voidSetPinOutput_typ_spd(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Output_t, u8 A_u8OutputSpeed)
{
 80055d8:	b490      	push	{r4, r7}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	4611      	mov	r1, r2
 80055e4:	461a      	mov	r2, r3
 80055e6:	4623      	mov	r3, r4
 80055e8:	71fb      	strb	r3, [r7, #7]
 80055ea:	4603      	mov	r3, r0
 80055ec:	71bb      	strb	r3, [r7, #6]
 80055ee:	460b      	mov	r3, r1
 80055f0:	717b      	strb	r3, [r7, #5]
 80055f2:	4613      	mov	r3, r2
 80055f4:	713b      	strb	r3, [r7, #4]
	GPIO_RegMap_t *GPIOx = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d827      	bhi.n	8005650 <GPIO_voidSetPinOutput_typ_spd+0x78>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <GPIO_voidSetPinOutput_typ_spd+0x30>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	08005625 	.word	0x08005625
 800560c:	0800562d 	.word	0x0800562d
 8005610:	08005633 	.word	0x08005633
 8005614:	08005639 	.word	0x08005639
 8005618:	0800563f 	.word	0x0800563f
 800561c:	08005645 	.word	0x08005645
 8005620:	0800564b 	.word	0x0800564b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8005624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005628:	60fb      	str	r3, [r7, #12]
		break;
 800562a:	e012      	b.n	8005652 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800562c:	4b23      	ldr	r3, [pc, #140]	; (80056bc <GPIO_voidSetPinOutput_typ_spd+0xe4>)
 800562e:	60fb      	str	r3, [r7, #12]
		break;
 8005630:	e00f      	b.n	8005652 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8005632:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <GPIO_voidSetPinOutput_typ_spd+0xe8>)
 8005634:	60fb      	str	r3, [r7, #12]
		break;
 8005636:	e00c      	b.n	8005652 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <GPIO_voidSetPinOutput_typ_spd+0xec>)
 800563a:	60fb      	str	r3, [r7, #12]
		break;
 800563c:	e009      	b.n	8005652 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800563e:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <GPIO_voidSetPinOutput_typ_spd+0xf0>)
 8005640:	60fb      	str	r3, [r7, #12]
		break;
 8005642:	e006      	b.n	8005652 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <GPIO_voidSetPinOutput_typ_spd+0xf4>)
 8005646:	60fb      	str	r3, [r7, #12]
		break;
 8005648:	e003      	b.n	8005652 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800564a:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <GPIO_voidSetPinOutput_typ_spd+0xf8>)
 800564c:	60fb      	str	r3, [r7, #12]
		break;
 800564e:	e000      	b.n	8005652 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	default:
		/* Port ID out of range */
		break;
 8005650:	bf00      	nop
	}
	if(A_u8Output_t == GPIO_OT_PUSHPULL)
 8005652:	797b      	ldrb	r3, [r7, #5]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <GPIO_voidSetPinOutput_typ_spd+0x96>
	{
		/* Set pin type */
		CLR_BIT(GPIOx->OTYPER,A_u8PinNo);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	79ba      	ldrb	r2, [r7, #6]
 800565e:	2101      	movs	r1, #1
 8005660:	fa01 f202 	lsl.w	r2, r1, r2
 8005664:	43d2      	mvns	r2, r2
 8005666:	401a      	ands	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	e00b      	b.n	8005686 <GPIO_voidSetPinOutput_typ_spd+0xae>

	}else if(A_u8Output_t == GPIO_OT_OPEN_DRAIN)
 800566e:	797b      	ldrb	r3, [r7, #5]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d108      	bne.n	8005686 <GPIO_voidSetPinOutput_typ_spd+0xae>
	{
		SET_BIT(GPIOx->OTYPER,A_u8PinNo);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	79ba      	ldrb	r2, [r7, #6]
 800567a:	2101      	movs	r1, #1
 800567c:	fa01 f202 	lsl.w	r2, r1, r2
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	605a      	str	r2, [r3, #4]
	}
	/* Set pin speed */
	GPIOx->OSPEEDR &= ~(0b11<<(2*A_u8PinNo));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	79ba      	ldrb	r2, [r7, #6]
 800568c:	0052      	lsls	r2, r2, #1
 800568e:	2103      	movs	r1, #3
 8005690:	fa01 f202 	lsl.w	r2, r1, r2
 8005694:	43d2      	mvns	r2, r2
 8005696:	401a      	ands	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (A_u8OutputSpeed<<(2*A_u8PinNo));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	7939      	ldrb	r1, [r7, #4]
 80056a2:	79ba      	ldrb	r2, [r7, #6]
 80056a4:	0052      	lsls	r2, r2, #1
 80056a6:	fa01 f202 	lsl.w	r2, r1, r2
 80056aa:	431a      	orrs	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc90      	pop	{r4, r7}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	48000400 	.word	0x48000400
 80056c0:	48000800 	.word	0x48000800
 80056c4:	48000c00 	.word	0x48000c00
 80056c8:	48001000 	.word	0x48001000
 80056cc:	48001400 	.word	0x48001400
 80056d0:	48001800 	.word	0x48001800

080056d4 <GPIO_voidSetPinPUPD>:
	{
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
	}
}
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
 80056de:	460b      	mov	r3, r1
 80056e0:	71bb      	strb	r3, [r7, #6]
 80056e2:	4613      	mov	r3, r2
 80056e4:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	d827      	bhi.n	8005740 <GPIO_voidSetPinPUPD+0x6c>
 80056f0:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <GPIO_voidSetPinPUPD+0x24>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	08005715 	.word	0x08005715
 80056fc:	0800571d 	.word	0x0800571d
 8005700:	08005723 	.word	0x08005723
 8005704:	08005729 	.word	0x08005729
 8005708:	0800572f 	.word	0x0800572f
 800570c:	08005735 	.word	0x08005735
 8005710:	0800573b 	.word	0x0800573b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8005714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005718:	60fb      	str	r3, [r7, #12]
		break;
 800571a:	e012      	b.n	8005742 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800571c:	4b16      	ldr	r3, [pc, #88]	; (8005778 <GPIO_voidSetPinPUPD+0xa4>)
 800571e:	60fb      	str	r3, [r7, #12]
		break;
 8005720:	e00f      	b.n	8005742 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8005722:	4b16      	ldr	r3, [pc, #88]	; (800577c <GPIO_voidSetPinPUPD+0xa8>)
 8005724:	60fb      	str	r3, [r7, #12]
		break;
 8005726:	e00c      	b.n	8005742 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005728:	4b15      	ldr	r3, [pc, #84]	; (8005780 <GPIO_voidSetPinPUPD+0xac>)
 800572a:	60fb      	str	r3, [r7, #12]
		break;
 800572c:	e009      	b.n	8005742 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800572e:	4b15      	ldr	r3, [pc, #84]	; (8005784 <GPIO_voidSetPinPUPD+0xb0>)
 8005730:	60fb      	str	r3, [r7, #12]
		break;
 8005732:	e006      	b.n	8005742 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005734:	4b14      	ldr	r3, [pc, #80]	; (8005788 <GPIO_voidSetPinPUPD+0xb4>)
 8005736:	60fb      	str	r3, [r7, #12]
		break;
 8005738:	e003      	b.n	8005742 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <GPIO_voidSetPinPUPD+0xb8>)
 800573c:	60fb      	str	r3, [r7, #12]
		break;
 800573e:	e000      	b.n	8005742 <GPIO_voidSetPinPUPD+0x6e>
	default:
		/* Port ID out of range */
		break;
 8005740:	bf00      	nop
	}
	GPIOx->PUPDR &= ~(0b11<<(2*A_u8PinNo));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	79ba      	ldrb	r2, [r7, #6]
 8005748:	0052      	lsls	r2, r2, #1
 800574a:	2103      	movs	r1, #3
 800574c:	fa01 f202 	lsl.w	r2, r1, r2
 8005750:	43d2      	mvns	r2, r2
 8005752:	401a      	ands	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (A_u8PullU_D<<(2*A_u8PinNo));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	7979      	ldrb	r1, [r7, #5]
 800575e:	79ba      	ldrb	r2, [r7, #6]
 8005760:	0052      	lsls	r2, r2, #1
 8005762:	fa01 f202 	lsl.w	r2, r1, r2
 8005766:	431a      	orrs	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	60da      	str	r2, [r3, #12]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	48000400 	.word	0x48000400
 800577c:	48000800 	.word	0x48000800
 8005780:	48000c00 	.word	0x48000c00
 8005784:	48001000 	.word	0x48001000
 8005788:	48001400 	.word	0x48001400
 800578c:	48001800 	.word	0x48001800

08005790 <GPIO_voidAltFunc>:
		break;
	}
	TOG_BIT(GPIOx->ODR,A_u8PinNo);
}
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
 800579a:	460b      	mov	r3, r1
 800579c:	71bb      	strb	r3, [r7, #6]
 800579e:	4613      	mov	r3, r2
 80057a0:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	2b06      	cmp	r3, #6
 80057aa:	d827      	bhi.n	80057fc <GPIO_voidAltFunc+0x6c>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <GPIO_voidAltFunc+0x24>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	080057d9 	.word	0x080057d9
 80057bc:	080057df 	.word	0x080057df
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057eb 	.word	0x080057eb
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f7 	.word	0x080057f7
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 80057d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057d4:	60fb      	str	r3, [r7, #12]
		break;
 80057d6:	e012      	b.n	80057fe <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 80057d8:	4b24      	ldr	r3, [pc, #144]	; (800586c <GPIO_voidAltFunc+0xdc>)
 80057da:	60fb      	str	r3, [r7, #12]
		break;
 80057dc:	e00f      	b.n	80057fe <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 80057de:	4b24      	ldr	r3, [pc, #144]	; (8005870 <GPIO_voidAltFunc+0xe0>)
 80057e0:	60fb      	str	r3, [r7, #12]
		break;
 80057e2:	e00c      	b.n	80057fe <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 80057e4:	4b23      	ldr	r3, [pc, #140]	; (8005874 <GPIO_voidAltFunc+0xe4>)
 80057e6:	60fb      	str	r3, [r7, #12]
		break;
 80057e8:	e009      	b.n	80057fe <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 80057ea:	4b23      	ldr	r3, [pc, #140]	; (8005878 <GPIO_voidAltFunc+0xe8>)
 80057ec:	60fb      	str	r3, [r7, #12]
		break;
 80057ee:	e006      	b.n	80057fe <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 80057f0:	4b22      	ldr	r3, [pc, #136]	; (800587c <GPIO_voidAltFunc+0xec>)
 80057f2:	60fb      	str	r3, [r7, #12]
		break;
 80057f4:	e003      	b.n	80057fe <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <GPIO_voidAltFunc+0xf0>)
 80057f8:	60fb      	str	r3, [r7, #12]
		break;
 80057fa:	e000      	b.n	80057fe <GPIO_voidAltFunc+0x6e>
	default:
		/* Port ID out of range */
		break;
 80057fc:	bf00      	nop
	}
	if(A_u8PinNo < 8)
 80057fe:	79bb      	ldrb	r3, [r7, #6]
 8005800:	2b07      	cmp	r3, #7
 8005802:	d815      	bhi.n	8005830 <GPIO_voidAltFunc+0xa0>
	{
		GPIOx->AFRL &= ~(0b1111<<(4*A_u8PinNo));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	79ba      	ldrb	r2, [r7, #6]
 800580a:	0092      	lsls	r2, r2, #2
 800580c:	210f      	movs	r1, #15
 800580e:	fa01 f202 	lsl.w	r2, r1, r2
 8005812:	43d2      	mvns	r2, r2
 8005814:	401a      	ands	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	621a      	str	r2, [r3, #32]
		GPIOx->AFRL |= (A_u8AltFunc<<(4*A_u8PinNo));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	7979      	ldrb	r1, [r7, #5]
 8005820:	79ba      	ldrb	r2, [r7, #6]
 8005822:	0092      	lsls	r2, r2, #2
 8005824:	fa01 f202 	lsl.w	r2, r1, r2
 8005828:	431a      	orrs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
	{
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
	}

}
 800582e:	e016      	b.n	800585e <GPIO_voidAltFunc+0xce>
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	79ba      	ldrb	r2, [r7, #6]
 8005836:	3a08      	subs	r2, #8
 8005838:	0092      	lsls	r2, r2, #2
 800583a:	210f      	movs	r1, #15
 800583c:	fa01 f202 	lsl.w	r2, r1, r2
 8005840:	43d2      	mvns	r2, r2
 8005842:	401a      	ands	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	7979      	ldrb	r1, [r7, #5]
 800584e:	79ba      	ldrb	r2, [r7, #6]
 8005850:	3a08      	subs	r2, #8
 8005852:	0092      	lsls	r2, r2, #2
 8005854:	fa01 f202 	lsl.w	r2, r1, r2
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	48000400 	.word	0x48000400
 8005870:	48000800 	.word	0x48000800
 8005874:	48000c00 	.word	0x48000c00
 8005878:	48001000 	.word	0x48001000
 800587c:	48001400 	.word	0x48001400
 8005880:	48001800 	.word	0x48001800

08005884 <GPIO_voidInitPin>:
		break;
	}
	GPIOx->ODR ^= 0xFFFF;
}
void GPIO_voidInitPin(MGPIO_Config_t *A_xPin_Port_Config)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinMode(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->Mode);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7818      	ldrb	r0, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7859      	ldrb	r1, [r3, #1]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	789b      	ldrb	r3, [r3, #2]
 8005898:	461a      	mov	r2, r3
 800589a:	f7ff fe3f 	bl	800551c <GPIO_voidSetPinMode>
	GPIO_voidSetPinOutput_typ_spd(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->OutputType,A_xPin_Port_Config->OutputSpeed);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7818      	ldrb	r0, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7859      	ldrb	r1, [r3, #1]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	78da      	ldrb	r2, [r3, #3]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	791b      	ldrb	r3, [r3, #4]
 80058ae:	f7ff fe93 	bl	80055d8 <GPIO_voidSetPinOutput_typ_spd>
	GPIO_voidSetPinPUPD(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->InputPull);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7818      	ldrb	r0, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	7859      	ldrb	r1, [r3, #1]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	795b      	ldrb	r3, [r3, #5]
 80058be:	461a      	mov	r2, r3
 80058c0:	f7ff ff08 	bl	80056d4 <GPIO_voidSetPinPUPD>
	GPIO_voidAltFunc(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->AltFunc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7818      	ldrb	r0, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	7859      	ldrb	r1, [r3, #1]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	799b      	ldrb	r3, [r3, #6]
 80058d0:	461a      	mov	r2, r3
 80058d2:	f7ff ff5d 	bl	8005790 <GPIO_voidAltFunc>
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <RCC_voidInit>:

/****************************************************************************/
/*							Function Implementation							*/
/****************************************************************************/
void RCC_voidInit(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
	/*Clear All Registers To Avoid Errors*/

	RCC->CR = 0x00000000;
 80058e4:	4b2f      	ldr	r3, [pc, #188]	; (80059a4 <RCC_voidInit+0xc4>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
	RCC->ICSCR = 0x00000000;
 80058ea:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <RCC_voidInit+0xc4>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	605a      	str	r2, [r3, #4]
	RCC->CFGR = 0x00000000;
 80058f0:	4b2c      	ldr	r3, [pc, #176]	; (80059a4 <RCC_voidInit+0xc4>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00000000;
 80058f6:	4b2b      	ldr	r3, [pc, #172]	; (80059a4 <RCC_voidInit+0xc4>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	60da      	str	r2, [r3, #12]
	RCC->BDCR = 0x00000000;
 80058fc:	4b29      	ldr	r3, [pc, #164]	; (80059a4 <RCC_voidInit+0xc4>)
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RCC->CSR = 0x00000000;
 8005904:	4b27      	ldr	r3, [pc, #156]	; (80059a4 <RCC_voidInit+0xc4>)
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RCC->CRRCR = 0x00000000;
 800590c:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <RCC_voidInit+0xc4>)
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	/*Turn HSI48 RC oscillator */
	RCC->CRRCR |=(RCC_HSI48<<0);
 8005914:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <RCC_voidInit+0xc4>)
 8005916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800591a:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <RCC_voidInit+0xc4>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	/*Turn on the different clocks*/
	RCC->CR |= (RCC_HSI_ON<<8);			//HSI Clock ON
 8005924:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <RCC_voidInit+0xc4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1e      	ldr	r2, [pc, #120]	; (80059a4 <RCC_voidInit+0xc4>)
 800592a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592e:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSIKER_ON<<9);		//HSIKER Clock ON
 8005930:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <RCC_voidInit+0xc4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <RCC_voidInit+0xc4>)
 8005936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800593a:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSE_ON<<16);		//HSE Clock ON
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <RCC_voidInit+0xc4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <RCC_voidInit+0xc4>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSEBYP_ON<<18);		//HSE BYP ON
 8005948:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <RCC_voidInit+0xc4>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <RCC_voidInit+0xc4>)
 800594e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005952:	6013      	str	r3, [r2, #0]
	//RCC->CR |= (RCC_PLL_ON<<24);		//PLL Clock ON


	/*HSI Trimming Value Adjust*/
	RCC->ICSCR |= (RCC_HSITRIM_VAL<<24);
 8005954:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <RCC_voidInit+0xc4>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <RCC_voidInit+0xc4>)
 800595a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800595e:	6053      	str	r3, [r2, #4]

	/*Select System Clock*/
	RCC->CFGR |= (RCC_SYSCLK_SEL<<0);
 8005960:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <RCC_voidInit+0xc4>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a0f      	ldr	r2, [pc, #60]	; (80059a4 <RCC_voidInit+0xc4>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6093      	str	r3, [r2, #8]
	/*Select Micro-controller Output Clock*/
	RCC->CFGR |= (RCC_MCO_SEL<<24);
 800596c:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <RCC_voidInit+0xc4>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <RCC_voidInit+0xc4>)
 8005972:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005976:	6093      	str	r3, [r2, #8]

	/*Select Micro-controller Output Prescaler*/
	RCC->CFGR |= (RCC_MCO_PRE<<28);
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <RCC_voidInit+0xc4>)
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <RCC_voidInit+0xc4>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	6093      	str	r3, [r2, #8]
	/*Select AHB Prescaler*/
	RCC->CFGR |= (RCC_AHB_PRE<<4);
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <RCC_voidInit+0xc4>)
 8005982:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <RCC_voidInit+0xc4>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	6093      	str	r3, [r2, #8]
	/*Select APB1 Prescaler*/
	RCC->CFGR |= (RCC_APB1_PRE<<8);
 8005988:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <RCC_voidInit+0xc4>)
 800598a:	4a06      	ldr	r2, [pc, #24]	; (80059a4 <RCC_voidInit+0xc4>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	6093      	str	r3, [r2, #8]
	/*Select APB2 Prescaler*/
	RCC->CFGR |= (RCC_APB2_PRE<<11);
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <RCC_voidInit+0xc4>)
 8005992:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <RCC_voidInit+0xc4>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	6093      	str	r3, [r2, #8]



}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000

080059a8 <RCC_voidPeripheralClockEnable>:
void RCC_voidPeripheralClockEnable(u8 A_u8BusName, RCC_Peripheral_t A_tPeripheral)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	460a      	mov	r2, r1
 80059b2:	71fb      	strb	r3, [r7, #7]
 80059b4:	4613      	mov	r3, r2
 80059b6:	71bb      	strb	r3, [r7, #6]
	switch(A_u8BusName)
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d850      	bhi.n	8005a60 <RCC_voidPeripheralClockEnable+0xb8>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <RCC_voidPeripheralClockEnable+0x1c>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059dd 	.word	0x080059dd
 80059c8:	080059f3 	.word	0x080059f3
 80059cc:	08005a09 	.word	0x08005a09
 80059d0:	08005a1f 	.word	0x08005a1f
 80059d4:	08005a35 	.word	0x08005a35
 80059d8:	08005a4b 	.word	0x08005a4b
	{
		case RCC_AHB1:
			SET_BIT(RCC->AHB1ENR, A_tPeripheral);
 80059dc:	4b23      	ldr	r3, [pc, #140]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	79ba      	ldrb	r2, [r7, #6]
 80059e2:	2101      	movs	r1, #1
 80059e4:	fa01 f202 	lsl.w	r2, r1, r2
 80059e8:	4611      	mov	r1, r2
 80059ea:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 80059f0:	e036      	b.n	8005a60 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB2:
			SET_BIT(RCC->AHB2ENR, A_tPeripheral);
 80059f2:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	79ba      	ldrb	r2, [r7, #6]
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f202 	lsl.w	r2, r1, r2
 80059fe:	4611      	mov	r1, r2
 8005a00:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a02:	430b      	orrs	r3, r1
 8005a04:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8005a06:	e02b      	b.n	8005a60 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB3:
			SET_BIT(RCC->AHB3ENR, A_tPeripheral);
 8005a08:	4b18      	ldr	r3, [pc, #96]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0c:	79ba      	ldrb	r2, [r7, #6]
 8005a0e:	2101      	movs	r1, #1
 8005a10:	fa01 f202 	lsl.w	r2, r1, r2
 8005a14:	4611      	mov	r1, r2
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8005a1c:	e020      	b.n	8005a60 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_1:
			SET_BIT(RCC->APB1ENR1, A_tPeripheral);
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	79ba      	ldrb	r2, [r7, #6]
 8005a24:	2101      	movs	r1, #1
 8005a26:	fa01 f202 	lsl.w	r2, r1, r2
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4a0f      	ldr	r2, [pc, #60]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8005a32:	e015      	b.n	8005a60 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_2:
			SET_BIT(RCC->APB1ENR2, A_tPeripheral);
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a38:	79ba      	ldrb	r2, [r7, #6]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a40:	4611      	mov	r1, r2
 8005a42:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a44:	430b      	orrs	r3, r1
 8005a46:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 8005a48:	e00a      	b.n	8005a60 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB2:
			SET_BIT(RCC->APB2ENR, A_tPeripheral);
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4e:	79ba      	ldrb	r2, [r7, #6]
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f202 	lsl.w	r2, r1, r2
 8005a56:	4611      	mov	r1, r2
 8005a58:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <RCC_voidPeripheralClockEnable+0xc4>)
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 8005a5e:	bf00      	nop
	}
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40021000 	.word	0x40021000

08005a70 <RCC_voidPeripheralClockCfg>:
			SET_BIT(RCC->APB2RSTR, A_tPeripheral);
			break;
	}
}
void RCC_voidPeripheralClockCfg(u8 A_u8RegName, RCC_Peripheral_Cfg_t A_tCfgPeripheral)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	460a      	mov	r2, r1
 8005a7a:	71fb      	strb	r3, [r7, #7]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71bb      	strb	r3, [r7, #6]
	switch(A_u8RegName)
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d003      	beq.n	8005a8e <RCC_voidPeripheralClockCfg+0x1e>
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	f000 80cd 	beq.w	8005c26 <RCC_voidPeripheralClockCfg+0x1b6>
					RCC->CCIPR2 |= (RCC_QSPI_CLK<<QSPI_Cfg);
					break;
			}
			break;
	}
}
 8005a8c:	e0e3      	b.n	8005c56 <RCC_voidPeripheralClockCfg+0x1e6>
			switch(A_tCfgPeripheral)
 8005a8e:	79bb      	ldrb	r3, [r7, #6]
 8005a90:	2b1e      	cmp	r3, #30
 8005a92:	f200 80df 	bhi.w	8005c54 <RCC_voidPeripheralClockCfg+0x1e4>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <RCC_voidPeripheralClockCfg+0x2c>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005b19 	.word	0x08005b19
 8005aa0:	08005c55 	.word	0x08005c55
 8005aa4:	08005b2b 	.word	0x08005b2b
 8005aa8:	08005c55 	.word	0x08005c55
 8005aac:	08005b3d 	.word	0x08005b3d
 8005ab0:	08005c55 	.word	0x08005c55
 8005ab4:	08005b4f 	.word	0x08005b4f
 8005ab8:	08005c55 	.word	0x08005c55
 8005abc:	08005b61 	.word	0x08005b61
 8005ac0:	08005c55 	.word	0x08005c55
 8005ac4:	08005b73 	.word	0x08005b73
 8005ac8:	08005c55 	.word	0x08005c55
 8005acc:	08005b85 	.word	0x08005b85
 8005ad0:	08005c55 	.word	0x08005c55
 8005ad4:	08005b97 	.word	0x08005b97
 8005ad8:	08005c55 	.word	0x08005c55
 8005adc:	08005ba9 	.word	0x08005ba9
 8005ae0:	08005c55 	.word	0x08005c55
 8005ae4:	08005bbb 	.word	0x08005bbb
 8005ae8:	08005c55 	.word	0x08005c55
 8005aec:	08005bc9 	.word	0x08005bc9
 8005af0:	08005c55 	.word	0x08005c55
 8005af4:	08005bd7 	.word	0x08005bd7
 8005af8:	08005c55 	.word	0x08005c55
 8005afc:	08005be5 	.word	0x08005be5
 8005b00:	08005c55 	.word	0x08005c55
 8005b04:	08005bf3 	.word	0x08005bf3
 8005b08:	08005c55 	.word	0x08005c55
 8005b0c:	08005c01 	.word	0x08005c01
 8005b10:	08005c55 	.word	0x08005c55
 8005b14:	08005c13 	.word	0x08005c13
					RCC->CCIPR |= (RCC_USART1_CLK<<USART1_Cfg);
 8005b18:	4b52      	ldr	r3, [pc, #328]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1e:	4a51      	ldr	r2, [pc, #324]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b28:	e07c      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART2_CLK<<USART2_Cfg);
 8005b2a:	4b4e      	ldr	r3, [pc, #312]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	4a4c      	ldr	r2, [pc, #304]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b3a:	e073      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART3_CLK<<USART3_Cfg);
 8005b3c:	4b49      	ldr	r3, [pc, #292]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	4a48      	ldr	r2, [pc, #288]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b44:	f043 0310 	orr.w	r3, r3, #16
 8005b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b4c:	e06a      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART4_CLK<<USART4_Cfg);
 8005b4e:	4b45      	ldr	r3, [pc, #276]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	4a43      	ldr	r2, [pc, #268]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b5e:	e061      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART5_CLK<<USART5_Cfg);
 8005b60:	4b40      	ldr	r3, [pc, #256]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	4a3f      	ldr	r2, [pc, #252]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b70:	e058      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_LPUSART_CLK<<LPUART1_Cfg);
 8005b72:	4b3c      	ldr	r3, [pc, #240]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	4a3a      	ldr	r2, [pc, #232]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b82:	e04f      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C1_CLK<<I2C1_Cfg);
 8005b84:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8a:	4a36      	ldr	r2, [pc, #216]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b94:	e046      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C2_CLK<<I2C2_Cfg);
 8005b96:	4b33      	ldr	r3, [pc, #204]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	4a31      	ldr	r2, [pc, #196]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ba2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005ba6:	e03d      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C3_CLK<<I2C3_Cfg);
 8005ba8:	4b2e      	ldr	r3, [pc, #184]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bae:	4a2d      	ldr	r2, [pc, #180]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005bb8:	e034      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_LPTIM1_CLK<<LPTIM1_Cfg);
 8005bba:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bbc:	4a29      	ldr	r2, [pc, #164]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005bc6:	e02d      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_SAI1_CLK<<SAI1_Cfg);
 8005bc8:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bca:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005bd4:	e026      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2S23_CLK<<I2S23_Cfg);
 8005bd6:	4b23      	ldr	r3, [pc, #140]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bd8:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005be2:	e01f      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_FDCAN_CLK<<FDCAN_Cfg);
 8005be4:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005be6:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005bf0:	e018      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_CLK48_CLK<<CLK48_Cfg);
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005bfe:	e011      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_ADC12_CLK<<ADC12_Cfg);
 8005c00:	4b18      	ldr	r3, [pc, #96]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005c10:	e008      	b.n	8005c24 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_ADC345_CLK<<ADC345_Cfg);
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005c22:	bf00      	nop
			break;
 8005c24:	e016      	b.n	8005c54 <RCC_voidPeripheralClockCfg+0x1e4>
			switch(A_tCfgPeripheral)
 8005c26:	79bb      	ldrb	r3, [r7, #6]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <RCC_voidPeripheralClockCfg+0x1c2>
 8005c2c:	2b14      	cmp	r3, #20
 8005c2e:	d009      	beq.n	8005c44 <RCC_voidPeripheralClockCfg+0x1d4>
			break;
 8005c30:	e011      	b.n	8005c56 <RCC_voidPeripheralClockCfg+0x1e6>
					RCC->CCIPR2 |= (RCC_I2C4_CLK<<I2C4_Cfg);
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c38:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
					break;
 8005c42:	e006      	b.n	8005c52 <RCC_voidPeripheralClockCfg+0x1e2>
					RCC->CCIPR2 |= (RCC_QSPI_CLK<<QSPI_Cfg);
 8005c44:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c46:	4a07      	ldr	r2, [pc, #28]	; (8005c64 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c4c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
					break;
 8005c50:	bf00      	nop
			break;
 8005c52:	e000      	b.n	8005c56 <RCC_voidPeripheralClockCfg+0x1e6>
			break;
 8005c54:	bf00      	nop
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000

08005c68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c78:	f002 f912 	bl	8007ea0 <USBD_static_malloc>
 8005c7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e066      	b.n	8005d5e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	7c1b      	ldrb	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d119      	bne.n	8005cd4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	2181      	movs	r1, #129	; 0x81
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 ffa0 	bl	8007bee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb8:	2202      	movs	r2, #2
 8005cba:	2101      	movs	r1, #1
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 ff96 	bl	8007bee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005cd2:	e016      	b.n	8005d02 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cd4:	2340      	movs	r3, #64	; 0x40
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	2181      	movs	r1, #129	; 0x81
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 ff87 	bl	8007bee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ce6:	2340      	movs	r3, #64	; 0x40
 8005ce8:	2202      	movs	r2, #2
 8005cea:	2101      	movs	r1, #1
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 ff7e 	bl	8007bee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d02:	2308      	movs	r3, #8
 8005d04:	2203      	movs	r2, #3
 8005d06:	2182      	movs	r1, #130	; 0x82
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 ff70 	bl	8007bee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7c1b      	ldrb	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d42:	2101      	movs	r1, #1
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f002 f841 	bl	8007dcc <USBD_LL_PrepareReceive>
 8005d4a:	e007      	b.n	8005d5c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	2101      	movs	r1, #1
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f002 f838 	bl	8007dcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d72:	2181      	movs	r1, #129	; 0x81
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 ff60 	bl	8007c3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d80:	2101      	movs	r1, #1
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 ff59 	bl	8007c3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d90:	2182      	movs	r1, #130	; 0x82
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 ff51 	bl	8007c3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00e      	beq.n	8005dd0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f002 f87a 	bl	8007ebc <USBD_static_free>
    pdev->pClassData = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e0af      	b.n	8005f64 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d03f      	beq.n	8005e90 <USBD_CDC_Setup+0xb4>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	f040 809f 	bne.w	8005f54 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	88db      	ldrh	r3, [r3, #6]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d02e      	beq.n	8005e7c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	b25b      	sxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da16      	bge.n	8005e56 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005e34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	88d2      	ldrh	r2, [r2, #6]
 8005e3a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	88db      	ldrh	r3, [r3, #6]
 8005e40:	2b07      	cmp	r3, #7
 8005e42:	bf28      	it	cs
 8005e44:	2307      	movcs	r3, #7
 8005e46:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	89fa      	ldrh	r2, [r7, #14]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 facf 	bl	80073f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e54:	e085      	b.n	8005f62 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	785a      	ldrb	r2, [r3, #1]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	88db      	ldrh	r3, [r3, #6]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e6c:	6939      	ldr	r1, [r7, #16]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 fae8 	bl	800744a <USBD_CtlPrepareRx>
      break;
 8005e7a:	e072      	b.n	8005f62 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	7850      	ldrb	r0, [r2, #1]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	4798      	blx	r3
      break;
 8005e8e:	e068      	b.n	8005f62 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b0b      	cmp	r3, #11
 8005e96:	d852      	bhi.n	8005f3e <USBD_CDC_Setup+0x162>
 8005e98:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <USBD_CDC_Setup+0xc4>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ed1 	.word	0x08005ed1
 8005ea4:	08005f4d 	.word	0x08005f4d
 8005ea8:	08005f3f 	.word	0x08005f3f
 8005eac:	08005f3f 	.word	0x08005f3f
 8005eb0:	08005f3f 	.word	0x08005f3f
 8005eb4:	08005f3f 	.word	0x08005f3f
 8005eb8:	08005f3f 	.word	0x08005f3f
 8005ebc:	08005f3f 	.word	0x08005f3f
 8005ec0:	08005f3f 	.word	0x08005f3f
 8005ec4:	08005f3f 	.word	0x08005f3f
 8005ec8:	08005efb 	.word	0x08005efb
 8005ecc:	08005f25 	.word	0x08005f25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d107      	bne.n	8005eec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005edc:	f107 030a 	add.w	r3, r7, #10
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 fa84 	bl	80073f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005eea:	e032      	b.n	8005f52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 fa0e 	bl	8007310 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef8:	e02b      	b.n	8005f52 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d107      	bne.n	8005f16 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f06:	f107 030d 	add.w	r3, r7, #13
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 fa6f 	bl	80073f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f14:	e01d      	b.n	8005f52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 f9f9 	bl	8007310 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	75fb      	strb	r3, [r7, #23]
          break;
 8005f22:	e016      	b.n	8005f52 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d00f      	beq.n	8005f50 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 f9ec 	bl	8007310 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f3c:	e008      	b.n	8005f50 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f001 f9e5 	bl	8007310 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f46:	2303      	movs	r3, #3
 8005f48:	75fb      	strb	r3, [r7, #23]
          break;
 8005f4a:	e002      	b.n	8005f52 <USBD_CDC_Setup+0x176>
          break;
 8005f4c:	bf00      	nop
 8005f4e:	e008      	b.n	8005f62 <USBD_CDC_Setup+0x186>
          break;
 8005f50:	bf00      	nop
      }
      break;
 8005f52:	e006      	b.n	8005f62 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 f9da 	bl	8007310 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f60:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e04f      	b.n	800602e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3318      	adds	r3, #24
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d029      	beq.n	8006000 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	3318      	adds	r3, #24
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	78f9      	ldrb	r1, [r7, #3]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4403      	add	r3, r0
 8005fcc:	3320      	adds	r3, #32
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d110      	bne.n	8006000 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3318      	adds	r3, #24
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ff2:	78f9      	ldrb	r1, [r7, #3]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fec6 	bl	8007d8a <USBD_LL_Transmit>
 8005ffe:	e015      	b.n	800602c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006048:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	e015      	b.n	8006084 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fed6 	bl	8007e0e <USBD_LL_GetRxDataSize>
 8006062:	4602      	mov	r2, r0
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800607e:	4611      	mov	r1, r2
 8006080:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800609a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e01b      	b.n	80060de <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <USBD_CDC_EP0_RxReady+0x50>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060b6:	2bff      	cmp	r3, #255	; 0xff
 80060b8:	d010      	beq.n	80060dc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80060c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060d0:	b292      	uxth	r2, r2
 80060d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	22ff      	movs	r2, #255	; 0xff
 80060d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2243      	movs	r2, #67	; 0x43
 80060f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060f6:	4b03      	ldr	r3, [pc, #12]	; (8006104 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	200000a4 	.word	0x200000a4

08006108 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2243      	movs	r2, #67	; 0x43
 8006114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006116:	4b03      	ldr	r3, [pc, #12]	; (8006124 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	20000060 	.word	0x20000060

08006128 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2243      	movs	r2, #67	; 0x43
 8006134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006136:	4b03      	ldr	r3, [pc, #12]	; (8006144 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	200000e8 	.word	0x200000e8

08006148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	220a      	movs	r2, #10
 8006154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006156:	4b03      	ldr	r3, [pc, #12]	; (8006164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	2000001c 	.word	0x2000001c

08006168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006178:	2303      	movs	r3, #3
 800617a:	e004      	b.n	8006186 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061a4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e008      	b.n	80061c2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e004      	b.n	80061f4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800620e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800621e:	2303      	movs	r3, #3
 8006220:	e01a      	b.n	8006258 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006228:	2b00      	cmp	r3, #0
 800622a:	d114      	bne.n	8006256 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2201      	movs	r2, #1
 8006230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800624a:	2181      	movs	r1, #129	; 0x81
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fd9c 	bl	8007d8a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	e016      	b.n	80062ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7c1b      	ldrb	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800628c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006290:	2101      	movs	r1, #1
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fd9a 	bl	8007dcc <USBD_LL_PrepareReceive>
 8006298:	e007      	b.n	80062aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062a0:	2340      	movs	r3, #64	; 0x40
 80062a2:	2101      	movs	r1, #1
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 fd91 	bl	8007dcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e01f      	b.n	800630c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	79fa      	ldrb	r2, [r7, #7]
 80062fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f001 fbf9 	bl	8007af8 <USBD_LL_Init>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]

  return ret;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006328:	2303      	movs	r3, #3
 800632a:	e016      	b.n	800635a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f107 020e 	add.w	r2, r7, #14
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 fc24 	bl	8007bb8 <USBD_LL_Start>
 8006370:	4603      	mov	r3, r0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800639c:	2303      	movs	r3, #3
 800639e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	4611      	mov	r1, r2
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	4611      	mov	r1, r2
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
  }

  return USBD_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 ff46 	bl	800729c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	2b02      	cmp	r3, #2
 8006432:	d01a      	beq.n	800646a <USBD_LL_SetupStage+0x72>
 8006434:	2b02      	cmp	r3, #2
 8006436:	d822      	bhi.n	800647e <USBD_LL_SetupStage+0x86>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <USBD_LL_SetupStage+0x4a>
 800643c:	2b01      	cmp	r3, #1
 800643e:	d00a      	beq.n	8006456 <USBD_LL_SetupStage+0x5e>
 8006440:	e01d      	b.n	800647e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f9ee 	bl	800682c <USBD_StdDevReq>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	e020      	b.n	8006498 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa52 	bl	8006908 <USBD_StdItfReq>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
      break;
 8006468:	e016      	b.n	8006498 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa91 	bl	800699a <USBD_StdEPReq>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
      break;
 800647c:	e00c      	b.n	8006498 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006484:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006488:	b2db      	uxtb	r3, r3
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 fbf3 	bl	8007c78 <USBD_LL_StallEP>
 8006492:	4603      	mov	r3, r0
 8006494:	73fb      	strb	r3, [r7, #15]
      break;
 8006496:	bf00      	nop
  }

  return ret;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	460b      	mov	r3, r1
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064b0:	7afb      	ldrb	r3, [r7, #11]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d138      	bne.n	8006528 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d14a      	bne.n	800655e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d913      	bls.n	80064fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	1ad2      	subs	r2, r2, r3
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	4293      	cmp	r3, r2
 80064ec:	bf28      	it	cs
 80064ee:	4613      	movcs	r3, r2
 80064f0:	461a      	mov	r2, r3
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 ffc5 	bl	8007484 <USBD_CtlContinueRx>
 80064fa:	e030      	b.n	800655e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b03      	cmp	r3, #3
 8006506:	d10b      	bne.n	8006520 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 ffc0 	bl	80074a6 <USBD_CtlSendStatus>
 8006526:	e01a      	b.n	800655e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b03      	cmp	r3, #3
 8006532:	d114      	bne.n	800655e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	7afa      	ldrb	r2, [r7, #11]
 800654a:	4611      	mov	r1, r2
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	4798      	blx	r3
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	e000      	b.n	8006560 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	460b      	mov	r3, r1
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d16b      	bne.n	8006654 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3314      	adds	r3, #20
 8006580:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006588:	2b02      	cmp	r3, #2
 800658a:	d156      	bne.n	800663a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d914      	bls.n	80065c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	1ad2      	subs	r2, r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 ff3a 	bl	8007428 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065b4:	2300      	movs	r3, #0
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f001 fc06 	bl	8007dcc <USBD_LL_PrepareReceive>
 80065c0:	e03b      	b.n	800663a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d11c      	bne.n	8006608 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d316      	bcc.n	8006608 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d20f      	bcs.n	8006608 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 ff1b 	bl	8007428 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065fa:	2300      	movs	r3, #0
 80065fc:	2200      	movs	r2, #0
 80065fe:	2100      	movs	r1, #0
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f001 fbe3 	bl	8007dcc <USBD_LL_PrepareReceive>
 8006606:	e018      	b.n	800663a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b03      	cmp	r3, #3
 8006612:	d10b      	bne.n	800662c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800662c:	2180      	movs	r1, #128	; 0x80
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f001 fb22 	bl	8007c78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 ff49 	bl	80074cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d122      	bne.n	800668a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff fe98 	bl	800637a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006652:	e01a      	b.n	800668a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b03      	cmp	r3, #3
 800665e:	d114      	bne.n	800668a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	7afa      	ldrb	r2, [r7, #11]
 8006676:	4611      	mov	r1, r2
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	4798      	blx	r3
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	e000      	b.n	800668c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e02f      	b.n	8006728 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6852      	ldr	r2, [r2, #4]
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	4611      	mov	r1, r2
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066f2:	2340      	movs	r3, #64	; 0x40
 80066f4:	2200      	movs	r2, #0
 80066f6:	2100      	movs	r1, #0
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fa78 	bl	8007bee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2240      	movs	r2, #64	; 0x40
 800670a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800670e:	2340      	movs	r3, #64	; 0x40
 8006710:	2200      	movs	r2, #0
 8006712:	2180      	movs	r1, #128	; 0x80
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 fa6a 	bl	8007bee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2240      	movs	r2, #64	; 0x40
 8006724:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675e:	b2da      	uxtb	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2204      	movs	r2, #4
 800676a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b04      	cmp	r3, #4
 800678e:	d106      	bne.n	800679e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006796:	b2da      	uxtb	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80067be:	2303      	movs	r3, #3
 80067c0:	e012      	b.n	80067e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d10b      	bne.n	80067e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	3301      	adds	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800680e:	8a3b      	ldrh	r3, [r7, #16]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	b21a      	sxth	r2, r3
 8006814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006818:	4313      	orrs	r3, r2
 800681a:	b21b      	sxth	r3, r3
 800681c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800681e:	89fb      	ldrh	r3, [r7, #14]
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d005      	beq.n	8006852 <USBD_StdDevReq+0x26>
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d853      	bhi.n	80068f2 <USBD_StdDevReq+0xc6>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <USBD_StdDevReq+0x3a>
 800684e:	2b20      	cmp	r3, #32
 8006850:	d14f      	bne.n	80068f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
      break;
 8006864:	e04a      	b.n	80068fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	2b09      	cmp	r3, #9
 800686c:	d83b      	bhi.n	80068e6 <USBD_StdDevReq+0xba>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <USBD_StdDevReq+0x48>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	080068c9 	.word	0x080068c9
 8006878:	080068dd 	.word	0x080068dd
 800687c:	080068e7 	.word	0x080068e7
 8006880:	080068d3 	.word	0x080068d3
 8006884:	080068e7 	.word	0x080068e7
 8006888:	080068a7 	.word	0x080068a7
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068e7 	.word	0x080068e7
 8006894:	080068bf 	.word	0x080068bf
 8006898:	080068b1 	.word	0x080068b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f9de 	bl	8006c60 <USBD_GetDescriptor>
          break;
 80068a4:	e024      	b.n	80068f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb6d 	bl	8006f88 <USBD_SetAddress>
          break;
 80068ae:	e01f      	b.n	80068f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fbac 	bl	8007010 <USBD_SetConfig>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
          break;
 80068bc:	e018      	b.n	80068f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc4b 	bl	800715c <USBD_GetConfig>
          break;
 80068c6:	e013      	b.n	80068f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fc7c 	bl	80071c8 <USBD_GetStatus>
          break;
 80068d0:	e00e      	b.n	80068f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fcab 	bl	8007230 <USBD_SetFeature>
          break;
 80068da:	e009      	b.n	80068f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fcba 	bl	8007258 <USBD_ClrFeature>
          break;
 80068e4:	e004      	b.n	80068f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fd11 	bl	8007310 <USBD_CtlError>
          break;
 80068ee:	bf00      	nop
      }
      break;
 80068f0:	e004      	b.n	80068fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fd0b 	bl	8007310 <USBD_CtlError>
      break;
 80068fa:	bf00      	nop
  }

  return ret;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop

08006908 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d005      	beq.n	800692e <USBD_StdItfReq+0x26>
 8006922:	2b40      	cmp	r3, #64	; 0x40
 8006924:	d82f      	bhi.n	8006986 <USBD_StdItfReq+0x7e>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <USBD_StdItfReq+0x26>
 800692a:	2b20      	cmp	r3, #32
 800692c:	d12b      	bne.n	8006986 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006934:	b2db      	uxtb	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	2b02      	cmp	r3, #2
 800693a:	d81d      	bhi.n	8006978 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	889b      	ldrh	r3, [r3, #4]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	d813      	bhi.n	800696e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	88db      	ldrh	r3, [r3, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d110      	bne.n	8006982 <USBD_StdItfReq+0x7a>
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10d      	bne.n	8006982 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fd9d 	bl	80074a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800696c:	e009      	b.n	8006982 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fccd 	bl	8007310 <USBD_CtlError>
          break;
 8006976:	e004      	b.n	8006982 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fcc8 	bl	8007310 <USBD_CtlError>
          break;
 8006980:	e000      	b.n	8006984 <USBD_StdItfReq+0x7c>
          break;
 8006982:	bf00      	nop
      }
      break;
 8006984:	e004      	b.n	8006990 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fcc1 	bl	8007310 <USBD_CtlError>
      break;
 800698e:	bf00      	nop
  }

  return ret;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	889b      	ldrh	r3, [r3, #4]
 80069ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d007      	beq.n	80069ca <USBD_StdEPReq+0x30>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	f200 8145 	bhi.w	8006c4a <USBD_StdEPReq+0x2b0>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <USBD_StdEPReq+0x44>
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	f040 8140 	bne.w	8006c4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
      break;
 80069dc:	e13a      	b.n	8006c54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d007      	beq.n	80069f6 <USBD_StdEPReq+0x5c>
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	f300 8129 	bgt.w	8006c3e <USBD_StdEPReq+0x2a4>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d07f      	beq.n	8006af0 <USBD_StdEPReq+0x156>
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d03c      	beq.n	8006a6e <USBD_StdEPReq+0xd4>
 80069f4:	e123      	b.n	8006c3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d002      	beq.n	8006a08 <USBD_StdEPReq+0x6e>
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d016      	beq.n	8006a34 <USBD_StdEPReq+0x9a>
 8006a06:	e02c      	b.n	8006a62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <USBD_StdEPReq+0x90>
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d00a      	beq.n	8006a2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f92d 	bl	8007c78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f929 	bl	8007c78 <USBD_LL_StallEP>
 8006a26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a28:	e020      	b.n	8006a6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc6f 	bl	8007310 <USBD_CtlError>
              break;
 8006a32:	e01b      	b.n	8006a6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	885b      	ldrh	r3, [r3, #2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10e      	bne.n	8006a5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <USBD_StdEPReq+0xc0>
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b80      	cmp	r3, #128	; 0x80
 8006a46:	d008      	beq.n	8006a5a <USBD_StdEPReq+0xc0>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	88db      	ldrh	r3, [r3, #6]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f90f 	bl	8007c78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fd23 	bl	80074a6 <USBD_CtlSendStatus>

              break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fc53 	bl	8007310 <USBD_CtlError>
              break;
 8006a6a:	bf00      	nop
          }
          break;
 8006a6c:	e0ec      	b.n	8006c48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d002      	beq.n	8006a80 <USBD_StdEPReq+0xe6>
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d016      	beq.n	8006aac <USBD_StdEPReq+0x112>
 8006a7e:	e030      	b.n	8006ae2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <USBD_StdEPReq+0x108>
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d00a      	beq.n	8006aa2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 f8f1 	bl	8007c78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a96:	2180      	movs	r1, #128	; 0x80
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f8ed 	bl	8007c78 <USBD_LL_StallEP>
 8006a9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006aa0:	e025      	b.n	8006aee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fc33 	bl	8007310 <USBD_CtlError>
              break;
 8006aaa:	e020      	b.n	8006aee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	885b      	ldrh	r3, [r3, #2]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11b      	bne.n	8006aec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 f8f7 	bl	8007cb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fcec 	bl	80074a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006ae0:	e004      	b.n	8006aec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fc13 	bl	8007310 <USBD_CtlError>
              break;
 8006aea:	e000      	b.n	8006aee <USBD_StdEPReq+0x154>
              break;
 8006aec:	bf00      	nop
          }
          break;
 8006aee:	e0ab      	b.n	8006c48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d002      	beq.n	8006b02 <USBD_StdEPReq+0x168>
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d032      	beq.n	8006b66 <USBD_StdEPReq+0x1cc>
 8006b00:	e097      	b.n	8006c32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d007      	beq.n	8006b18 <USBD_StdEPReq+0x17e>
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d004      	beq.n	8006b18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fbfd 	bl	8007310 <USBD_CtlError>
                break;
 8006b16:	e091      	b.n	8006c3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	da0b      	bge.n	8006b38 <USBD_StdEPReq+0x19e>
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	3310      	adds	r3, #16
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	4413      	add	r3, r2
 8006b34:	3304      	adds	r3, #4
 8006b36:	e00b      	b.n	8006b50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	3304      	adds	r3, #4
 8006b50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fc47 	bl	80073f2 <USBD_CtlSendData>
              break;
 8006b64:	e06a      	b.n	8006c3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da11      	bge.n	8006b92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	f003 020f 	and.w	r2, r3, #15
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3324      	adds	r3, #36	; 0x24
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d117      	bne.n	8006bb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fbc0 	bl	8007310 <USBD_CtlError>
                  break;
 8006b90:	e054      	b.n	8006c3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	f003 020f 	and.w	r2, r3, #15
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fbad 	bl	8007310 <USBD_CtlError>
                  break;
 8006bb6:	e041      	b.n	8006c3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	da0b      	bge.n	8006bd8 <USBD_StdEPReq+0x23e>
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	3310      	adds	r3, #16
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	e00b      	b.n	8006bf0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	3304      	adds	r3, #4
 8006bf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <USBD_StdEPReq+0x264>
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b80      	cmp	r3, #128	; 0x80
 8006bfc:	d103      	bne.n	8006c06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e00e      	b.n	8006c24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 f872 	bl	8007cf4 <USBD_LL_IsStallEP>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e002      	b.n	8006c24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2202      	movs	r2, #2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fbe1 	bl	80073f2 <USBD_CtlSendData>
              break;
 8006c30:	e004      	b.n	8006c3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fb6b 	bl	8007310 <USBD_CtlError>
              break;
 8006c3a:	bf00      	nop
          }
          break;
 8006c3c:	e004      	b.n	8006c48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fb65 	bl	8007310 <USBD_CtlError>
          break;
 8006c46:	bf00      	nop
      }
      break;
 8006c48:	e004      	b.n	8006c54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fb5f 	bl	8007310 <USBD_CtlError>
      break;
 8006c52:	bf00      	nop
  }

  return ret;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	885b      	ldrh	r3, [r3, #2]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	2b0e      	cmp	r3, #14
 8006c82:	f200 8152 	bhi.w	8006f2a <USBD_GetDescriptor+0x2ca>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBD_GetDescriptor+0x2c>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cfd 	.word	0x08006cfd
 8006c90:	08006d15 	.word	0x08006d15
 8006c94:	08006d55 	.word	0x08006d55
 8006c98:	08006f2b 	.word	0x08006f2b
 8006c9c:	08006f2b 	.word	0x08006f2b
 8006ca0:	08006ecb 	.word	0x08006ecb
 8006ca4:	08006ef7 	.word	0x08006ef7
 8006ca8:	08006f2b 	.word	0x08006f2b
 8006cac:	08006f2b 	.word	0x08006f2b
 8006cb0:	08006f2b 	.word	0x08006f2b
 8006cb4:	08006f2b 	.word	0x08006f2b
 8006cb8:	08006f2b 	.word	0x08006f2b
 8006cbc:	08006f2b 	.word	0x08006f2b
 8006cc0:	08006f2b 	.word	0x08006f2b
 8006cc4:	08006cc9 	.word	0x08006cc9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	7c12      	ldrb	r2, [r2, #16]
 8006ce0:	f107 0108 	add.w	r1, r7, #8
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cea:	e126      	b.n	8006f3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fb0e 	bl	8007310 <USBD_CtlError>
        err++;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8006cfa:	e11e      	b.n	8006f3a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	7c12      	ldrb	r2, [r2, #16]
 8006d08:	f107 0108 	add.w	r1, r7, #8
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	60f8      	str	r0, [r7, #12]
      break;
 8006d12:	e112      	b.n	8006f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7c1b      	ldrb	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f107 0208 	add.w	r2, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	2202      	movs	r2, #2
 8006d34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d36:	e100      	b.n	8006f3a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	f107 0208 	add.w	r2, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	2202      	movs	r2, #2
 8006d50:	701a      	strb	r2, [r3, #0]
      break;
 8006d52:	e0f2      	b.n	8006f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	885b      	ldrh	r3, [r3, #2]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	f200 80ac 	bhi.w	8006eb8 <USBD_GetDescriptor+0x258>
 8006d60:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <USBD_GetDescriptor+0x108>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006db5 	.word	0x08006db5
 8006d70:	08006de9 	.word	0x08006de9
 8006d74:	08006e1d 	.word	0x08006e1d
 8006d78:	08006e51 	.word	0x08006e51
 8006d7c:	08006e85 	.word	0x08006e85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	7c12      	ldrb	r2, [r2, #16]
 8006d98:	f107 0108 	add.w	r1, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006da2:	e091      	b.n	8006ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fab2 	bl	8007310 <USBD_CtlError>
            err++;
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	3301      	adds	r3, #1
 8006db0:	72fb      	strb	r3, [r7, #11]
          break;
 8006db2:	e089      	b.n	8006ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7c12      	ldrb	r2, [r2, #16]
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dd6:	e077      	b.n	8006ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa98 	bl	8007310 <USBD_CtlError>
            err++;
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	3301      	adds	r3, #1
 8006de4:	72fb      	strb	r3, [r7, #11]
          break;
 8006de6:	e06f      	b.n	8006ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	7c12      	ldrb	r2, [r2, #16]
 8006e00:	f107 0108 	add.w	r1, r7, #8
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
 8006e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e0a:	e05d      	b.n	8006ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa7e 	bl	8007310 <USBD_CtlError>
            err++;
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	3301      	adds	r3, #1
 8006e18:	72fb      	strb	r3, [r7, #11]
          break;
 8006e1a:	e055      	b.n	8006ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	7c12      	ldrb	r2, [r2, #16]
 8006e34:	f107 0108 	add.w	r1, r7, #8
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e3e:	e043      	b.n	8006ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa64 	bl	8007310 <USBD_CtlError>
            err++;
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e4e:	e03b      	b.n	8006ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e72:	e029      	b.n	8006ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa4a 	bl	8007310 <USBD_CtlError>
            err++;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	72fb      	strb	r3, [r7, #11]
          break;
 8006e82:	e021      	b.n	8006ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea6:	e00f      	b.n	8006ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa30 	bl	8007310 <USBD_CtlError>
            err++;
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006eb6:	e007      	b.n	8006ec8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa28 	bl	8007310 <USBD_CtlError>
          err++;
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006ec6:	bf00      	nop
      }
      break;
 8006ec8:	e037      	b.n	8006f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7c1b      	ldrb	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	f107 0208 	add.w	r2, r7, #8
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4798      	blx	r3
 8006ee2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ee4:	e029      	b.n	8006f3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fa11 	bl	8007310 <USBD_CtlError>
        err++;
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef4:	e021      	b.n	8006f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7c1b      	ldrb	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10d      	bne.n	8006f1a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f107 0208 	add.w	r2, r7, #8
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4798      	blx	r3
 8006f0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	2207      	movs	r2, #7
 8006f16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f18:	e00f      	b.n	8006f3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f9f7 	bl	8007310 <USBD_CtlError>
        err++;
 8006f22:	7afb      	ldrb	r3, [r7, #11]
 8006f24:	3301      	adds	r3, #1
 8006f26:	72fb      	strb	r3, [r7, #11]
      break;
 8006f28:	e007      	b.n	8006f3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9ef 	bl	8007310 <USBD_CtlError>
      err++;
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	3301      	adds	r3, #1
 8006f36:	72fb      	strb	r3, [r7, #11]
      break;
 8006f38:	bf00      	nop
  }

  if (err != 0U)
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11e      	bne.n	8006f7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	88db      	ldrh	r3, [r3, #6]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d016      	beq.n	8006f76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006f48:	893b      	ldrh	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00e      	beq.n	8006f6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88da      	ldrh	r2, [r3, #6]
 8006f52:	893b      	ldrh	r3, [r7, #8]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	bf28      	it	cs
 8006f58:	4613      	movcs	r3, r2
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f5e:	893b      	ldrh	r3, [r7, #8]
 8006f60:	461a      	mov	r2, r3
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa44 	bl	80073f2 <USBD_CtlSendData>
 8006f6a:	e009      	b.n	8006f80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f9ce 	bl	8007310 <USBD_CtlError>
 8006f74:	e004      	b.n	8006f80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa95 	bl	80074a6 <USBD_CtlSendStatus>
 8006f7c:	e000      	b.n	8006f80 <USBD_GetDescriptor+0x320>
    return;
 8006f7e:	bf00      	nop
  }
}
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop

08006f88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	889b      	ldrh	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d131      	bne.n	8006ffe <USBD_SetAddress+0x76>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	88db      	ldrh	r3, [r3, #6]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d12d      	bne.n	8006ffe <USBD_SetAddress+0x76>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	885b      	ldrh	r3, [r3, #2]
 8006fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa8:	d829      	bhi.n	8006ffe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	885b      	ldrh	r3, [r3, #2]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d104      	bne.n	8006fcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f9a3 	bl	8007310 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fca:	e01d      	b.n	8007008 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7bfa      	ldrb	r2, [r7, #15]
 8006fd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 feb7 	bl	8007d4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa61 	bl	80074a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff2:	e009      	b.n	8007008 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffc:	e004      	b.n	8007008 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f985 	bl	8007310 <USBD_CtlError>
  }
}
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	b2da      	uxtb	r2, r3
 8007024:	4b4c      	ldr	r3, [pc, #304]	; (8007158 <USBD_SetConfig+0x148>)
 8007026:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007028:	4b4b      	ldr	r3, [pc, #300]	; (8007158 <USBD_SetConfig+0x148>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d905      	bls.n	800703c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f96c 	bl	8007310 <USBD_CtlError>
    return USBD_FAIL;
 8007038:	2303      	movs	r3, #3
 800703a:	e088      	b.n	800714e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d002      	beq.n	800704e <USBD_SetConfig+0x3e>
 8007048:	2b03      	cmp	r3, #3
 800704a:	d025      	beq.n	8007098 <USBD_SetConfig+0x88>
 800704c:	e071      	b.n	8007132 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800704e:	4b42      	ldr	r3, [pc, #264]	; (8007158 <USBD_SetConfig+0x148>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d01c      	beq.n	8007090 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007056:	4b40      	ldr	r3, [pc, #256]	; (8007158 <USBD_SetConfig+0x148>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007060:	4b3d      	ldr	r3, [pc, #244]	; (8007158 <USBD_SetConfig+0x148>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff f992 	bl	8006390 <USBD_SetClassConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f949 	bl	8007310 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800707e:	e065      	b.n	800714c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fa10 	bl	80074a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2203      	movs	r2, #3
 800708a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800708e:	e05d      	b.n	800714c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa08 	bl	80074a6 <USBD_CtlSendStatus>
      break;
 8007096:	e059      	b.n	800714c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007098:	4b2f      	ldr	r3, [pc, #188]	; (8007158 <USBD_SetConfig+0x148>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d112      	bne.n	80070c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070a8:	4b2b      	ldr	r3, [pc, #172]	; (8007158 <USBD_SetConfig+0x148>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070b2:	4b29      	ldr	r3, [pc, #164]	; (8007158 <USBD_SetConfig+0x148>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff f985 	bl	80063c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9f1 	bl	80074a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070c4:	e042      	b.n	800714c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80070c6:	4b24      	ldr	r3, [pc, #144]	; (8007158 <USBD_SetConfig+0x148>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d02a      	beq.n	800712a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff f973 	bl	80063c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <USBD_SetConfig+0x148>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070ec:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <USBD_SetConfig+0x148>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff f94c 	bl	8006390 <USBD_SetClassConfig>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00f      	beq.n	8007122 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f903 	bl	8007310 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff f958 	bl	80063c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007120:	e014      	b.n	800714c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f9bf 	bl	80074a6 <USBD_CtlSendStatus>
      break;
 8007128:	e010      	b.n	800714c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f9bb 	bl	80074a6 <USBD_CtlSendStatus>
      break;
 8007130:	e00c      	b.n	800714c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8eb 	bl	8007310 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800713a:	4b07      	ldr	r3, [pc, #28]	; (8007158 <USBD_SetConfig+0x148>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff f941 	bl	80063c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007146:	2303      	movs	r3, #3
 8007148:	73fb      	strb	r3, [r7, #15]
      break;
 800714a:	bf00      	nop
  }

  return ret;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200001b4 	.word	0x200001b4

0800715c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d004      	beq.n	8007178 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f8cd 	bl	8007310 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007176:	e023      	b.n	80071c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	dc02      	bgt.n	800718a <USBD_GetConfig+0x2e>
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc03      	bgt.n	8007190 <USBD_GetConfig+0x34>
 8007188:	e015      	b.n	80071b6 <USBD_GetConfig+0x5a>
 800718a:	2b03      	cmp	r3, #3
 800718c:	d00b      	beq.n	80071a6 <USBD_GetConfig+0x4a>
 800718e:	e012      	b.n	80071b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3308      	adds	r3, #8
 800719a:	2201      	movs	r2, #1
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f927 	bl	80073f2 <USBD_CtlSendData>
        break;
 80071a4:	e00c      	b.n	80071c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3304      	adds	r3, #4
 80071aa:	2201      	movs	r2, #1
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f91f 	bl	80073f2 <USBD_CtlSendData>
        break;
 80071b4:	e004      	b.n	80071c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8a9 	bl	8007310 <USBD_CtlError>
        break;
 80071be:	bf00      	nop
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d81e      	bhi.n	800721e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	88db      	ldrh	r3, [r3, #6]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d004      	beq.n	80071f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f890 	bl	8007310 <USBD_CtlError>
        break;
 80071f0:	e01a      	b.n	8007228 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f043 0202 	orr.w	r2, r3, #2
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	330c      	adds	r3, #12
 8007212:	2202      	movs	r2, #2
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f8eb 	bl	80073f2 <USBD_CtlSendData>
      break;
 800721c:	e004      	b.n	8007228 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f875 	bl	8007310 <USBD_CtlError>
      break;
 8007226:	bf00      	nop
  }
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	885b      	ldrh	r3, [r3, #2]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d106      	bne.n	8007250 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f92b 	bl	80074a6 <USBD_CtlSendStatus>
  }
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	2b02      	cmp	r3, #2
 800726e:	d80b      	bhi.n	8007288 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	885b      	ldrh	r3, [r3, #2]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10c      	bne.n	8007292 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f910 	bl	80074a6 <USBD_CtlSendStatus>
      }
      break;
 8007286:	e004      	b.n	8007292 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f840 	bl	8007310 <USBD_CtlError>
      break;
 8007290:	e000      	b.n	8007294 <USBD_ClrFeature+0x3c>
      break;
 8007292:	bf00      	nop
  }
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fa92 	bl	80067f0 <SWAPBYTE>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fa85 	bl	80067f0 <SWAPBYTE>
 80072e6:	4603      	mov	r3, r0
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3301      	adds	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f7ff fa78 	bl	80067f0 <SWAPBYTE>
 8007300:	4603      	mov	r3, r0
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	80da      	strh	r2, [r3, #6]
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800731a:	2180      	movs	r1, #128	; 0x80
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fcab 	bl	8007c78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007322:	2100      	movs	r1, #0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fca7 	bl	8007c78 <USBD_LL_StallEP>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d036      	beq.n	80073b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800734c:	6938      	ldr	r0, [r7, #16]
 800734e:	f000 f836 	bl	80073be <USBD_GetLen>
 8007352:	4603      	mov	r3, r0
 8007354:	3301      	adds	r3, #1
 8007356:	b29b      	uxth	r3, r3
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	701a      	strb	r2, [r3, #0]
  idx++;
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	3301      	adds	r3, #1
 8007370:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	4413      	add	r3, r2
 8007378:	2203      	movs	r2, #3
 800737a:	701a      	strb	r2, [r3, #0]
  idx++;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	3301      	adds	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007382:	e013      	b.n	80073ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	4413      	add	r3, r2
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	3301      	adds	r3, #1
 8007394:	613b      	str	r3, [r7, #16]
    idx++;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	3301      	adds	r3, #1
 800739a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	4413      	add	r3, r2
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	3301      	adds	r3, #1
 80073aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e7      	bne.n	8007384 <USBD_GetString+0x52>
 80073b4:	e000      	b.n	80073b8 <USBD_GetString+0x86>
    return;
 80073b6:	bf00      	nop
  }
}
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073ce:	e005      	b.n	80073dc <USBD_GetLen+0x1e>
  {
    len++;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	3301      	adds	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3301      	adds	r3, #1
 80073da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f5      	bne.n	80073d0 <USBD_GetLen+0x12>
  }

  return len;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2202      	movs	r2, #2
 8007402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	2100      	movs	r1, #0
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fcb6 	bl	8007d8a <USBD_LL_Transmit>

  return USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	2100      	movs	r1, #0
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fca5 	bl	8007d8a <USBD_LL_Transmit>

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2203      	movs	r2, #3
 800745a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	2100      	movs	r1, #0
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fca9 	bl	8007dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	2100      	movs	r1, #0
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fc98 	bl	8007dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2204      	movs	r2, #4
 80074b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074b6:	2300      	movs	r3, #0
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc64 	bl	8007d8a <USBD_LL_Transmit>

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2205      	movs	r2, #5
 80074d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074dc:	2300      	movs	r3, #0
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fc72 	bl	8007dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80074f8:	2200      	movs	r2, #0
 80074fa:	4912      	ldr	r1, [pc, #72]	; (8007544 <MX_USB_Device_Init+0x50>)
 80074fc:	4812      	ldr	r0, [pc, #72]	; (8007548 <MX_USB_Device_Init+0x54>)
 80074fe:	f7fe fed9 	bl	80062b4 <USBD_Init>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007508:	f7f9 f8fa 	bl	8000700 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800750c:	490f      	ldr	r1, [pc, #60]	; (800754c <MX_USB_Device_Init+0x58>)
 800750e:	480e      	ldr	r0, [pc, #56]	; (8007548 <MX_USB_Device_Init+0x54>)
 8007510:	f7fe ff00 	bl	8006314 <USBD_RegisterClass>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800751a:	f7f9 f8f1 	bl	8000700 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800751e:	490c      	ldr	r1, [pc, #48]	; (8007550 <MX_USB_Device_Init+0x5c>)
 8007520:	4809      	ldr	r0, [pc, #36]	; (8007548 <MX_USB_Device_Init+0x54>)
 8007522:	f7fe fe21 	bl	8006168 <USBD_CDC_RegisterInterface>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800752c:	f7f9 f8e8 	bl	8000700 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007530:	4805      	ldr	r0, [pc, #20]	; (8007548 <MX_USB_Device_Init+0x54>)
 8007532:	f7fe ff16 	bl	8006362 <USBD_Start>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800753c:	f7f9 f8e0 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007540:	bf00      	nop
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000140 	.word	0x20000140
 8007548:	200001b8 	.word	0x200001b8
 800754c:	20000028 	.word	0x20000028
 8007550:	2000012c 	.word	0x2000012c

08007554 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007558:	2200      	movs	r2, #0
 800755a:	4905      	ldr	r1, [pc, #20]	; (8007570 <CDC_Init_FS+0x1c>)
 800755c:	4805      	ldr	r0, [pc, #20]	; (8007574 <CDC_Init_FS+0x20>)
 800755e:	f7fe fe18 	bl	8006192 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007562:	4905      	ldr	r1, [pc, #20]	; (8007578 <CDC_Init_FS+0x24>)
 8007564:	4803      	ldr	r0, [pc, #12]	; (8007574 <CDC_Init_FS+0x20>)
 8007566:	f7fe fe32 	bl	80061ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800756a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800756c:	4618      	mov	r0, r3
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000870 	.word	0x20000870
 8007574:	200001b8 	.word	0x200001b8
 8007578:	20000488 	.word	0x20000488

0800757c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007582:	4618      	mov	r0, r3
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	71fb      	strb	r3, [r7, #7]
 8007598:	4613      	mov	r3, r2
 800759a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b23      	cmp	r3, #35	; 0x23
 80075a0:	d84a      	bhi.n	8007638 <CDC_Control_FS+0xac>
 80075a2:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <CDC_Control_FS+0x1c>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	08007639 	.word	0x08007639
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	08007639 	.word	0x08007639
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007639 	.word	0x08007639
 80075c8:	08007639 	.word	0x08007639
 80075cc:	08007639 	.word	0x08007639
 80075d0:	08007639 	.word	0x08007639
 80075d4:	08007639 	.word	0x08007639
 80075d8:	08007639 	.word	0x08007639
 80075dc:	08007639 	.word	0x08007639
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007639 	.word	0x08007639
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007639 	.word	0x08007639
 80075f4:	08007639 	.word	0x08007639
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007639 	.word	0x08007639
 8007600:	08007639 	.word	0x08007639
 8007604:	08007639 	.word	0x08007639
 8007608:	08007639 	.word	0x08007639
 800760c:	08007639 	.word	0x08007639
 8007610:	08007639 	.word	0x08007639
 8007614:	08007639 	.word	0x08007639
 8007618:	08007639 	.word	0x08007639
 800761c:	08007639 	.word	0x08007639
 8007620:	08007639 	.word	0x08007639
 8007624:	08007639 	.word	0x08007639
 8007628:	08007639 	.word	0x08007639
 800762c:	08007639 	.word	0x08007639
 8007630:	08007639 	.word	0x08007639
 8007634:	08007639 	.word	0x08007639
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007638:	bf00      	nop
  }

  return (USBD_OK);
 800763a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	480f      	ldr	r0, [pc, #60]	; (8007694 <CDC_Receive_FS+0x4c>)
 8007656:	f7fe fdba 	bl	80061ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800765a:	480e      	ldr	r0, [pc, #56]	; (8007694 <CDC_Receive_FS+0x4c>)
 800765c:	f7fe fe00 	bl	8006260 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	73fb      	strb	r3, [r7, #15]
    memset(buffer,'\0',14);
 8007666:	220e      	movs	r2, #14
 8007668:	2100      	movs	r1, #0
 800766a:	480b      	ldr	r0, [pc, #44]	; (8007698 <CDC_Receive_FS+0x50>)
 800766c:	f000 fc96 	bl	8007f9c <memset>
    memcpy(buffer,Buf,len);
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	461a      	mov	r2, r3
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4808      	ldr	r0, [pc, #32]	; (8007698 <CDC_Receive_FS+0x50>)
 8007678:	f000 fc82 	bl	8007f80 <memcpy>
    memset(Buf,'\0',len);
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	461a      	mov	r2, r3
 8007680:	2100      	movs	r1, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fc8a 	bl	8007f9c <memset>
  return (USBD_OK);
 8007688:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200001b8 	.word	0x200001b8
 8007698:	20000008 	.word	0x20000008

0800769c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076ac:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <CDC_Transmit_FS+0x48>)
 80076ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80076be:	2301      	movs	r3, #1
 80076c0:	e00b      	b.n	80076da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80076c2:	887b      	ldrh	r3, [r7, #2]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4806      	ldr	r0, [pc, #24]	; (80076e4 <CDC_Transmit_FS+0x48>)
 80076ca:	f7fe fd62 	bl	8006192 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076ce:	4805      	ldr	r0, [pc, #20]	; (80076e4 <CDC_Transmit_FS+0x48>)
 80076d0:	f7fe fd96 	bl	8006200 <USBD_CDC_TransmitPacket>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200001b8 	.word	0x200001b8

080076e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2212      	movs	r2, #18
 800771c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800771e:	4b03      	ldr	r3, [pc, #12]	; (800772c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20000160 	.word	0x20000160

08007730 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2204      	movs	r2, #4
 8007740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007742:	4b03      	ldr	r3, [pc, #12]	; (8007750 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	20000174 	.word	0x20000174

08007754 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	4907      	ldr	r1, [pc, #28]	; (8007788 <USBD_CDC_ProductStrDescriptor+0x34>)
 800776a:	4808      	ldr	r0, [pc, #32]	; (800778c <USBD_CDC_ProductStrDescriptor+0x38>)
 800776c:	f7ff fde1 	bl	8007332 <USBD_GetString>
 8007770:	e004      	b.n	800777c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4904      	ldr	r1, [pc, #16]	; (8007788 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007776:	4805      	ldr	r0, [pc, #20]	; (800778c <USBD_CDC_ProductStrDescriptor+0x38>)
 8007778:	f7ff fddb 	bl	8007332 <USBD_GetString>
  }
  return USBD_StrDesc;
 800777c:	4b02      	ldr	r3, [pc, #8]	; (8007788 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000c58 	.word	0x20000c58
 800778c:	08007ff4 	.word	0x08007ff4

08007790 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	4904      	ldr	r1, [pc, #16]	; (80077b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80077a0:	4804      	ldr	r0, [pc, #16]	; (80077b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80077a2:	f7ff fdc6 	bl	8007332 <USBD_GetString>
  return USBD_StrDesc;
 80077a6:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000c58 	.word	0x20000c58
 80077b4:	0800800c 	.word	0x0800800c

080077b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	221a      	movs	r2, #26
 80077c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077ca:	f000 f843 	bl	8007854 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80077ce:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000178 	.word	0x20000178

080077dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	6039      	str	r1, [r7, #0]
 80077e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d105      	bne.n	80077fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4907      	ldr	r1, [pc, #28]	; (8007810 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80077f2:	4808      	ldr	r0, [pc, #32]	; (8007814 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80077f4:	f7ff fd9d 	bl	8007332 <USBD_GetString>
 80077f8:	e004      	b.n	8007804 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	4904      	ldr	r1, [pc, #16]	; (8007810 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80077fe:	4805      	ldr	r0, [pc, #20]	; (8007814 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007800:	f7ff fd97 	bl	8007332 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007804:	4b02      	ldr	r3, [pc, #8]	; (8007810 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000c58 	.word	0x20000c58
 8007814:	08008020 	.word	0x08008020

08007818 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d105      	bne.n	8007836 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	4907      	ldr	r1, [pc, #28]	; (800784c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800782e:	4808      	ldr	r0, [pc, #32]	; (8007850 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007830:	f7ff fd7f 	bl	8007332 <USBD_GetString>
 8007834:	e004      	b.n	8007840 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4904      	ldr	r1, [pc, #16]	; (800784c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800783a:	4805      	ldr	r0, [pc, #20]	; (8007850 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800783c:	f7ff fd79 	bl	8007332 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000c58 	.word	0x20000c58
 8007850:	0800802c 	.word	0x0800802c

08007854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800785a:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <Get_SerialNum+0x44>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007860:	4b0e      	ldr	r3, [pc, #56]	; (800789c <Get_SerialNum+0x48>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007866:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <Get_SerialNum+0x4c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4413      	add	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800787a:	2208      	movs	r2, #8
 800787c:	4909      	ldr	r1, [pc, #36]	; (80078a4 <Get_SerialNum+0x50>)
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f814 	bl	80078ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007884:	2204      	movs	r2, #4
 8007886:	4908      	ldr	r1, [pc, #32]	; (80078a8 <Get_SerialNum+0x54>)
 8007888:	68b8      	ldr	r0, [r7, #8]
 800788a:	f000 f80f 	bl	80078ac <IntToUnicode>
  }
}
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	1fff7590 	.word	0x1fff7590
 800789c:	1fff7594 	.word	0x1fff7594
 80078a0:	1fff7598 	.word	0x1fff7598
 80078a4:	2000017a 	.word	0x2000017a
 80078a8:	2000018a 	.word	0x2000018a

080078ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]
 80078c2:	e027      	b.n	8007914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	0f1b      	lsrs	r3, r3, #28
 80078c8:	2b09      	cmp	r3, #9
 80078ca:	d80b      	bhi.n	80078e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	0f1b      	lsrs	r3, r3, #28
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	4619      	mov	r1, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	440b      	add	r3, r1
 80078dc:	3230      	adds	r2, #48	; 0x30
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	e00a      	b.n	80078fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	0f1b      	lsrs	r3, r3, #28
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4619      	mov	r1, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	440b      	add	r3, r1
 80078f4:	3237      	adds	r2, #55	; 0x37
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	3301      	adds	r3, #1
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	4413      	add	r3, r2
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	3301      	adds	r3, #1
 8007912:	75fb      	strb	r3, [r7, #23]
 8007914:	7dfa      	ldrb	r2, [r7, #23]
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	429a      	cmp	r2, r3
 800791a:	d3d3      	bcc.n	80078c4 <IntToUnicode+0x18>
  }
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
	...

0800792c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b094      	sub	sp, #80	; 0x50
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	2244      	movs	r2, #68	; 0x44
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fb2d 	bl	8007f9c <memset>
  if(pcdHandle->Instance==USB)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a15      	ldr	r2, [pc, #84]	; (800799c <HAL_PCD_MspInit+0x70>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d122      	bne.n	8007992 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800794c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007950:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007952:	2300      	movs	r3, #0
 8007954:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007956:	f107 030c 	add.w	r3, r7, #12
 800795a:	4618      	mov	r0, r3
 800795c:	f7fa fd4a 	bl	80023f4 <HAL_RCCEx_PeriphCLKConfig>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8007966:	f7f8 fecb 	bl	8000700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800796a:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <HAL_PCD_MspInit+0x74>)
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	4a0c      	ldr	r2, [pc, #48]	; (80079a0 <HAL_PCD_MspInit+0x74>)
 8007970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007974:	6593      	str	r3, [r2, #88]	; 0x58
 8007976:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <HAL_PCD_MspInit+0x74>)
 8007978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800797e:	60bb      	str	r3, [r7, #8]
 8007980:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	2014      	movs	r0, #20
 8007988:	f7f8 ffd7 	bl	800093a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800798c:	2014      	movs	r0, #20
 800798e:	f7f8 ffee 	bl	800096e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007992:	bf00      	nop
 8007994:	3750      	adds	r7, #80	; 0x50
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40005c00 	.word	0x40005c00
 80079a0:	40021000 	.word	0x40021000

080079a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe fd1c 	bl	80063f8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	440b      	add	r3, r1
 80079e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7fe fd56 	bl	80064a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	440b      	add	r3, r1
 8007a1e:	3324      	adds	r3, #36	; 0x24
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f7fe fd9f 	bl	8006568 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe feb3 	bl	80067ac <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	795b      	ldrb	r3, [r3, #5]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d001      	beq.n	8007a66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a62:	f7f8 fe4d 	bl	8000700 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a6c:	7bfa      	ldrb	r2, [r7, #15]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fe5d 	bl	8006730 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fe09 	bl	8006694 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fe58 	bl	8006750 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7a5b      	ldrb	r3, [r3, #9]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <HAL_PCD_SuspendCallback+0x30>)
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	4a03      	ldr	r2, [pc, #12]	; (8007abc <HAL_PCD_SuspendCallback+0x30>)
 8007aae:	f043 0306 	orr.w	r3, r3, #6
 8007ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7a5b      	ldrb	r3, [r3, #9]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ad0:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <HAL_PCD_ResumeCallback+0x34>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	4a07      	ldr	r2, [pc, #28]	; (8007af4 <HAL_PCD_ResumeCallback+0x34>)
 8007ad6:	f023 0306 	bic.w	r3, r3, #6
 8007ada:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007adc:	f000 f9f8 	bl	8007ed0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fe48 	bl	800677c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	e000ed00 	.word	0xe000ed00

08007af8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007b00:	4a2b      	ldr	r2, [pc, #172]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a29      	ldr	r2, [pc, #164]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007b10:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b12:	4a28      	ldr	r2, [pc, #160]	; (8007bb4 <USBD_LL_Init+0xbc>)
 8007b14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b16:	4b26      	ldr	r3, [pc, #152]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b18:	2208      	movs	r2, #8
 8007b1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b1c:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b1e:	2202      	movs	r2, #2
 8007b20:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b24:	2202      	movs	r2, #2
 8007b26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007b28:	4b21      	ldr	r3, [pc, #132]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b2e:	4b20      	ldr	r3, [pc, #128]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b34:	4b1e      	ldr	r3, [pc, #120]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b40:	481b      	ldr	r0, [pc, #108]	; (8007bb0 <USBD_LL_Init+0xb8>)
 8007b42:	f7f8 ff22 	bl	800098a <HAL_PCD_Init>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007b4c:	f7f8 fdd8 	bl	8000700 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b56:	2318      	movs	r3, #24
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f7fa fbdc 	bl	8002318 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b66:	2358      	movs	r3, #88	; 0x58
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2180      	movs	r1, #128	; 0x80
 8007b6c:	f7fa fbd4 	bl	8002318 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b76:	23c0      	movs	r3, #192	; 0xc0
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2181      	movs	r1, #129	; 0x81
 8007b7c:	f7fa fbcc 	bl	8002318 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	f7fa fbc3 	bl	8002318 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2182      	movs	r1, #130	; 0x82
 8007ba0:	f7fa fbba 	bl	8002318 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000e58 	.word	0x20000e58
 8007bb4:	40005c00 	.word	0x40005c00

08007bb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7f8 ffa9 	bl	8000b26 <HAL_PCD_Start>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f980 	bl	8007ee0 <USBD_Get_USB_Status>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	70fb      	strb	r3, [r7, #3]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70bb      	strb	r3, [r7, #2]
 8007c04:	4613      	mov	r3, r2
 8007c06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c16:	78bb      	ldrb	r3, [r7, #2]
 8007c18:	883a      	ldrh	r2, [r7, #0]
 8007c1a:	78f9      	ldrb	r1, [r7, #3]
 8007c1c:	f7f9 f8f0 	bl	8000e00 <HAL_PCD_EP_Open>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f95a 	bl	8007ee0 <USBD_Get_USB_Status>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7f9 f92e 	bl	8000eba <HAL_PCD_EP_Close>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f93b 	bl	8007ee0 <USBD_Get_USB_Status>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7f9 f9d7 	bl	800104a <HAL_PCD_EP_SetStall>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f91c 	bl	8007ee0 <USBD_Get_USB_Status>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7f9 fa0a 	bl	80010ee <HAL_PCD_EP_ClrStall>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f8fd 	bl	8007ee0 <USBD_Get_USB_Status>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	da0b      	bge.n	8007d28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	440b      	add	r3, r1
 8007d22:	3312      	adds	r3, #18
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	e00b      	b.n	8007d40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	440b      	add	r3, r1
 8007d3a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8007d3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f9 f824 	bl	8000db8 <HAL_PCD_SetAddress>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f8b2 	bl	8007ee0 <USBD_Get_USB_Status>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	460b      	mov	r3, r1
 8007d98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007da8:	7af9      	ldrb	r1, [r7, #11]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	f7f9 f915 	bl	8000fdc <HAL_PCD_EP_Transmit>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 f891 	bl	8007ee0 <USBD_Get_USB_Status>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007dea:	7af9      	ldrb	r1, [r7, #11]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	f7f9 f8ab 	bl	8000f4a <HAL_PCD_EP_Receive>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f870 	bl	8007ee0 <USBD_Get_USB_Status>
 8007e00:	4603      	mov	r3, r0
 8007e02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e04:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7f9 f8c1 	bl	8000fac <HAL_PCD_EP_GetRxCount>
 8007e2a:	4603      	mov	r3, r0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_PCDEx_LPM_Callback+0x18>
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d013      	beq.n	8007e72 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007e4a:	e023      	b.n	8007e94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	7a5b      	ldrb	r3, [r3, #9]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007e54:	f000 f83c 	bl	8007ed0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e58:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <HAL_PCDEx_LPM_Callback+0x68>)
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	4a0f      	ldr	r2, [pc, #60]	; (8007e9c <HAL_PCDEx_LPM_Callback+0x68>)
 8007e5e:	f023 0306 	bic.w	r3, r3, #6
 8007e62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fc86 	bl	800677c <USBD_LL_Resume>
    break;
 8007e70:	e010      	b.n	8007e94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fc69 	bl	8006750 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	7a5b      	ldrb	r3, [r3, #9]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <HAL_PCDEx_LPM_Callback+0x68>)
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	4a04      	ldr	r2, [pc, #16]	; (8007e9c <HAL_PCDEx_LPM_Callback+0x68>)
 8007e8c:	f043 0306 	orr.w	r3, r3, #6
 8007e90:	6113      	str	r3, [r2, #16]
    break;
 8007e92:	bf00      	nop
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	e000ed00 	.word	0xe000ed00

08007ea0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ea8:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <USBD_static_malloc+0x18>)
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	20001134 	.word	0x20001134

08007ebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8007ed4:	bf00      	nop
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d817      	bhi.n	8007f24 <USBD_Get_USB_Status+0x44>
 8007ef4:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <USBD_Get_USB_Status+0x1c>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007f0d 	.word	0x08007f0d
 8007f00:	08007f13 	.word	0x08007f13
 8007f04:	08007f19 	.word	0x08007f19
 8007f08:	08007f1f 	.word	0x08007f1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f10:	e00b      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	73fb      	strb	r3, [r7, #15]
    break;
 8007f16:	e008      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f1c:	e005      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	73fb      	strb	r3, [r7, #15]
    break;
 8007f22:	e002      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f24:	2303      	movs	r3, #3
 8007f26:	73fb      	strb	r3, [r7, #15]
    break;
 8007f28:	bf00      	nop
  }
  return usb_status;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4d0d      	ldr	r5, [pc, #52]	; (8007f70 <__libc_init_array+0x38>)
 8007f3c:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f3e:	1b64      	subs	r4, r4, r5
 8007f40:	10a4      	asrs	r4, r4, #2
 8007f42:	2600      	movs	r6, #0
 8007f44:	42a6      	cmp	r6, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	4d0b      	ldr	r5, [pc, #44]	; (8007f78 <__libc_init_array+0x40>)
 8007f4a:	4c0c      	ldr	r4, [pc, #48]	; (8007f7c <__libc_init_array+0x44>)
 8007f4c:	f000 f82e 	bl	8007fac <_init>
 8007f50:	1b64      	subs	r4, r4, r5
 8007f52:	10a4      	asrs	r4, r4, #2
 8007f54:	2600      	movs	r6, #0
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f60:	4798      	blx	r3
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6a:	4798      	blx	r3
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	0800803c 	.word	0x0800803c
 8007f74:	0800803c 	.word	0x0800803c
 8007f78:	0800803c 	.word	0x0800803c
 8007f7c:	08008040 	.word	0x08008040

08007f80 <memcpy>:
 8007f80:	440a      	add	r2, r1
 8007f82:	4291      	cmp	r1, r2
 8007f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f88:	d100      	bne.n	8007f8c <memcpy+0xc>
 8007f8a:	4770      	bx	lr
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f96:	4291      	cmp	r1, r2
 8007f98:	d1f9      	bne.n	8007f8e <memcpy+0xe>
 8007f9a:	bd10      	pop	{r4, pc}

08007f9c <memset>:
 8007f9c:	4402      	add	r2, r0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d100      	bne.n	8007fa6 <memset+0xa>
 8007fa4:	4770      	bx	lr
 8007fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007faa:	e7f9      	b.n	8007fa0 <memset+0x4>

08007fac <_init>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_fini>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr
