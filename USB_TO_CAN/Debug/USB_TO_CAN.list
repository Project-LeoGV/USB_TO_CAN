
USB_TO_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c98  08006c98  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c98  08006c98  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c98  08006c98  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  2000017c  08006e1c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000133c  08006e1c  0002133c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd01  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002452  00000000  00000000  0002cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ece5  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfd8  00000000  00000000  0004f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b51d2  00000000  00000000  0005d355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002838  00000000  00000000  00112578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000017c 	.word	0x2000017c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006c38 	.word	0x08006c38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000180 	.word	0x20000180
 8000214:	08006c38 	.word	0x08006c38

08000218 <main>:
#include "../../MCAL/GPIO/GPIO_Interface.h"
#include "../../MCAL/FDCAN/CAN_Interface.h"
/* USER CODE END Includes */

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	// Enable Peripherals

	// Initialize Variables

	// Initialize Peripherals
	MX_USB_Device_Init();
 800021c:	f005 fffa 	bl	8006214 <MX_USB_Device_Init>

	while(1)
 8000220:	e7fe      	b.n	8000220 <main+0x8>

08000222 <Error_Handler>:

	}
}

void Error_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000226:	b672      	cpsid	i
}
 8000228:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800022a:	e7fe      	b.n	800022a <Error_Handler+0x8>

0800022c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000230:	e7fe      	b.n	8000230 <NMI_Handler+0x4>

08000232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000232:	b480      	push	{r7}
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000236:	e7fe      	b.n	8000236 <HardFault_Handler+0x4>

08000238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800023c:	e7fe      	b.n	800023c <MemManage_Handler+0x4>

0800023e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000242:	e7fe      	b.n	8000242 <BusFault_Handler+0x4>

08000244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000248:	e7fe      	b.n	8000248 <UsageFault_Handler+0x4>

0800024a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000266:	b480      	push	{r7}
 8000268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000278:	f000 f848 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <USB_LP_IRQHandler+0x10>)
 8000286:	f000 fa00 	bl	800068a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000e40 	.word	0x20000e40

08000294 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <SystemInit+0x20>)
 800029a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029e:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <SystemInit+0x20>)
 80002a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80002bc:	f7ff ffea 	bl	8000294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80002e6:	f006 fc7b 	bl	8006be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002ea:	f7ff ff95 	bl	8000218 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80002fc:	08006ca0 	.word	0x08006ca0
  ldr r2, =_sbss
 8000300:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000304:	2000133c 	.word	0x2000133c

08000308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC1_2_IRQHandler>
	...

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_IncTick+0x1c>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <HAL_IncTick+0x20>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4413      	add	r3, r2
 800031a:	4a03      	ldr	r2, [pc, #12]	; (8000328 <HAL_IncTick+0x1c>)
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	20000198 	.word	0x20000198
 800032c:	20000000 	.word	0x20000000

08000330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return uwTick;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <HAL_GetTick+0x14>)
 8000336:	681b      	ldr	r3, [r3, #0]
}
 8000338:	4618      	mov	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000198 	.word	0x20000198

08000348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <__NVIC_GetPriorityGrouping+0x18>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	0a1b      	lsrs	r3, r3, #8
 8000352:	f003 0307 	and.w	r3, r3, #7
}
 8000356:	4618      	mov	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	2b00      	cmp	r3, #0
 8000374:	db0b      	blt.n	800038e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f003 021f 	and.w	r2, r3, #31
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <__NVIC_EnableIRQ+0x38>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000e100 	.word	0xe000e100

080003a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	6039      	str	r1, [r7, #0]
 80003aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db0a      	blt.n	80003ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	490c      	ldr	r1, [pc, #48]	; (80003ec <__NVIC_SetPriority+0x4c>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	0112      	lsls	r2, r2, #4
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	440b      	add	r3, r1
 80003c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c8:	e00a      	b.n	80003e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <__NVIC_SetPriority+0x50>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	3b04      	subs	r3, #4
 80003d8:	0112      	lsls	r2, r2, #4
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	440b      	add	r3, r1
 80003de:	761a      	strb	r2, [r3, #24]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000e100 	.word	0xe000e100
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0307 	and.w	r3, r3, #7
 8000406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	f1c3 0307 	rsb	r3, r3, #7
 800040e:	2b04      	cmp	r3, #4
 8000410:	bf28      	it	cs
 8000412:	2304      	movcs	r3, #4
 8000414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3304      	adds	r3, #4
 800041a:	2b06      	cmp	r3, #6
 800041c:	d902      	bls.n	8000424 <NVIC_EncodePriority+0x30>
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	3b03      	subs	r3, #3
 8000422:	e000      	b.n	8000426 <NVIC_EncodePriority+0x32>
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000428:	f04f 32ff 	mov.w	r2, #4294967295
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	43da      	mvns	r2, r3
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	401a      	ands	r2, r3
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800043c:	f04f 31ff 	mov.w	r1, #4294967295
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	43d9      	mvns	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044c:	4313      	orrs	r3, r2
         );
}
 800044e:	4618      	mov	r0, r3
 8000450:	3724      	adds	r7, #36	; 0x24
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b086      	sub	sp, #24
 800045e:	af00      	add	r7, sp, #0
 8000460:	4603      	mov	r3, r0
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000468:	f7ff ff6e 	bl	8000348 <__NVIC_GetPriorityGrouping>
 800046c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68b9      	ldr	r1, [r7, #8]
 8000472:	6978      	ldr	r0, [r7, #20]
 8000474:	f7ff ffbe 	bl	80003f4 <NVIC_EncodePriority>
 8000478:	4602      	mov	r2, r0
 800047a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff8d 	bl	80003a0 <__NVIC_SetPriority>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	4603      	mov	r3, r0
 8000496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff61 	bl	8000364 <__NVIC_EnableIRQ>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b084      	sub	sp, #16
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d101      	bne.n	80004bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80004b8:	2301      	movs	r3, #1
 80004ba:	e0c0      	b.n	800063e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d106      	bne.n	80004d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f006 f87f 	bl	80065d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2203      	movs	r2, #3
 80004da:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 ff1d 	bl	8002322 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e03e      	b.n	800056c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80004ee:	7bfa      	ldrb	r2, [r7, #15]
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	4613      	mov	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4413      	add	r3, r2
 80004f8:	00db      	lsls	r3, r3, #3
 80004fa:	440b      	add	r3, r1
 80004fc:	3311      	adds	r3, #17
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000502:	7bfa      	ldrb	r2, [r7, #15]
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	440b      	add	r3, r1
 8000510:	3310      	adds	r3, #16
 8000512:	7bfa      	ldrb	r2, [r7, #15]
 8000514:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000516:	7bfa      	ldrb	r2, [r7, #15]
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	440b      	add	r3, r1
 8000524:	3313      	adds	r3, #19
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800052a:	7bfa      	ldrb	r2, [r7, #15]
 800052c:	6879      	ldr	r1, [r7, #4]
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	00db      	lsls	r3, r3, #3
 8000536:	440b      	add	r3, r1
 8000538:	3320      	adds	r3, #32
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800053e:	7bfa      	ldrb	r2, [r7, #15]
 8000540:	6879      	ldr	r1, [r7, #4]
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	00db      	lsls	r3, r3, #3
 800054a:	440b      	add	r3, r1
 800054c:	3324      	adds	r3, #36	; 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	4613      	mov	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	440b      	add	r3, r1
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	3301      	adds	r3, #1
 800056a:	73fb      	strb	r3, [r7, #15]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	7bfa      	ldrb	r2, [r7, #15]
 8000572:	429a      	cmp	r2, r3
 8000574:	d3bb      	bcc.n	80004ee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e044      	b.n	8000606 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800057c:	7bfa      	ldrb	r2, [r7, #15]
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	440b      	add	r3, r1
 800058a:	f203 1351 	addw	r3, r3, #337	; 0x151
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000592:	7bfa      	ldrb	r2, [r7, #15]
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	440b      	add	r3, r1
 80005a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80005a8:	7bfa      	ldrb	r2, [r7, #15]
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4613      	mov	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	440b      	add	r3, r1
 80005b6:	f203 1353 	addw	r3, r3, #339	; 0x153
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80005be:	7bfa      	ldrb	r2, [r7, #15]
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	440b      	add	r3, r1
 80005cc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80005d4:	7bfa      	ldrb	r2, [r7, #15]
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	440b      	add	r3, r1
 80005e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80005ea:	7bfa      	ldrb	r2, [r7, #15]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	4613      	mov	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	440b      	add	r3, r1
 80005f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3301      	adds	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	7bfa      	ldrb	r2, [r7, #15]
 800060c:	429a      	cmp	r2, r3
 800060e:	d3b5      	bcc.n	800057c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3304      	adds	r3, #4
 8000618:	e893 0006 	ldmia.w	r3, {r1, r2}
 800061c:	f001 fe9c 	bl	8002358 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a9b      	ldrb	r3, [r3, #10]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d102      	bne.n	800063c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f001 fc41 	bl	8001ebe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000654:	2b01      	cmp	r3, #1
 8000656:	d101      	bne.n	800065c <HAL_PCD_Start+0x16>
 8000658:	2302      	movs	r3, #2
 800065a:	e012      	b.n	8000682 <HAL_PCD_Start+0x3c>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fe43 	bl	80022f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f903 	bl	800487e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f004 f908 	bl	80048ac <USB_ReadInterrupts>
 800069c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 fb04 	bl	8000cb6 <PCD_EP_ISR_Handler>

    return;
 80006ae:	e110      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d013      	beq.n	80006e2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006cc:	b292      	uxth	r2, r2
 80006ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f006 f80f 	bl	80066f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80006d8:	2100      	movs	r1, #0
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f8fc 	bl	80008d8 <HAL_PCD_SetAddress>

    return;
 80006e0:	e0f7      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00c      	beq.n	8000706 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80006fe:	b292      	uxth	r2, r2
 8000700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000704:	e0e5      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00c      	beq.n	800072a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000722:	b292      	uxth	r2, r2
 8000724:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000728:	e0d3      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000730:	2b00      	cmp	r3, #0
 8000732:	d034      	beq.n	800079e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800073c:	b29a      	uxth	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f022 0204 	bic.w	r2, r2, #4
 8000746:	b292      	uxth	r2, r2
 8000748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000754:	b29a      	uxth	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f022 0208 	bic.w	r2, r2, #8
 800075e:	b292      	uxth	r2, r2
 8000760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800076a:	2b01      	cmp	r3, #1
 800076c:	d107      	bne.n	800077e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000776:	2100      	movs	r1, #0
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f006 f9af 	bl	8006adc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f005 fff2 	bl	8006768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800078c:	b29a      	uxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000796:	b292      	uxth	r2, r2
 8000798:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800079c:	e099      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d027      	beq.n	80007f8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0208 	orr.w	r2, r2, #8
 80007ba:	b292      	uxth	r2, r2
 80007bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007d2:	b292      	uxth	r2, r2
 80007d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0204 	orr.w	r2, r2, #4
 80007ea:	b292      	uxth	r2, r2
 80007ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f005 ff9f 	bl	8006734 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80007f6:	e06c      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d040      	beq.n	8000884 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800080a:	b29a      	uxth	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000814:	b292      	uxth	r2, r2
 8000816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000820:	2b00      	cmp	r3, #0
 8000822:	d12b      	bne.n	800087c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800082c:	b29a      	uxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 0204 	orr.w	r2, r2, #4
 8000836:	b292      	uxth	r2, r2
 8000838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f042 0208 	orr.w	r2, r2, #8
 800084e:	b292      	uxth	r2, r2
 8000850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2201      	movs	r2, #1
 8000858:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000864:	b29b      	uxth	r3, r3
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000872:	2101      	movs	r1, #1
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f006 f931 	bl	8006adc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800087a:	e02a      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f005 ff59 	bl	8006734 <HAL_PCD_SuspendCallback>
    return;
 8000882:	e026      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00f      	beq.n	80008ae <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000896:	b29a      	uxth	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80008a0:	b292      	uxth	r2, r2
 80008a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f005 ff17 	bl	80066da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80008ac:	e011      	b.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00c      	beq.n	80008d2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008ca:	b292      	uxth	r2, r2
 80008cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80008d0:	bf00      	nop
  }
}
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d101      	bne.n	80008f2 <HAL_PCD_SetAddress+0x1a>
 80008ee:	2302      	movs	r3, #2
 80008f0:	e012      	b.n	8000918 <HAL_PCD_SetAddress+0x40>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	78fa      	ldrb	r2, [r7, #3]
 80008fe:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	78fa      	ldrb	r2, [r7, #3]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f003 ffa4 	bl	8004856 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4608      	mov	r0, r1
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	4603      	mov	r3, r0
 8000930:	70fb      	strb	r3, [r7, #3]
 8000932:	460b      	mov	r3, r1
 8000934:	803b      	strh	r3, [r7, #0]
 8000936:	4613      	mov	r3, r2
 8000938:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800093e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000942:	2b00      	cmp	r3, #0
 8000944:	da0e      	bge.n	8000964 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	f003 0207 	and.w	r2, r3, #7
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	3310      	adds	r3, #16
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2201      	movs	r2, #1
 8000960:	705a      	strb	r2, [r3, #1]
 8000962:	e00e      	b.n	8000982 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	f003 0207 	and.w	r2, r3, #7
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2200      	movs	r2, #0
 8000980:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	b2da      	uxtb	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800098e:	883a      	ldrh	r2, [r7, #0]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	78ba      	ldrb	r2, [r7, #2]
 8000998:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800099a:	78bb      	ldrb	r3, [r7, #2]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d102      	bne.n	80009a6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2200      	movs	r2, #0
 80009a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d101      	bne.n	80009b4 <HAL_PCD_EP_Open+0x94>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e00e      	b.n	80009d2 <HAL_PCD_EP_Open+0xb2>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68f9      	ldr	r1, [r7, #12]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fce6 	bl	8002394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80009d0:	7afb      	ldrb	r3, [r7, #11]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80009e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da0e      	bge.n	8000a0c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80009ee:	78fb      	ldrb	r3, [r7, #3]
 80009f0:	f003 0207 	and.w	r2, r3, #7
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	3310      	adds	r3, #16
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2201      	movs	r2, #1
 8000a08:	705a      	strb	r2, [r3, #1]
 8000a0a:	e00e      	b.n	8000a2a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	f003 0207 	and.w	r2, r3, #7
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2200      	movs	r2, #0
 8000a28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d101      	bne.n	8000a44 <HAL_PCD_EP_Close+0x6a>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e00e      	b.n	8000a62 <HAL_PCD_EP_Close+0x88>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68f9      	ldr	r1, [r7, #12]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 f862 	bl	8002b1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	460b      	mov	r3, r1
 8000a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	f003 0207 	and.w	r2, r3, #7
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	f003 0307 	and.w	r3, r3, #7
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6979      	ldr	r1, [r7, #20]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 fa1a 	bl	8002ef6 <USB_EPStartXfer>

  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	f003 0207 	and.w	r2, r3, #7
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	440b      	add	r3, r1
 8000aea:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
 8000b0e:	f003 0207 	and.w	r2, r3, #7
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	3310      	adds	r3, #16
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2201      	movs	r2, #1
 8000b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	2201      	movs	r2, #1
 8000b46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000b48:	7afb      	ldrb	r3, [r7, #11]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6979      	ldr	r1, [r7, #20]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 f9cb 	bl	8002ef6 <USB_EPStartXfer>

  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	7912      	ldrb	r2, [r2, #4]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d901      	bls.n	8000b88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e03e      	b.n	8000c06 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	da0e      	bge.n	8000bae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	f003 0207 	and.w	r2, r3, #7
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	3310      	adds	r3, #16
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	705a      	strb	r2, [r3, #1]
 8000bac:	e00c      	b.n	8000bc8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <HAL_PCD_EP_SetStall+0x7e>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e00e      	b.n	8000c06 <HAL_PCD_EP_SetStall+0x9c>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fd2e 	bl	8004658 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b084      	sub	sp, #16
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	460b      	mov	r3, r1
 8000c18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	7912      	ldrb	r2, [r2, #4]
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d901      	bls.n	8000c2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e040      	b.n	8000cae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da0e      	bge.n	8000c52 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	f003 0207 	and.w	r2, r3, #7
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	3310      	adds	r3, #16
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	705a      	strb	r2, [r3, #1]
 8000c50:	e00e      	b.n	8000c70 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	f003 0207 	and.w	r2, r3, #7
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <HAL_PCD_EP_ClrStall+0x82>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e00e      	b.n	8000cae <HAL_PCD_EP_ClrStall+0xa0>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68f9      	ldr	r1, [r7, #12]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fd2b 	bl	80046fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b096      	sub	sp, #88	; 0x58
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000cbe:	e3ae      	b.n	800141e <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8000cda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 8170 	bne.w	8000fc4 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14d      	bne.n	8000d8c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3310      	adds	r3, #16
 8000d18:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d44:	695a      	ldr	r2, [r3, #20]
 8000d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d4e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d50:	2100      	movs	r1, #0
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f005 fca7 	bl	80066a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7b1b      	ldrb	r3, [r3, #12]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 835d 	beq.w	800141e <PCD_EP_ISR_Handler+0x768>
 8000d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f040 8358 	bne.w	800141e <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7b1b      	ldrb	r3, [r3, #12]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	b292      	uxth	r2, r2
 8000d80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	731a      	strb	r2, [r3, #12]
 8000d8a:	e348      	b.n	800141e <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d032      	beq.n	8000e10 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8000ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dde:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8000de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	f003 fdb3 	bl	8004950 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000df6:	4013      	ands	r3, r2
 8000df8:	823b      	strh	r3, [r7, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	8a3a      	ldrh	r2, [r7, #16]
 8000e00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e04:	b292      	uxth	r2, r2
 8000e06:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f005 fc1f 	bl	800664c <HAL_PCD_SetupStageCallback>
 8000e0e:	e306      	b.n	800141e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e10:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f280 8302 	bge.w	800141e <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000e26:	4013      	ands	r3, r2
 8000e28:	83fb      	strh	r3, [r7, #30]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	8bfa      	ldrh	r2, [r7, #30]
 8000e30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e34:	b292      	uxth	r2, r2
 8000e36:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d019      	beq.n	8000e9c <PCD_EP_ISR_Handler+0x1e6>
 8000e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d015      	beq.n	8000e9c <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e76:	6959      	ldr	r1, [r3, #20]
 8000e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8000e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f003 fd65 	bl	8004950 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8000e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	441a      	add	r2, r3
 8000e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e94:	2100      	movs	r1, #0
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f005 fbea 	bl	8006670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000ea6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 82b5 	bne.w	800141e <PCD_EP_ISR_Handler+0x768>
 8000eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000eb8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000ebc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000ec0:	f000 82ad 	beq.w	800141e <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4413      	add	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	801a      	strh	r2, [r3, #0]
 8000ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8000efa:	d91d      	bls.n	8000f38 <PCD_EP_ISR_Handler+0x282>
 8000efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	095b      	lsrs	r3, r3, #5
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
 8000f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <PCD_EP_ISR_Handler+0x260>
 8000f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f12:	3b01      	subs	r3, #1
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	029b      	lsls	r3, r3, #10
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	801a      	strh	r2, [r3, #0]
 8000f36:	e026      	b.n	8000f86 <PCD_EP_ISR_Handler+0x2d0>
 8000f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10a      	bne.n	8000f56 <PCD_EP_ISR_Handler+0x2a0>
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	801a      	strh	r2, [r3, #0]
 8000f54:	e017      	b.n	8000f86 <PCD_EP_ISR_Handler+0x2d0>
 8000f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8000f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <PCD_EP_ISR_Handler+0x2ba>
 8000f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f96:	827b      	strh	r3, [r7, #18]
 8000f98:	8a7b      	ldrh	r3, [r7, #18]
 8000f9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000f9e:	827b      	strh	r3, [r7, #18]
 8000fa0:	8a7b      	ldrh	r3, [r7, #18]
 8000fa2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000fa6:	827b      	strh	r3, [r7, #18]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	8a7b      	ldrh	r3, [r7, #18]
 8000fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	8013      	strh	r3, [r2, #0]
 8000fc2:	e22c      	b.n	800141e <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fd8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f280 80f6 	bge.w	80011ce <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001014:	b292      	uxth	r2, r2
 8001016:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001018:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800102e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001030:	7b1b      	ldrb	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d123      	bne.n	800107e <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800103e:	b29b      	uxth	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	4413      	add	r3, r2
 8001050:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800105a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800105e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 808e 	beq.w	8001184 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800106e:	6959      	ldr	r1, [r3, #20]
 8001070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001072:	88da      	ldrh	r2, [r3, #6]
 8001074:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001078:	f003 fc6a 	bl	8004950 <USB_ReadPMA>
 800107c:	e082      	b.n	8001184 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800107e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d10a      	bne.n	800109c <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001086:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800108a:	461a      	mov	r2, r3
 800108c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f9d3 	bl	800143a <HAL_PCD_EP_DB_Receive>
 8001094:	4603      	mov	r3, r0
 8001096:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800109a:	e073      	b.n	8001184 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80010b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010b6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	441a      	add	r2, r3
 80010c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80010cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80010d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80010d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010dc:	b29b      	uxth	r3, r3
 80010de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d022      	beq.n	8001140 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	4413      	add	r3, r2
 8001114:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800111e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001122:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02c      	beq.n	8001184 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001130:	6959      	ldr	r1, [r3, #20]
 8001132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001134:	891a      	ldrh	r2, [r3, #8]
 8001136:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800113a:	f003 fc09 	bl	8004950 <USB_ReadPMA>
 800113e:	e021      	b.n	8001184 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001148:	b29b      	uxth	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	4413      	add	r3, r2
 800115a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001164:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001168:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800116c:	2b00      	cmp	r3, #0
 800116e:	d009      	beq.n	8001184 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001176:	6959      	ldr	r1, [r3, #20]
 8001178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800117a:	895a      	ldrh	r2, [r3, #10]
 800117c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001180:	f003 fbe6 	bl	8004950 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800118c:	441a      	add	r2, r3
 800118e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001190:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800119a:	441a      	add	r2, r3
 800119c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80011a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <PCD_EP_ISR_Handler+0x4fe>
 80011a8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80011ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d206      	bcs.n	80011c2 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80011b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f005 fa58 	bl	8006670 <HAL_PCD_DataOutStageCallback>
 80011c0:	e005      	b.n	80011ce <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fe94 	bl	8002ef6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80011ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 8121 	beq.w	800141e <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80011dc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	3310      	adds	r3, #16
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800120a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	441a      	add	r2, r3
 800121c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001228:	b29b      	uxth	r3, r3
 800122a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 80a2 	bne.w	800137a <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800123c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123e:	7b1b      	ldrb	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 8093 	beq.w	800136c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001246:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d046      	beq.n	80012e0 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d126      	bne.n	80012a8 <PCD_EP_ISR_Handler+0x5f2>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001268:	b29b      	uxth	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	4413      	add	r3, r2
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
 8001272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	00da      	lsls	r2, r3, #3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	4413      	add	r3, r2
 800127c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800128c:	b29a      	uxth	r2, r3
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800129c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	e061      	b.n	800136c <PCD_EP_ISR_Handler+0x6b6>
 80012a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012aa:	785b      	ldrb	r3, [r3, #1]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d15d      	bne.n	800136c <PCD_EP_ISR_Handler+0x6b6>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	4413      	add	r3, r2
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	00da      	lsls	r2, r3, #3
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	4413      	add	r3, r2
 80012d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	e045      	b.n	800136c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d126      	bne.n	800133c <PCD_EP_ISR_Handler+0x686>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001302:	4413      	add	r3, r2
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
 8001306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	00da      	lsls	r2, r3, #3
 800130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130e:	4413      	add	r3, r2
 8001310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001320:	b29a      	uxth	r2, r3
 8001322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001324:	801a      	strh	r2, [r3, #0]
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001334:	b29a      	uxth	r2, r3
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	e017      	b.n	800136c <PCD_EP_ISR_Handler+0x6b6>
 800133c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d113      	bne.n	800136c <PCD_EP_ISR_Handler+0x6b6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800134c:	b29b      	uxth	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001352:	4413      	add	r3, r2
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	00da      	lsls	r2, r3, #3
 800135c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135e:	4413      	add	r3, r2
 8001360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
 8001366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001368:	2200      	movs	r2, #0
 800136a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800136c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f005 f997 	bl	80066a6 <HAL_PCD_DataInStageCallback>
 8001378:	e051      	b.n	800141e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800137a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d144      	bne.n	8001410 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80013ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d907      	bls.n	80013ca <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80013ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c6:	619a      	str	r2, [r3, #24]
 80013c8:	e002      	b.n	80013d0 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80013ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80013d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d106      	bne.n	80013e6 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80013d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f005 f961 	bl	80066a6 <HAL_PCD_DataInStageCallback>
 80013e4:	e01b      	b.n	800141e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80013e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013ee:	441a      	add	r2, r3
 80013f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80013f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013fc:	441a      	add	r2, r3
 80013fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001400:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fd74 	bl	8002ef6 <USB_EPStartXfer>
 800140e:	e006      	b.n	800141e <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001410:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001414:	461a      	mov	r2, r3
 8001416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f917 	bl	800164c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21b      	sxth	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	f6ff ac48 	blt.w	8000cc0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3758      	adds	r7, #88	; 0x58
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b088      	sub	sp, #32
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	4613      	mov	r3, r2
 8001446:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d07c      	beq.n	800154c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4413      	add	r3, r2
 800146c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001476:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	8b7b      	ldrh	r3, [r7, #26]
 800147e:	429a      	cmp	r2, r3
 8001480:	d306      	bcc.n	8001490 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	8b7b      	ldrh	r3, [r7, #26]
 8001488:	1ad2      	subs	r2, r2, r3
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e002      	b.n	8001496 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d123      	bne.n	80014e6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b8:	833b      	strh	r3, [r7, #24]
 80014ba:	8b3b      	ldrh	r3, [r7, #24]
 80014bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80014c0:	833b      	strh	r3, [r7, #24]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	441a      	add	r2, r3
 80014d0:	8b3b      	ldrh	r3, [r7, #24]
 80014d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80014da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01f      	beq.n	8001530 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800150a:	82fb      	strh	r3, [r7, #22]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	441a      	add	r2, r3
 800151a:	8afb      	ldrh	r3, [r7, #22]
 800151c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800152c:	b29b      	uxth	r3, r3
 800152e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8085 	beq.w	8001642 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	6959      	ldr	r1, [r3, #20]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	891a      	ldrh	r2, [r3, #8]
 8001544:	8b7b      	ldrh	r3, [r7, #26]
 8001546:	f003 fa03 	bl	8004950 <USB_ReadPMA>
 800154a:	e07a      	b.n	8001642 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	4413      	add	r3, r2
 8001566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001570:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	8b7b      	ldrh	r3, [r7, #26]
 8001578:	429a      	cmp	r2, r3
 800157a:	d306      	bcc.n	800158a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	8b7b      	ldrh	r3, [r7, #26]
 8001582:	1ad2      	subs	r2, r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	e002      	b.n	8001590 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d123      	bne.n	80015e0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b2:	83fb      	strh	r3, [r7, #30]
 80015b4:	8bfb      	ldrh	r3, [r7, #30]
 80015b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80015ba:	83fb      	strh	r3, [r7, #30]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	441a      	add	r2, r3
 80015ca:	8bfb      	ldrh	r3, [r7, #30]
 80015cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80015d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80015d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	b29b      	uxth	r3, r3
 80015de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11f      	bne.n	800162a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001604:	83bb      	strh	r3, [r7, #28]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	441a      	add	r2, r3
 8001614:	8bbb      	ldrh	r3, [r7, #28]
 8001616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800161a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800161e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001626:	b29b      	uxth	r3, r3
 8001628:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800162a:	8b7b      	ldrh	r3, [r7, #26]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	6959      	ldr	r1, [r3, #20]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	895a      	ldrh	r2, [r3, #10]
 800163c:	8b7b      	ldrh	r3, [r7, #26]
 800163e:	f003 f987 	bl	8004950 <USB_ReadPMA>
    }
  }

  return count;
 8001642:	8b7b      	ldrh	r3, [r7, #26]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0a4      	sub	sp, #144	; 0x90
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 81db 	beq.w	8001a1c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	4413      	add	r3, r2
 8001680:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001696:	429a      	cmp	r2, r3
 8001698:	d907      	bls.n	80016aa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80016a2:	1ad2      	subs	r2, r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	e002      	b.n	80016b0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 80b9 	bne.w	800182c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d126      	bne.n	8001710 <HAL_PCD_EP_DB_Transmit+0xc4>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	4413      	add	r3, r2
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	00da      	lsls	r2, r3, #3
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	4413      	add	r3, r2
 80016e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001708:	b29a      	uxth	r2, r3
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	e01a      	b.n	8001746 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d116      	bne.n	8001746 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172c:	4413      	add	r3, r2
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	00da      	lsls	r2, r3, #3
 8001736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001738:	4413      	add	r3, r2
 800173a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001742:	2200      	movs	r2, #0
 8001744:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d126      	bne.n	80017a2 <HAL_PCD_EP_DB_Transmit+0x156>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001762:	b29b      	uxth	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	00da      	lsls	r2, r3, #3
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001786:	b29a      	uxth	r2, r3
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	801a      	strh	r2, [r3, #0]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800179a:	b29a      	uxth	r2, r3
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	801a      	strh	r2, [r3, #0]
 80017a0:	e017      	b.n	80017d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d113      	bne.n	80017d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	4413      	add	r3, r2
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	00da      	lsls	r2, r3, #3
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	4413      	add	r3, r2
 80017c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4619      	mov	r1, r3
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f004 ff64 	bl	80066a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 82fa 	beq.w	8001dde <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001804:	82fb      	strh	r3, [r7, #22]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	441a      	add	r2, r3
 8001814:	8afb      	ldrh	r3, [r7, #22]
 8001816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800181a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800181e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001826:	b29b      	uxth	r3, r3
 8001828:	8013      	strh	r3, [r2, #0]
 800182a:	e2d8      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d021      	beq.n	800187a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800184c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001850:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	441a      	add	r2, r3
 8001862:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800186a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800186e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001876:	b29b      	uxth	r3, r3
 8001878:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001880:	2b01      	cmp	r3, #1
 8001882:	f040 82ac 	bne.w	8001dde <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800188e:	441a      	add	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800189c:	441a      	add	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	6a1a      	ldr	r2, [r3, #32]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d30b      	bcc.n	80018c6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	e017      	b.n	80018f6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d108      	bne.n	80018e0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80018ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018de:	e00a      	b.n	80018f6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d165      	bne.n	80019ca <HAL_PCD_EP_DB_Transmit+0x37e>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800190c:	b29b      	uxth	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	4413      	add	r3, r2
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	00da      	lsls	r2, r3, #3
 800191c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191e:	4413      	add	r3, r2
 8001920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
 8001926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001930:	b29a      	uxth	r2, r3
 8001932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800193a:	2b3e      	cmp	r3, #62	; 0x3e
 800193c:	d91d      	bls.n	800197a <HAL_PCD_EP_DB_Transmit+0x32e>
 800193e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
 8001946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_PCD_EP_DB_Transmit+0x30c>
 8001952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001954:	3b01      	subs	r3, #1
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
 8001958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	b29a      	uxth	r2, r3
 800195e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001960:	b29b      	uxth	r3, r3
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	b29b      	uxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001972:	b29a      	uxth	r2, r3
 8001974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001976:	801a      	strh	r2, [r3, #0]
 8001978:	e044      	b.n	8001a04 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800197a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10a      	bne.n	8001998 <HAL_PCD_EP_DB_Transmit+0x34c>
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800198c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001990:	b29a      	uxth	r2, r3
 8001992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	e035      	b.n	8001a04 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
 80019a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HAL_PCD_EP_DB_Transmit+0x366>
 80019ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ae:	3301      	adds	r3, #1
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	029b      	lsls	r3, r3, #10
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c6:	801a      	strh	r2, [r3, #0]
 80019c8:	e01c      	b.n	8001a04 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d118      	bne.n	8001a04 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e6:	4413      	add	r3, r2
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	00da      	lsls	r2, r3, #3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	4413      	add	r3, r2
 80019f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019f8:	643b      	str	r3, [r7, #64]	; 0x40
 80019fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a02:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	6959      	ldr	r1, [r3, #20]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	891a      	ldrh	r2, [r3, #8]
 8001a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f002 ff59 	bl	80048cc <USB_WritePMA>
 8001a1a:	e1e0      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a40:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d307      	bcc.n	8001a60 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001a58:	1ad2      	subs	r2, r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	e002      	b.n	8001a66 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 80c0 	bne.w	8001bf0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d126      	bne.n	8001ac6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a8c:	4413      	add	r3, r2
 8001a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	00da      	lsls	r2, r3, #3
 8001a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a98:	4413      	add	r3, r2
 8001a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aae:	801a      	strh	r2, [r3, #0]
 8001ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac2:	801a      	strh	r2, [r3, #0]
 8001ac4:	e01a      	b.n	8001afc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d116      	bne.n	8001afc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ae2:	4413      	add	r3, r2
 8001ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	00da      	lsls	r2, r3, #3
 8001aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aee:	4413      	add	r3, r2
 8001af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001af4:	663b      	str	r3, [r7, #96]	; 0x60
 8001af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001af8:	2200      	movs	r2, #0
 8001afa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	677b      	str	r3, [r7, #116]	; 0x74
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12b      	bne.n	8001b62 <HAL_PCD_EP_DB_Transmit+0x516>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b1e:	4413      	add	r3, r2
 8001b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	00da      	lsls	r2, r3, #3
 8001b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b46:	801a      	strh	r2, [r3, #0]
 8001b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b5e:	801a      	strh	r2, [r3, #0]
 8001b60:	e017      	b.n	8001b92 <HAL_PCD_EP_DB_Transmit+0x546>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d113      	bne.n	8001b92 <HAL_PCD_EP_DB_Transmit+0x546>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b78:	4413      	add	r3, r2
 8001b7a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	00da      	lsls	r2, r3, #3
 8001b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b84:	4413      	add	r3, r2
 8001b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b8a:	673b      	str	r3, [r7, #112]	; 0x70
 8001b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b8e:	2200      	movs	r2, #0
 8001b90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f004 fd84 	bl	80066a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 811a 	bne.w	8001dde <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	441a      	add	r2, r3
 8001bd6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	8013      	strh	r3, [r2, #0]
 8001bee:	e0f6      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d121      	bne.n	8001c3e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	441a      	add	r2, r3
 8001c26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	f040 80ca 	bne.w	8001dde <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c52:	441a      	add	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c60:	441a      	add	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d30b      	bcc.n	8001c8a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	6a1a      	ldr	r2, [r3, #32]
 8001c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c82:	1ad2      	subs	r2, r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	621a      	str	r2, [r3, #32]
 8001c88:	e017      	b.n	8001cba <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d108      	bne.n	8001ca4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8001c92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ca2:	e00a      	b.n	8001cba <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	785b      	ldrb	r3, [r3, #1]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d165      	bne.n	8001d94 <HAL_PCD_EP_DB_Transmit+0x748>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cdc:	4413      	add	r3, r2
 8001cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	00da      	lsls	r2, r3, #3
 8001ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce8:	4413      	add	r3, r2
 8001cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cfe:	801a      	strh	r2, [r3, #0]
 8001d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d04:	2b3e      	cmp	r3, #62	; 0x3e
 8001d06:	d91d      	bls.n	8001d44 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8001d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	029b      	lsls	r3, r3, #10
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d40:	801a      	strh	r2, [r3, #0]
 8001d42:	e041      	b.n	8001dc8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8001d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <HAL_PCD_EP_DB_Transmit+0x716>
 8001d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d5e:	801a      	strh	r2, [r3, #0]
 8001d60:	e032      	b.n	8001dc8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8001d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_PCD_EP_DB_Transmit+0x730>
 8001d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d78:	3301      	adds	r3, #1
 8001d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e019      	b.n	8001dc8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d115      	bne.n	8001dc8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	4413      	add	r3, r2
 8001dac:	657b      	str	r3, [r7, #84]	; 0x54
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db6:	4413      	add	r3, r2
 8001db8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8001dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6959      	ldr	r1, [r3, #20]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	895a      	ldrh	r2, [r3, #10]
 8001dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f002 fd77 	bl	80048cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001df8:	82bb      	strh	r3, [r7, #20]
 8001dfa:	8abb      	ldrh	r3, [r7, #20]
 8001dfc:	f083 0310 	eor.w	r3, r3, #16
 8001e00:	82bb      	strh	r3, [r7, #20]
 8001e02:	8abb      	ldrh	r3, [r7, #20]
 8001e04:	f083 0320 	eor.w	r3, r3, #32
 8001e08:	82bb      	strh	r3, [r7, #20]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	441a      	add	r2, r3
 8001e18:	8abb      	ldrh	r3, [r7, #20]
 8001e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3790      	adds	r7, #144	; 0x90
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	817b      	strh	r3, [r7, #10]
 8001e46:	4613      	mov	r3, r2
 8001e48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001e4a:	897b      	ldrh	r3, [r7, #10]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	f003 0207 	and.w	r2, r3, #7
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	3310      	adds	r3, #16
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e009      	b.n	8001e82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e6e:	897a      	ldrh	r2, [r7, #10]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001e82:	893b      	ldrh	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	80da      	strh	r2, [r3, #6]
 8001e96:	e00b      	b.n	8001eb0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f20:	2300      	movs	r3, #0
 8001f22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8098 	beq.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a3f      	ldr	r2, [pc, #252]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a39      	ldr	r2, [pc, #228]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f6a:	f7fe f9e1 	bl	8000330 <HAL_GetTick>
 8001f6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f70:	e009      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7fe f9dd 	bl	8000330 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d902      	bls.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	74fb      	strb	r3, [r7, #19]
        break;
 8001f84:	e005      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ef      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f92:	7cfb      	ldrb	r3, [r7, #19]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d159      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01e      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d019      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fe0:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe f99d 	bl	8000330 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff8:	e00b      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7fe f999 	bl	8000330 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d902      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	74fb      	strb	r3, [r7, #19]
            break;
 8002010:	e006      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ec      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800203c:	e008      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	74bb      	strb	r3, [r7, #18]
 8002042:	e005      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002050:	7c7b      	ldrb	r3, [r7, #17]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4ba6      	ldr	r3, [pc, #664]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4aa5      	ldr	r2, [pc, #660]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206e:	4ba0      	ldr	r3, [pc, #640]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	f023 0203 	bic.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	499c      	ldr	r1, [pc, #624]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002090:	4b97      	ldr	r3, [pc, #604]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 020c 	bic.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4994      	ldr	r1, [pc, #592]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020b2:	4b8f      	ldr	r3, [pc, #572]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	498b      	ldr	r1, [pc, #556]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d4:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	4983      	ldr	r1, [pc, #524]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f6:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	497a      	ldr	r1, [pc, #488]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002118:	4b75      	ldr	r3, [pc, #468]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	4972      	ldr	r1, [pc, #456]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800213a:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4969      	ldr	r1, [pc, #420]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800215c:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4961      	ldr	r1, [pc, #388]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	4958      	ldr	r1, [pc, #352]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	4950      	ldr	r1, [pc, #320]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021be:	d105      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a4a      	ldr	r2, [pc, #296]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021d8:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	4942      	ldr	r1, [pc, #264]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f6:	d105      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f8:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a3c      	ldr	r2, [pc, #240]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002202:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4934      	ldr	r1, [pc, #208]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a2e      	ldr	r2, [pc, #184]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	4926      	ldr	r1, [pc, #152]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002272:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	4918      	ldr	r1, [pc, #96]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	490a      	ldr	r1, [pc, #40]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000

080022f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002304:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002308:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800232a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800232e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	b29b      	uxth	r3, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	b29b      	uxth	r3, r3
 8002340:	4013      	ands	r3, r2
 8002342:	b29a      	uxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002394:	b480      	push	{r7}
 8002396:	b09d      	sub	sp, #116	; 0x74
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d81f      	bhi.n	8002406 <USB_ActivateEndpoint+0x72>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <USB_ActivateEndpoint+0x38>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	0800240f 	.word	0x0800240f
 80023d8:	080023eb 	.word	0x080023eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80023dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80023e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80023e8:	e012      	b.n	8002410 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80023ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80023ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80023f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80023f6:	e00b      	b.n	8002410 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80023f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80023fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002400:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002404:	e004      	b.n	8002410 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800240c:	e000      	b.n	8002410 <USB_ActivateEndpoint+0x7c>
      break;
 800240e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800241e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242e:	b29b      	uxth	r3, r3
 8002430:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	b21b      	sxth	r3, r3
 8002442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	b21a      	sxth	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	b21b      	sxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b21b      	sxth	r3, r3
 8002456:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	441a      	add	r2, r3
 8002464:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800246c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002478:	b29b      	uxth	r3, r3
 800247a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	7b1b      	ldrb	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 8178 	bne.w	8002776 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8084 	beq.w	8002598 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	00da      	lsls	r2, r3, #3
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	88db      	ldrh	r3, [r3, #6]
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	827b      	strh	r3, [r7, #18]
 80024d2:	8a7b      	ldrh	r3, [r7, #18]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <USB_ActivateEndpoint+0x180>
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	823b      	strh	r3, [r7, #16]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	441a      	add	r2, r3
 80024fe:	8a3b      	ldrh	r3, [r7, #16]
 8002500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002510:	b29b      	uxth	r3, r3
 8002512:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	78db      	ldrb	r3, [r3, #3]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d020      	beq.n	800255e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002532:	81bb      	strh	r3, [r7, #12]
 8002534:	89bb      	ldrh	r3, [r7, #12]
 8002536:	f083 0320 	eor.w	r3, r3, #32
 800253a:	81bb      	strh	r3, [r7, #12]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	89bb      	ldrh	r3, [r7, #12]
 8002548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	b29b      	uxth	r3, r3
 800255a:	8013      	strh	r3, [r2, #0]
 800255c:	e2d5      	b.n	8002b0a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002574:	81fb      	strh	r3, [r7, #14]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	441a      	add	r2, r3
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800258a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002592:	b29b      	uxth	r3, r3
 8002594:	8013      	strh	r3, [r2, #0]
 8002596:	e2b8      	b.n	8002b0a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	4413      	add	r3, r2
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	00da      	lsls	r2, r3, #3
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	4413      	add	r3, r2
 80025b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	88db      	ldrh	r3, [r3, #6]
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	4413      	add	r3, r2
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	00da      	lsls	r2, r3, #3
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	4413      	add	r3, r2
 80025ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b3e      	cmp	r3, #62	; 0x3e
 8002606:	d91d      	bls.n	8002644 <USB_ActivateEndpoint+0x2b0>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <USB_ActivateEndpoint+0x28e>
 800261c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800261e:	3b01      	subs	r3, #1
 8002620:	66bb      	str	r3, [r7, #104]	; 0x68
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29a      	uxth	r2, r3
 8002628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262a:	b29b      	uxth	r3, r3
 800262c:	029b      	lsls	r3, r3, #10
 800262e:	b29b      	uxth	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263c:	b29a      	uxth	r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	801a      	strh	r2, [r3, #0]
 8002642:	e026      	b.n	8002692 <USB_ActivateEndpoint+0x2fe>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <USB_ActivateEndpoint+0x2ce>
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265a:	b29a      	uxth	r2, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	e017      	b.n	8002692 <USB_ActivateEndpoint+0x2fe>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	66bb      	str	r3, [r7, #104]	; 0x68
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <USB_ActivateEndpoint+0x2e8>
 8002676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002678:	3301      	adds	r3, #1
 800267a:	66bb      	str	r3, [r7, #104]	; 0x68
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29a      	uxth	r2, r3
 8002682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002684:	b29b      	uxth	r3, r3
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	b29b      	uxth	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	b29a      	uxth	r2, r3
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	847b      	strh	r3, [r7, #34]	; 0x22
 80026a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01b      	beq.n	80026e2 <USB_ActivateEndpoint+0x34e>
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	843b      	strh	r3, [r7, #32]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	441a      	add	r2, r3
 80026cc:	8c3b      	ldrh	r3, [r7, #32]
 80026ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026de:	b29b      	uxth	r3, r3
 80026e0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d124      	bne.n	8002734 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002700:	83bb      	strh	r3, [r7, #28]
 8002702:	8bbb      	ldrh	r3, [r7, #28]
 8002704:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002708:	83bb      	strh	r3, [r7, #28]
 800270a:	8bbb      	ldrh	r3, [r7, #28]
 800270c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002710:	83bb      	strh	r3, [r7, #28]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	441a      	add	r2, r3
 800271c:	8bbb      	ldrh	r3, [r7, #28]
 800271e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272e:	b29b      	uxth	r3, r3
 8002730:	8013      	strh	r3, [r2, #0]
 8002732:	e1ea      	b.n	8002b0a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	83fb      	strh	r3, [r7, #30]
 800274c:	8bfb      	ldrh	r3, [r7, #30]
 800274e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002752:	83fb      	strh	r3, [r7, #30]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	8bfb      	ldrh	r3, [r7, #30]
 8002760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002770:	b29b      	uxth	r3, r3
 8002772:	8013      	strh	r3, [r2, #0]
 8002774:	e1c9      	b.n	8002b0a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	78db      	ldrb	r3, [r3, #3]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d11e      	bne.n	80027bc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002794:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	441a      	add	r2, r3
 80027a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80027a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80027b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	8013      	strh	r3, [r2, #0]
 80027ba:	e01d      	b.n	80027f8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	441a      	add	r2, r3
 80027e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80027e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002808:	4413      	add	r3, r2
 800280a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	00da      	lsls	r2, r3, #3
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	4413      	add	r3, r2
 8002816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281a:	65bb      	str	r3, [r7, #88]	; 0x58
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	891b      	ldrh	r3, [r3, #8]
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	657b      	str	r3, [r7, #84]	; 0x54
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	4413      	add	r3, r2
 800283e:	657b      	str	r3, [r7, #84]	; 0x54
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00da      	lsls	r2, r3, #3
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	4413      	add	r3, r2
 800284a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800284e:	653b      	str	r3, [r7, #80]	; 0x50
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	895b      	ldrh	r3, [r3, #10]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	b29b      	uxth	r3, r3
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800285e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 8093 	bne.w	8002990 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800287a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01b      	beq.n	80028be <USB_ActivateEndpoint+0x52a>
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80028aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80028cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01b      	beq.n	800290e <USB_ActivateEndpoint+0x57a>
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002924:	873b      	strh	r3, [r7, #56]	; 0x38
 8002926:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002928:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800292c:	873b      	strh	r3, [r7, #56]	; 0x38
 800292e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002934:	873b      	strh	r3, [r7, #56]	; 0x38
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	441a      	add	r2, r3
 8002940:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002952:	b29b      	uxth	r3, r3
 8002954:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800296c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	441a      	add	r2, r3
 8002978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800297a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298a:	b29b      	uxth	r3, r3
 800298c:	8013      	strh	r3, [r2, #0]
 800298e:	e0bc      	b.n	8002b0a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01d      	beq.n	80029e8 <USB_ActivateEndpoint+0x654>
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	441a      	add	r2, r3
 80029d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80029f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01d      	beq.n	8002a40 <USB_ActivateEndpoint+0x6ac>
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	78db      	ldrb	r3, [r3, #3]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d024      	beq.n	8002a92 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a66:	f083 0320 	eor.w	r3, r3, #32
 8002a6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	8013      	strh	r3, [r2, #0]
 8002a90:	e01d      	b.n	8002ace <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8002b0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3774      	adds	r7, #116	; 0x74
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop

08002b1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b08d      	sub	sp, #52	; 0x34
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	7b1b      	ldrb	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 808e 	bne.w	8002c4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d044      	beq.n	8002bc2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	81bb      	strh	r3, [r7, #12]
 8002b46:	89bb      	ldrh	r3, [r7, #12]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <USB_DeactivateEndpoint+0x6c>
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	817b      	strh	r3, [r7, #10]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9e:	813b      	strh	r3, [r7, #8]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	893b      	ldrh	r3, [r7, #8]
 8002bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	8013      	strh	r3, [r2, #0]
 8002bc0:	e192      	b.n	8002ee8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	827b      	strh	r3, [r7, #18]
 8002bd0:	8a7b      	ldrh	r3, [r7, #18]
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01b      	beq.n	8002c12 <USB_DeactivateEndpoint+0xf6>
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf0:	823b      	strh	r3, [r7, #16]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	8a3b      	ldrh	r3, [r7, #16]
 8002bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c28:	81fb      	strh	r3, [r7, #14]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	441a      	add	r2, r3
 8002c34:	89fb      	ldrh	r3, [r7, #14]
 8002c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]
 8002c4a:	e14d      	b.n	8002ee8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 80a5 	bne.w	8002da0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	843b      	strh	r3, [r7, #32]
 8002c64:	8c3b      	ldrh	r3, [r7, #32]
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01b      	beq.n	8002ca6 <USB_DeactivateEndpoint+0x18a>
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c84:	83fb      	strh	r3, [r7, #30]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	441a      	add	r2, r3
 8002c90:	8bfb      	ldrh	r3, [r7, #30]
 8002c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	83bb      	strh	r3, [r7, #28]
 8002cb4:	8bbb      	ldrh	r3, [r7, #28]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01b      	beq.n	8002cf6 <USB_DeactivateEndpoint+0x1da>
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd4:	837b      	strh	r3, [r7, #26]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	441a      	add	r2, r3
 8002ce0:	8b7b      	ldrh	r3, [r7, #26]
 8002ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0c:	833b      	strh	r3, [r7, #24]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	8b3b      	ldrh	r3, [r7, #24]
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d44:	82fb      	strh	r3, [r7, #22]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	8afb      	ldrh	r3, [r7, #22]
 8002d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7c:	82bb      	strh	r3, [r7, #20]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	8abb      	ldrh	r3, [r7, #20]
 8002d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	8013      	strh	r3, [r2, #0]
 8002d9e:	e0a3      	b.n	8002ee8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002dae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01b      	beq.n	8002df0 <USB_DeactivateEndpoint+0x2d4>
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002dfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <USB_DeactivateEndpoint+0x324>
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3734      	adds	r7, #52	; 0x34
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b0c2      	sub	sp, #264	; 0x108
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f04:	6018      	str	r0, [r3, #0]
 8002f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f0e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	f040 86b7 	bne.w	8003c90 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d908      	bls.n	8002f50 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8002f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f4e:	e007      	b.n	8002f60 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8002f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	7b1b      	ldrb	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d13a      	bne.n	8002fe6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6959      	ldr	r1, [r3, #20]
 8002f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	88da      	ldrh	r2, [r3, #6]
 8002f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002f92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8002f96:	6800      	ldr	r0, [r0, #0]
 8002f98:	f001 fc98 	bl	80048cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	00da      	lsls	r2, r3, #3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	f000 be1f 	b.w	8003c24 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8002fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	78db      	ldrb	r3, [r3, #3]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	f040 8462 	bne.w	80038bc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8002ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	429a      	cmp	r2, r3
 8003012:	f240 83df 	bls.w	80037d4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800301a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800304e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800305e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003066:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	b29b      	uxth	r3, r3
 8003070:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003082:	1ad2      	subs	r2, r2, r3
 8003084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800309e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 81c7 	beq.w	8003446 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80030b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
 80030c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d177      	bne.n	80031c4 <USB_EPStartXfer+0x2ce>
 80030d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	4413      	add	r3, r2
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	00da      	lsls	r2, r3, #3
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	4413      	add	r3, r2
 800310a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800311a:	b29a      	uxth	r2, r3
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003124:	2b3e      	cmp	r3, #62	; 0x3e
 8003126:	d921      	bls.n	800316c <USB_EPStartXfer+0x276>
 8003128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2b00      	cmp	r3, #0
 800313c:	d104      	bne.n	8003148 <USB_EPStartXfer+0x252>
 800313e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003142:	3b01      	subs	r3, #1
 8003144:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29a      	uxth	r2, r3
 800314e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003152:	b29b      	uxth	r3, r3
 8003154:	029b      	lsls	r3, r3, #10
 8003156:	b29b      	uxth	r3, r3
 8003158:	4313      	orrs	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003164:	b29a      	uxth	r2, r3
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	e050      	b.n	800320e <USB_EPStartXfer+0x318>
 800316c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <USB_EPStartXfer+0x294>
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003182:	b29a      	uxth	r2, r3
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	801a      	strh	r2, [r3, #0]
 8003188:	e041      	b.n	800320e <USB_EPStartXfer+0x318>
 800318a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <USB_EPStartXfer+0x2b4>
 80031a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80031a4:	3301      	adds	r3, #1
 80031a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	029b      	lsls	r3, r3, #10
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b29a      	uxth	r2, r3
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	e024      	b.n	800320e <USB_EPStartXfer+0x318>
 80031c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d11c      	bne.n	800320e <USB_EPStartXfer+0x318>
 80031d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	4413      	add	r3, r2
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
 80031ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	00da      	lsls	r2, r3, #3
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	4413      	add	r3, r2
 80031fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003208:	b29a      	uxth	r2, r3
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800320e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	895b      	ldrh	r3, [r3, #10]
 800321a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800321e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6959      	ldr	r1, [r3, #20]
 800322a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800322e:	b29b      	uxth	r3, r3
 8003230:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003234:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003238:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800323c:	6800      	ldr	r0, [r0, #0]
 800323e:	f001 fb45 	bl	80048cc <USB_WritePMA>
            ep->xfer_buff += len;
 8003242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003252:	441a      	add	r2, r3
 8003254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a1a      	ldr	r2, [r3, #32]
 800326c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d90f      	bls.n	800329c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800327c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800328c:	1ad2      	subs	r2, r2, r3
 800328e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	621a      	str	r2, [r3, #32]
 800329a:	e00e      	b.n	80032ba <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800329c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80032ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80032ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d177      	bne.n	80033ba <USB_EPStartXfer+0x4c4>
 80032ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	00da      	lsls	r2, r3, #3
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	4413      	add	r3, r2
 8003300:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003310:	b29a      	uxth	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800331a:	2b3e      	cmp	r3, #62	; 0x3e
 800331c:	d921      	bls.n	8003362 <USB_EPStartXfer+0x46c>
 800331e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <USB_EPStartXfer+0x448>
 8003334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003338:	3b01      	subs	r3, #1
 800333a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29a      	uxth	r2, r3
 8003344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003348:	b29b      	uxth	r3, r3
 800334a:	029b      	lsls	r3, r3, #10
 800334c:	b29b      	uxth	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800335a:	b29a      	uxth	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	e056      	b.n	8003410 <USB_EPStartXfer+0x51a>
 8003362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <USB_EPStartXfer+0x48a>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003378:	b29a      	uxth	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	e047      	b.n	8003410 <USB_EPStartXfer+0x51a>
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800338a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <USB_EPStartXfer+0x4aa>
 8003396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339a:	3301      	adds	r3, #1
 800339c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	029b      	lsls	r3, r3, #10
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	e02a      	b.n	8003410 <USB_EPStartXfer+0x51a>
 80033ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d122      	bne.n	8003410 <USB_EPStartXfer+0x51a>
 80033ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	623b      	str	r3, [r7, #32]
 80033d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	4413      	add	r3, r2
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	00da      	lsls	r2, r3, #3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	4413      	add	r3, r2
 8003400:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340a:	b29a      	uxth	r2, r3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	891b      	ldrh	r3, [r3, #8]
 800341c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6959      	ldr	r1, [r3, #20]
 800342c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003430:	b29b      	uxth	r3, r3
 8003432:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003436:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800343a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	f001 fa44 	bl	80048cc <USB_WritePMA>
 8003444:	e3ee      	b.n	8003c24 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800344a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d177      	bne.n	8003546 <USB_EPStartXfer+0x650>
 8003456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800345a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	64bb      	str	r3, [r7, #72]	; 0x48
 8003462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003476:	4413      	add	r3, r2
 8003478:	64bb      	str	r3, [r7, #72]	; 0x48
 800347a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800347e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	00da      	lsls	r2, r3, #3
 8003488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348a:	4413      	add	r3, r2
 800348c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
 8003492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349c:	b29a      	uxth	r2, r3
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034a6:	2b3e      	cmp	r3, #62	; 0x3e
 80034a8:	d921      	bls.n	80034ee <USB_EPStartXfer+0x5f8>
 80034aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80034b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <USB_EPStartXfer+0x5d4>
 80034c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034c4:	3b01      	subs	r3, #1
 80034c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80034ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	e056      	b.n	800359c <USB_EPStartXfer+0x6a6>
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <USB_EPStartXfer+0x616>
 80034f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003504:	b29a      	uxth	r2, r3
 8003506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	e047      	b.n	800359c <USB_EPStartXfer+0x6a6>
 800350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <USB_EPStartXfer+0x636>
 8003522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003526:	3301      	adds	r3, #1
 8003528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003536:	b29b      	uxth	r3, r3
 8003538:	029b      	lsls	r3, r3, #10
 800353a:	b29b      	uxth	r3, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	b29a      	uxth	r2, r3
 8003540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003542:	801a      	strh	r2, [r3, #0]
 8003544:	e02a      	b.n	800359c <USB_EPStartXfer+0x6a6>
 8003546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800354a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d122      	bne.n	800359c <USB_EPStartXfer+0x6a6>
 8003556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800355a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
 8003562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003576:	4413      	add	r3, r2
 8003578:	653b      	str	r3, [r7, #80]	; 0x50
 800357a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800357e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	00da      	lsls	r2, r3, #3
 8003588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358a:	4413      	add	r3, r2
 800358c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003596:	b29a      	uxth	r2, r3
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800359c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	891b      	ldrh	r3, [r3, #8]
 80035a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80035ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6959      	ldr	r1, [r3, #20]
 80035b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80035c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80035c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	f001 f97e 	bl	80048cc <USB_WritePMA>
            ep->xfer_buff += len;
 80035d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035e0:	441a      	add	r2, r3
 80035e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80035ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	429a      	cmp	r2, r3
 8003608:	d90f      	bls.n	800362a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800360a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800360e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800361a:	1ad2      	subs	r2, r2, r3
 800361c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	621a      	str	r2, [r3, #32]
 8003628:	e00e      	b.n	8003648 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800362a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800362e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800363a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800363e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2200      	movs	r2, #0
 8003646:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800364c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
 8003654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d177      	bne.n	8003754 <USB_EPStartXfer+0x85e>
 8003664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	4413      	add	r3, r2
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38
 8003688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800368c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00da      	lsls	r2, r3, #3
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	4413      	add	r3, r2
 800369a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b4:	2b3e      	cmp	r3, #62	; 0x3e
 80036b6:	d921      	bls.n	80036fc <USB_EPStartXfer+0x806>
 80036b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <USB_EPStartXfer+0x7e2>
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80036d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	e050      	b.n	800379e <USB_EPStartXfer+0x8a8>
 80036fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <USB_EPStartXfer+0x824>
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003712:	b29a      	uxth	r2, r3
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	e041      	b.n	800379e <USB_EPStartXfer+0x8a8>
 800371a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <USB_EPStartXfer+0x844>
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	3301      	adds	r3, #1
 8003736:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29a      	uxth	r2, r3
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	b29b      	uxth	r3, r3
 8003746:	029b      	lsls	r3, r3, #10
 8003748:	b29b      	uxth	r3, r3
 800374a:	4313      	orrs	r3, r2
 800374c:	b29a      	uxth	r2, r3
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	e024      	b.n	800379e <USB_EPStartXfer+0x8a8>
 8003754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d11c      	bne.n	800379e <USB_EPStartXfer+0x8a8>
 8003764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003778:	4413      	add	r3, r2
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
 800377c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	00da      	lsls	r2, r3, #3
 800378a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378c:	4413      	add	r3, r2
 800378e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003798:	b29a      	uxth	r2, r3
 800379a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800379e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	895b      	ldrh	r3, [r3, #10]
 80037aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6959      	ldr	r1, [r3, #20]
 80037ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80037c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80037c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80037cc:	6800      	ldr	r0, [r0, #0]
 80037ce:	f001 f87d 	bl	80048cc <USB_WritePMA>
 80037d2:	e227      	b.n	8003c24 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80037d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80037e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800380e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800381c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800382c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800384c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385a:	b29b      	uxth	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003860:	4413      	add	r3, r2
 8003862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	00da      	lsls	r2, r3, #3
 8003872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003874:	4413      	add	r3, r2
 8003876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800387a:	65bb      	str	r3, [r7, #88]	; 0x58
 800387c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003880:	b29a      	uxth	r2, r3
 8003882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003884:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800388a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	891b      	ldrh	r3, [r3, #8]
 8003892:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800389a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6959      	ldr	r1, [r3, #20]
 80038a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80038ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80038b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80038b4:	6800      	ldr	r0, [r0, #0]
 80038b6:	f001 f809 	bl	80048cc <USB_WritePMA>
 80038ba:	e1b3      	b.n	8003c24 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80038bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038cc:	1ad2      	subs	r2, r2, r3
 80038ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80c6 	beq.w	8003a8e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	673b      	str	r3, [r7, #112]	; 0x70
 800390e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d177      	bne.n	8003a0e <USB_EPStartXfer+0xb18>
 800391e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	66bb      	str	r3, [r7, #104]	; 0x68
 800392a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800392e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003938:	b29b      	uxth	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800393e:	4413      	add	r3, r2
 8003940:	66bb      	str	r3, [r7, #104]	; 0x68
 8003942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	00da      	lsls	r2, r3, #3
 8003950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003952:	4413      	add	r3, r2
 8003954:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003958:	667b      	str	r3, [r7, #100]	; 0x64
 800395a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003964:	b29a      	uxth	r2, r3
 8003966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800396e:	2b3e      	cmp	r3, #62	; 0x3e
 8003970:	d921      	bls.n	80039b6 <USB_EPStartXfer+0xac0>
 8003972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <USB_EPStartXfer+0xa9c>
 8003988:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800398c:	3b01      	subs	r3, #1
 800398e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29a      	uxth	r2, r3
 8003998:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800399c:	b29b      	uxth	r3, r3
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4313      	orrs	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	e050      	b.n	8003a58 <USB_EPStartXfer+0xb62>
 80039b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <USB_EPStartXfer+0xade>
 80039be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	e041      	b.n	8003a58 <USB_EPStartXfer+0xb62>
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <USB_EPStartXfer+0xafe>
 80039ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80039ee:	3301      	adds	r3, #1
 80039f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	029b      	lsls	r3, r3, #10
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	e024      	b.n	8003a58 <USB_EPStartXfer+0xb62>
 8003a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d11c      	bne.n	8003a58 <USB_EPStartXfer+0xb62>
 8003a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a32:	4413      	add	r3, r2
 8003a34:	673b      	str	r3, [r7, #112]	; 0x70
 8003a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	00da      	lsls	r2, r3, #3
 8003a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a46:	4413      	add	r3, r2
 8003a48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	895b      	ldrh	r3, [r3, #10]
 8003a64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6959      	ldr	r1, [r3, #20]
 8003a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003a7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003a82:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003a86:	6800      	ldr	r0, [r0, #0]
 8003a88:	f000 ff20 	bl	80048cc <USB_WritePMA>
 8003a8c:	e0ca      	b.n	8003c24 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d177      	bne.n	8003b8e <USB_EPStartXfer+0xc98>
 8003a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003abe:	4413      	add	r3, r2
 8003ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	00da      	lsls	r2, r3, #3
 8003ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae8:	801a      	strh	r2, [r3, #0]
 8003aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aee:	2b3e      	cmp	r3, #62	; 0x3e
 8003af0:	d921      	bls.n	8003b36 <USB_EPStartXfer+0xc40>
 8003af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <USB_EPStartXfer+0xc1c>
 8003b08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	029b      	lsls	r3, r3, #10
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	4313      	orrs	r3, r2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	e05c      	b.n	8003bf0 <USB_EPStartXfer+0xcfa>
 8003b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <USB_EPStartXfer+0xc5e>
 8003b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e04d      	b.n	8003bf0 <USB_EPStartXfer+0xcfa>
 8003b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <USB_EPStartXfer+0xc7e>
 8003b6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	029b      	lsls	r3, r3, #10
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	e030      	b.n	8003bf0 <USB_EPStartXfer+0xcfa>
 8003b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d128      	bne.n	8003bf0 <USB_EPStartXfer+0xcfa>
 8003b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	00da      	lsls	r2, r3, #3
 8003bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bda:	4413      	add	r3, r2
 8003bdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	891b      	ldrh	r3, [r3, #8]
 8003bfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6959      	ldr	r1, [r3, #20]
 8003c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003c16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003c1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003c1e:	6800      	ldr	r0, [r0, #0]
 8003c20:	f000 fe54 	bl	80048cc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4a:	817b      	strh	r3, [r7, #10]
 8003c4c:	897b      	ldrh	r3, [r7, #10]
 8003c4e:	f083 0310 	eor.w	r3, r3, #16
 8003c52:	817b      	strh	r3, [r7, #10]
 8003c54:	897b      	ldrh	r3, [r7, #10]
 8003c56:	f083 0320 	eor.w	r3, r3, #32
 8003c5a:	817b      	strh	r3, [r7, #10]
 8003c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	897b      	ldrh	r3, [r7, #10]
 8003c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	8013      	strh	r3, [r2, #0]
 8003c8c:	f000 bcde 	b.w	800464c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	7b1b      	ldrb	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 80bb 	bne.w	8003e18 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d917      	bls.n	8003cee <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8003cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8003cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	619a      	str	r2, [r3, #24]
 8003cec:	e00e      	b.n	8003d0c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8003cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8003cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d30:	4413      	add	r3, r2
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	00da      	lsls	r2, r3, #3
 8003d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d48:	4413      	add	r3, r2
 8003d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d6c:	d924      	bls.n	8003db8 <USB_EPStartXfer+0xec2>
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <USB_EPStartXfer+0xe98>
 8003d84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	4313      	orrs	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	f000 bc10 	b.w	80045d8 <USB_EPStartXfer+0x16e2>
 8003db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10c      	bne.n	8003dda <USB_EPStartXfer+0xee4>
 8003dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	e3fe      	b.n	80045d8 <USB_EPStartXfer+0x16e2>
 8003dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <USB_EPStartXfer+0xf04>
 8003df0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003df4:	3301      	adds	r3, #1
 8003df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	029b      	lsls	r3, r3, #10
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	e3df      	b.n	80045d8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	f040 8218 	bne.w	800425a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	785b      	ldrb	r3, [r3, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 809d 	bne.w	8003f76 <USB_EPStartXfer+0x1080>
 8003e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e60:	4413      	add	r3, r2
 8003e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	00da      	lsls	r2, r3, #3
 8003e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e78:	4413      	add	r3, r2
 8003e7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ea4:	d92b      	bls.n	8003efe <USB_EPStartXfer+0x1008>
 8003ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <USB_EPStartXfer+0xfe0>
 8003ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	029b      	lsls	r3, r3, #10
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003efa:	801a      	strh	r2, [r3, #0]
 8003efc:	e070      	b.n	8003fe0 <USB_EPStartXfer+0x10ea>
 8003efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10c      	bne.n	8003f28 <USB_EPStartXfer+0x1032>
 8003f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e05b      	b.n	8003fe0 <USB_EPStartXfer+0x10ea>
 8003f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <USB_EPStartXfer+0x1062>
 8003f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f52:	3301      	adds	r3, #1
 8003f54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	029b      	lsls	r3, r3, #10
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	e034      	b.n	8003fe0 <USB_EPStartXfer+0x10ea>
 8003f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d12c      	bne.n	8003fe0 <USB_EPStartXfer+0x10ea>
 8003f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003faa:	4413      	add	r3, r2
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	00da      	lsls	r2, r3, #3
 8003fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 809d 	bne.w	800413a <USB_EPStartXfer+0x1244>
 8004000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800400e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004024:	4413      	add	r3, r2
 8004026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800402a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800402e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	00da      	lsls	r2, r3, #3
 8004038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800403c:	4413      	add	r3, r2
 800403e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004042:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004046:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004052:	b29a      	uxth	r2, r3
 8004054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800405e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b3e      	cmp	r3, #62	; 0x3e
 8004068:	d92b      	bls.n	80040c2 <USB_EPStartXfer+0x11cc>
 800406a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800406e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800407c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <USB_EPStartXfer+0x11a4>
 8004090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004094:	3b01      	subs	r3, #1
 8004096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800409a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	4313      	orrs	r3, r2
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040be:	801a      	strh	r2, [r3, #0]
 80040c0:	e069      	b.n	8004196 <USB_EPStartXfer+0x12a0>
 80040c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10c      	bne.n	80040ec <USB_EPStartXfer+0x11f6>
 80040d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	e054      	b.n	8004196 <USB_EPStartXfer+0x12a0>
 80040ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d004      	beq.n	800411c <USB_EPStartXfer+0x1226>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004116:	3301      	adds	r3, #1
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800411c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29a      	uxth	r2, r3
 8004124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004128:	b29b      	uxth	r3, r3
 800412a:	029b      	lsls	r3, r3, #10
 800412c:	b29b      	uxth	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	b29a      	uxth	r2, r3
 8004132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	e02d      	b.n	8004196 <USB_EPStartXfer+0x12a0>
 800413a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800413e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	785b      	ldrb	r3, [r3, #1]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d125      	bne.n	8004196 <USB_EPStartXfer+0x12a0>
 800414a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800414e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004160:	4413      	add	r3, r2
 8004162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800416a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00da      	lsls	r2, r3, #3
 8004174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004178:	4413      	add	r3, r2
 800417a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800417e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	b29a      	uxth	r2, r3
 8004190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004194:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800419a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8218 	beq.w	80045d8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80041a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80041c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80041cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <USB_EPStartXfer+0x12ea>
 80041d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80041e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80041e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 81f5 	bne.w	80045d8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80041ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 81ee 	bne.w	80045d8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80041fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800420a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800422a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004250:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
 8004258:	e1be      	b.n	80045d8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800425a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800425e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	78db      	ldrb	r3, [r3, #3]
 8004266:	2b01      	cmp	r3, #1
 8004268:	f040 81b4 	bne.w	80045d4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800426c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800427c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d917      	bls.n	80042b8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800428c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800429c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a8:	1ad2      	subs	r2, r2, r3
 80042aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	619a      	str	r2, [r3, #24]
 80042b6:	e00e      	b.n	80042d6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80042b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80042c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80042d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f040 8085 	bne.w	80043f2 <USB_EPStartXfer+0x14fc>
 80042e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004304:	b29b      	uxth	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800430c:	4413      	add	r3, r2
 800430e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	00da      	lsls	r2, r3, #3
 8004320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004324:	4413      	add	r3, r2
 8004326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800432a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800432e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433a:	b29a      	uxth	r2, r3
 800433c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004346:	2b3e      	cmp	r3, #62	; 0x3e
 8004348:	d923      	bls.n	8004392 <USB_EPStartXfer+0x149c>
 800434a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <USB_EPStartXfer+0x1474>
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004364:	3b01      	subs	r3, #1
 8004366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800436a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29a      	uxth	r2, r3
 8004372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004376:	b29b      	uxth	r3, r3
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	b29b      	uxth	r3, r3
 800437c:	4313      	orrs	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004388:	b29a      	uxth	r2, r3
 800438a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	e060      	b.n	8004454 <USB_EPStartXfer+0x155e>
 8004392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <USB_EPStartXfer+0x14be>
 800439a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043b0:	801a      	strh	r2, [r3, #0]
 80043b2:	e04f      	b.n	8004454 <USB_EPStartXfer+0x155e>
 80043b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <USB_EPStartXfer+0x14de>
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	3301      	adds	r3, #1
 80043d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	029b      	lsls	r3, r3, #10
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	e030      	b.n	8004454 <USB_EPStartXfer+0x155e>
 80043f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d128      	bne.n	8004454 <USB_EPStartXfer+0x155e>
 8004402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441e:	b29b      	uxth	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004426:	4413      	add	r3, r2
 8004428:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800442c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	00da      	lsls	r2, r3, #3
 800443a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800443e:	4413      	add	r3, r2
 8004440:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800444c:	b29a      	uxth	r2, r3
 800444e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 8085 	bne.w	800457e <USB_EPStartXfer+0x1688>
 8004474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004490:	b29b      	uxth	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004498:	4413      	add	r3, r2
 800449a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800449e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	00da      	lsls	r2, r3, #3
 80044ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044b0:	4413      	add	r3, r2
 80044b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d2:	2b3e      	cmp	r3, #62	; 0x3e
 80044d4:	d923      	bls.n	800451e <USB_EPStartXfer+0x1628>
 80044d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <USB_EPStartXfer+0x1600>
 80044ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f0:	3b01      	subs	r3, #1
 80044f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004502:	b29b      	uxth	r3, r3
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	b29b      	uxth	r3, r3
 8004508:	4313      	orrs	r3, r2
 800450a:	b29b      	uxth	r3, r3
 800450c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004514:	b29a      	uxth	r2, r3
 8004516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e05c      	b.n	80045d8 <USB_EPStartXfer+0x16e2>
 800451e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <USB_EPStartXfer+0x164a>
 8004526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004536:	b29a      	uxth	r2, r3
 8004538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e04b      	b.n	80045d8 <USB_EPStartXfer+0x16e2>
 8004540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <USB_EPStartXfer+0x166a>
 8004556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800455a:	3301      	adds	r3, #1
 800455c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29a      	uxth	r2, r3
 8004568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456c:	b29b      	uxth	r3, r3
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	b29b      	uxth	r3, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	b29a      	uxth	r2, r3
 8004576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800457a:	801a      	strh	r2, [r3, #0]
 800457c:	e02c      	b.n	80045d8 <USB_EPStartXfer+0x16e2>
 800457e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d124      	bne.n	80045d8 <USB_EPStartXfer+0x16e2>
 800458e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045a4:	4413      	add	r3, r2
 80045a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	00da      	lsls	r2, r3, #3
 80045b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045bc:	4413      	add	r3, r2
 80045be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	e001      	b.n	80045d8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e03a      	b.n	800464e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004602:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004606:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800460a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800460e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004612:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004616:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800461a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800461e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004648:	b29b      	uxth	r3, r3
 800464a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004680:	81bb      	strh	r3, [r7, #12]
 8004682:	89bb      	ldrh	r3, [r7, #12]
 8004684:	f083 0310 	eor.w	r3, r3, #16
 8004688:	81bb      	strh	r3, [r7, #12]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	89bb      	ldrh	r3, [r7, #12]
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]
 80046aa:	e01f      	b.n	80046ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	81fb      	strh	r3, [r7, #14]
 80046c4:	89fb      	ldrh	r3, [r7, #14]
 80046c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046ca:	81fb      	strh	r3, [r7, #14]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	89fb      	ldrh	r3, [r7, #14]
 80046d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b087      	sub	sp, #28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	7b1b      	ldrb	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 809d 	bne.w	8004848 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04c      	beq.n	80047b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	823b      	strh	r3, [r7, #16]
 8004724:	8a3b      	ldrh	r3, [r7, #16]
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01b      	beq.n	8004766 <USB_EPClearStall+0x6c>
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	81fb      	strh	r3, [r7, #14]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	78db      	ldrb	r3, [r3, #3]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d06c      	beq.n	8004848 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004784:	81bb      	strh	r3, [r7, #12]
 8004786:	89bb      	ldrh	r3, [r7, #12]
 8004788:	f083 0320 	eor.w	r3, r3, #32
 800478c:	81bb      	strh	r3, [r7, #12]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	89bb      	ldrh	r3, [r7, #12]
 800479a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	8013      	strh	r3, [r2, #0]
 80047ae:	e04b      	b.n	8004848 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	82fb      	strh	r3, [r7, #22]
 80047be:	8afb      	ldrh	r3, [r7, #22]
 80047c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01b      	beq.n	8004800 <USB_EPClearStall+0x106>
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	82bb      	strh	r3, [r7, #20]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	8abb      	ldrh	r3, [r7, #20]
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	827b      	strh	r3, [r7, #18]
 8004818:	8a7b      	ldrh	r3, [r7, #18]
 800481a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800481e:	827b      	strh	r3, [r7, #18]
 8004820:	8a7b      	ldrh	r3, [r7, #18]
 8004822:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004826:	827b      	strh	r3, [r7, #18]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	8a7b      	ldrh	r3, [r7, #18]
 8004834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004844:	b29b      	uxth	r3, r3
 8004846:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800488c:	b29b      	uxth	r3, r3
 800488e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80048be:	68fb      	ldr	r3, [r7, #12]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b08b      	sub	sp, #44	; 0x2c
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	4611      	mov	r1, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	460b      	mov	r3, r1
 80048dc:	80fb      	strh	r3, [r7, #6]
 80048de:	4613      	mov	r3, r2
 80048e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80048e2:	88bb      	ldrh	r3, [r7, #4]
 80048e4:	3301      	adds	r3, #1
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
 8004902:	e01b      	b.n	800493c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3301      	adds	r3, #1
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	b21a      	sxth	r2, r3
 8004914:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004918:	4313      	orrs	r3, r2
 800491a:	b21b      	sxth	r3, r3
 800491c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	8a7a      	ldrh	r2, [r7, #18]
 8004922:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	3302      	adds	r3, #2
 8004928:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	3b01      	subs	r3, #1
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e0      	bne.n	8004904 <USB_WritePMA+0x38>
  }
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	372c      	adds	r7, #44	; 0x2c
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004950:	b480      	push	{r7}
 8004952:	b08b      	sub	sp, #44	; 0x2c
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	460b      	mov	r3, r1
 8004960:	80fb      	strh	r3, [r7, #6]
 8004962:	4613      	mov	r3, r2
 8004964:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004966:	88bb      	ldrh	r3, [r7, #4]
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	b29b      	uxth	r3, r3
 800496c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004980:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	e018      	b.n	80049ba <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	3302      	adds	r3, #2
 8004994:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3b01      	subs	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e3      	bne.n	8004988 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80049c0:	88bb      	ldrh	r3, [r7, #4]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	701a      	strb	r2, [r3, #0]
  }
}
 80049dc:	bf00      	nop
 80049de:	372c      	adds	r7, #44	; 0x2c
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80049f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80049f8:	f002 f8a6 	bl	8006b48 <USBD_static_malloc>
 80049fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e066      	b.n	8004ade <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7c1b      	ldrb	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d119      	bne.n	8004a54 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a24:	2202      	movs	r2, #2
 8004a26:	2181      	movs	r1, #129	; 0x81
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f001 ff34 	bl	8006896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a38:	2202      	movs	r2, #2
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 ff2a 	bl	8006896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004a52:	e016      	b.n	8004a82 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	2202      	movs	r2, #2
 8004a58:	2181      	movs	r1, #129	; 0x81
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f001 ff1b 	bl	8006896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	2202      	movs	r2, #2
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 ff12 	bl	8006896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2210      	movs	r2, #16
 8004a7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a82:	2308      	movs	r3, #8
 8004a84:	2203      	movs	r2, #3
 8004a86:	2182      	movs	r1, #130	; 0x82
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f001 ff04 	bl	8006896 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7c1b      	ldrb	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f001 ffd5 	bl	8006a74 <USBD_LL_PrepareReceive>
 8004aca:	e007      	b.n	8004adc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 ffcc 	bl	8006a74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004af2:	2181      	movs	r1, #129	; 0x81
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f001 fef4 	bl	80068e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b00:	2101      	movs	r1, #1
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f001 feed 	bl	80068e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b10:	2182      	movs	r1, #130	; 0x82
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f001 fee5 	bl	80068e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00e      	beq.n	8004b50 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 f80e 	bl	8006b64 <USBD_static_free>
    pdev->pClassData = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0af      	b.n	8004ce4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03f      	beq.n	8004c10 <USBD_CDC_Setup+0xb4>
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	f040 809f 	bne.w	8004cd4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	88db      	ldrh	r3, [r3, #6]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02e      	beq.n	8004bfc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b25b      	sxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	da16      	bge.n	8004bd6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004bb4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	88d2      	ldrh	r2, [r2, #6]
 8004bba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	88db      	ldrh	r3, [r3, #6]
 8004bc0:	2b07      	cmp	r3, #7
 8004bc2:	bf28      	it	cs
 8004bc4:	2307      	movcs	r3, #7
 8004bc6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	89fa      	ldrh	r2, [r7, #14]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fa9f 	bl	8006112 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004bd4:	e085      	b.n	8004ce2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	785a      	ldrb	r2, [r3, #1]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	88db      	ldrh	r3, [r3, #6]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004bec:	6939      	ldr	r1, [r7, #16]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	88db      	ldrh	r3, [r3, #6]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 fab8 	bl	800616a <USBD_CtlPrepareRx>
      break;
 8004bfa:	e072      	b.n	8004ce2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	7850      	ldrb	r0, [r2, #1]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	6839      	ldr	r1, [r7, #0]
 8004c0c:	4798      	blx	r3
      break;
 8004c0e:	e068      	b.n	8004ce2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b0b      	cmp	r3, #11
 8004c16:	d852      	bhi.n	8004cbe <USBD_CDC_Setup+0x162>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <USBD_CDC_Setup+0xc4>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c51 	.word	0x08004c51
 8004c24:	08004ccd 	.word	0x08004ccd
 8004c28:	08004cbf 	.word	0x08004cbf
 8004c2c:	08004cbf 	.word	0x08004cbf
 8004c30:	08004cbf 	.word	0x08004cbf
 8004c34:	08004cbf 	.word	0x08004cbf
 8004c38:	08004cbf 	.word	0x08004cbf
 8004c3c:	08004cbf 	.word	0x08004cbf
 8004c40:	08004cbf 	.word	0x08004cbf
 8004c44:	08004cbf 	.word	0x08004cbf
 8004c48:	08004c7b 	.word	0x08004c7b
 8004c4c:	08004ca5 	.word	0x08004ca5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d107      	bne.n	8004c6c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c5c:	f107 030a 	add.w	r3, r7, #10
 8004c60:	2202      	movs	r2, #2
 8004c62:	4619      	mov	r1, r3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fa54 	bl	8006112 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c6a:	e032      	b.n	8004cd2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 f9de 	bl	8006030 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c74:	2303      	movs	r3, #3
 8004c76:	75fb      	strb	r3, [r7, #23]
          break;
 8004c78:	e02b      	b.n	8004cd2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d107      	bne.n	8004c96 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c86:	f107 030d 	add.w	r3, r7, #13
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 fa3f 	bl	8006112 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c94:	e01d      	b.n	8004cd2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f001 f9c9 	bl	8006030 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ca2:	e016      	b.n	8004cd2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d00f      	beq.n	8004cd0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 f9bc 	bl	8006030 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004cbc:	e008      	b.n	8004cd0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 f9b5 	bl	8006030 <USBD_CtlError>
          ret = USBD_FAIL;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8004cca:	e002      	b.n	8004cd2 <USBD_CDC_Setup+0x176>
          break;
 8004ccc:	bf00      	nop
 8004cce:	e008      	b.n	8004ce2 <USBD_CDC_Setup+0x186>
          break;
 8004cd0:	bf00      	nop
      }
      break;
 8004cd2:	e006      	b.n	8004ce2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 f9aa 	bl	8006030 <USBD_CtlError>
      ret = USBD_FAIL;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce0:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004cfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e04f      	b.n	8004dae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	3318      	adds	r3, #24
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d029      	beq.n	8004d80 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	78f9      	ldrb	r1, [r7, #3]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	460b      	mov	r3, r1
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4403      	add	r3, r0
 8004d4c:	3320      	adds	r3, #32
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d110      	bne.n	8004d80 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	3318      	adds	r3, #24
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d72:	78f9      	ldrb	r1, [r7, #3]
 8004d74:	2300      	movs	r3, #0
 8004d76:	2200      	movs	r2, #0
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f001 fe5a 	bl	8006a32 <USBD_LL_Transmit>
 8004d7e:	e015      	b.n	8004dac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e015      	b.n	8004e04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 fe6a 	bl	8006ab6 <USBD_LL_GetRxDataSize>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e01b      	b.n	8004e5e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d015      	beq.n	8004e5c <USBD_CDC_EP0_RxReady+0x50>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e36:	2bff      	cmp	r3, #255	; 0xff
 8004e38:	d010      	beq.n	8004e5c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004e48:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e50:	b292      	uxth	r2, r2
 8004e52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	22ff      	movs	r2, #255	; 0xff
 8004e58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2243      	movs	r2, #67	; 0x43
 8004e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004e76:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	2000008c 	.word	0x2000008c

08004e88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2243      	movs	r2, #67	; 0x43
 8004e94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004e96:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000048 	.word	0x20000048

08004ea8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2243      	movs	r2, #67	; 0x43
 8004eb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004eb6:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	200000d0 	.word	0x200000d0

08004ec8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ed6:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000004 	.word	0x20000004

08004ee8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e004      	b.n	8004f06 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b087      	sub	sp, #28
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f24:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e008      	b.n	8004f42 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e004      	b.n	8004f74 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e016      	b.n	8004fcc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7c1b      	ldrb	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 fd5e 	bl	8006a74 <USBD_LL_PrepareReceive>
 8004fb8:	e007      	b.n	8004fca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fd55 	bl	8006a74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e01f      	b.n	800502c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	79fa      	ldrb	r2, [r7, #7]
 800501e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f001 fbbd 	bl	80067a0 <USBD_LL_Init>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]

  return ret;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005048:	2303      	movs	r3, #3
 800504a:	e016      	b.n	800507a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00b      	beq.n	8005078 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	f107 020e 	add.w	r2, r7, #14
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
 8005070:	4602      	mov	r2, r0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f001 fbe8 	bl	8006860 <USBD_LL_Start>
 8005090:	4603      	mov	r3, r0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80050bc:	2303      	movs	r3, #3
 80050be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	4611      	mov	r1, r2
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
 80050da:	4603      	mov	r3, r0
 80050dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	4611      	mov	r1, r2
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
  }

  return USBD_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 ff46 	bl	8005fbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2b02      	cmp	r3, #2
 8005152:	d01a      	beq.n	800518a <USBD_LL_SetupStage+0x72>
 8005154:	2b02      	cmp	r3, #2
 8005156:	d822      	bhi.n	800519e <USBD_LL_SetupStage+0x86>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <USBD_LL_SetupStage+0x4a>
 800515c:	2b01      	cmp	r3, #1
 800515e:	d00a      	beq.n	8005176 <USBD_LL_SetupStage+0x5e>
 8005160:	e01d      	b.n	800519e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f9ee 	bl	800554c <USBD_StdDevReq>
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	e020      	b.n	80051b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa52 	bl	8005628 <USBD_StdItfReq>
 8005184:	4603      	mov	r3, r0
 8005186:	73fb      	strb	r3, [r7, #15]
      break;
 8005188:	e016      	b.n	80051b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa91 	bl	80056ba <USBD_StdEPReq>
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e00c      	b.n	80051b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 fbb7 	bl	8006920 <USBD_LL_StallEP>
 80051b2:	4603      	mov	r3, r0
 80051b4:	73fb      	strb	r3, [r7, #15]
      break;
 80051b6:	bf00      	nop
  }

  return ret;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	460b      	mov	r3, r1
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d138      	bne.n	8005248 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80051dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d14a      	bne.n	800527e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d913      	bls.n	800521c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	1ad2      	subs	r2, r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	4293      	cmp	r3, r2
 800520c:	bf28      	it	cs
 800520e:	4613      	movcs	r3, r2
 8005210:	461a      	mov	r2, r3
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 ffc5 	bl	80061a4 <USBD_CtlContinueRx>
 800521a:	e030      	b.n	800527e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b03      	cmp	r3, #3
 8005226:	d10b      	bne.n	8005240 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 ffc0 	bl	80061c6 <USBD_CtlSendStatus>
 8005246:	e01a      	b.n	800527e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b03      	cmp	r3, #3
 8005252:	d114      	bne.n	800527e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	7afa      	ldrb	r2, [r7, #11]
 800526a:	4611      	mov	r1, r2
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	4798      	blx	r3
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005274:	7dfb      	ldrb	r3, [r7, #23]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	e000      	b.n	8005280 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	460b      	mov	r3, r1
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d16b      	bne.n	8005374 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3314      	adds	r3, #20
 80052a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d156      	bne.n	800535a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d914      	bls.n	80052e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	461a      	mov	r2, r3
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 ff3a 	bl	8006148 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052d4:	2300      	movs	r3, #0
 80052d6:	2200      	movs	r2, #0
 80052d8:	2100      	movs	r1, #0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f001 fbca 	bl	8006a74 <USBD_LL_PrepareReceive>
 80052e0:	e03b      	b.n	800535a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11c      	bne.n	8005328 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d316      	bcc.n	8005328 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005304:	429a      	cmp	r2, r3
 8005306:	d20f      	bcs.n	8005328 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005308:	2200      	movs	r2, #0
 800530a:	2100      	movs	r1, #0
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 ff1b 	bl	8006148 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800531a:	2300      	movs	r3, #0
 800531c:	2200      	movs	r2, #0
 800531e:	2100      	movs	r1, #0
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f001 fba7 	bl	8006a74 <USBD_LL_PrepareReceive>
 8005326:	e018      	b.n	800535a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b03      	cmp	r3, #3
 8005332:	d10b      	bne.n	800534c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800534c:	2180      	movs	r1, #128	; 0x80
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f001 fae6 	bl	8006920 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 ff49 	bl	80061ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005360:	2b01      	cmp	r3, #1
 8005362:	d122      	bne.n	80053aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff fe98 	bl	800509a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005372:	e01a      	b.n	80053aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d114      	bne.n	80053aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00e      	beq.n	80053aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	7afa      	ldrb	r2, [r7, #11]
 8005396:	4611      	mov	r1, r2
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	4798      	blx	r3
 800539c:	4603      	mov	r3, r0
 800539e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	e000      	b.n	80053ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e02f      	b.n	8005448 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00f      	beq.n	8005412 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d009      	beq.n	8005412 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6852      	ldr	r2, [r2, #4]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	4611      	mov	r1, r2
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	2200      	movs	r2, #0
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f001 fa3c 	bl	8006896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800542e:	2340      	movs	r3, #64	; 0x40
 8005430:	2200      	movs	r2, #0
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fa2e 	bl	8006896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547e:	b2da      	uxtb	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2204      	movs	r2, #4
 800548a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d106      	bne.n	80054be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80054de:	2303      	movs	r3, #3
 80054e0:	e012      	b.n	8005508 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d10b      	bne.n	8005506 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	3301      	adds	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800552e:	8a3b      	ldrh	r3, [r7, #16]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	b21a      	sxth	r2, r3
 8005534:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005538:	4313      	orrs	r3, r2
 800553a:	b21b      	sxth	r3, r3
 800553c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800553e:	89fb      	ldrh	r3, [r7, #14]
}
 8005540:	4618      	mov	r0, r3
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d005      	beq.n	8005572 <USBD_StdDevReq+0x26>
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d853      	bhi.n	8005612 <USBD_StdDevReq+0xc6>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <USBD_StdDevReq+0x3a>
 800556e:	2b20      	cmp	r3, #32
 8005570:	d14f      	bne.n	8005612 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
      break;
 8005584:	e04a      	b.n	800561c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b09      	cmp	r3, #9
 800558c:	d83b      	bhi.n	8005606 <USBD_StdDevReq+0xba>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <USBD_StdDevReq+0x48>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055e9 	.word	0x080055e9
 8005598:	080055fd 	.word	0x080055fd
 800559c:	08005607 	.word	0x08005607
 80055a0:	080055f3 	.word	0x080055f3
 80055a4:	08005607 	.word	0x08005607
 80055a8:	080055c7 	.word	0x080055c7
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	08005607 	.word	0x08005607
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055d1 	.word	0x080055d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9de 	bl	8005980 <USBD_GetDescriptor>
          break;
 80055c4:	e024      	b.n	8005610 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fb6d 	bl	8005ca8 <USBD_SetAddress>
          break;
 80055ce:	e01f      	b.n	8005610 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fbac 	bl	8005d30 <USBD_SetConfig>
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]
          break;
 80055dc:	e018      	b.n	8005610 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fc4b 	bl	8005e7c <USBD_GetConfig>
          break;
 80055e6:	e013      	b.n	8005610 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fc7c 	bl	8005ee8 <USBD_GetStatus>
          break;
 80055f0:	e00e      	b.n	8005610 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fcab 	bl	8005f50 <USBD_SetFeature>
          break;
 80055fa:	e009      	b.n	8005610 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fcba 	bl	8005f78 <USBD_ClrFeature>
          break;
 8005604:	e004      	b.n	8005610 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fd11 	bl	8006030 <USBD_CtlError>
          break;
 800560e:	bf00      	nop
      }
      break;
 8005610:	e004      	b.n	800561c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fd0b 	bl	8006030 <USBD_CtlError>
      break;
 800561a:	bf00      	nop
  }

  return ret;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop

08005628 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d005      	beq.n	800564e <USBD_StdItfReq+0x26>
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d82f      	bhi.n	80056a6 <USBD_StdItfReq+0x7e>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <USBD_StdItfReq+0x26>
 800564a:	2b20      	cmp	r3, #32
 800564c:	d12b      	bne.n	80056a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005654:	b2db      	uxtb	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	2b02      	cmp	r3, #2
 800565a:	d81d      	bhi.n	8005698 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	889b      	ldrh	r3, [r3, #4]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d813      	bhi.n	800568e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	88db      	ldrh	r3, [r3, #6]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d110      	bne.n	80056a2 <USBD_StdItfReq+0x7a>
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10d      	bne.n	80056a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fd9d 	bl	80061c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800568c:	e009      	b.n	80056a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fccd 	bl	8006030 <USBD_CtlError>
          break;
 8005696:	e004      	b.n	80056a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fcc8 	bl	8006030 <USBD_CtlError>
          break;
 80056a0:	e000      	b.n	80056a4 <USBD_StdItfReq+0x7c>
          break;
 80056a2:	bf00      	nop
      }
      break;
 80056a4:	e004      	b.n	80056b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fcc1 	bl	8006030 <USBD_CtlError>
      break;
 80056ae:	bf00      	nop
  }

  return ret;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	889b      	ldrh	r3, [r3, #4]
 80056cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d007      	beq.n	80056ea <USBD_StdEPReq+0x30>
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	f200 8145 	bhi.w	800596a <USBD_StdEPReq+0x2b0>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00c      	beq.n	80056fe <USBD_StdEPReq+0x44>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	f040 8140 	bne.w	800596a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	4798      	blx	r3
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e13a      	b.n	8005974 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d007      	beq.n	8005716 <USBD_StdEPReq+0x5c>
 8005706:	2b03      	cmp	r3, #3
 8005708:	f300 8129 	bgt.w	800595e <USBD_StdEPReq+0x2a4>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d07f      	beq.n	8005810 <USBD_StdEPReq+0x156>
 8005710:	2b01      	cmp	r3, #1
 8005712:	d03c      	beq.n	800578e <USBD_StdEPReq+0xd4>
 8005714:	e123      	b.n	800595e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d002      	beq.n	8005728 <USBD_StdEPReq+0x6e>
 8005722:	2b03      	cmp	r3, #3
 8005724:	d016      	beq.n	8005754 <USBD_StdEPReq+0x9a>
 8005726:	e02c      	b.n	8005782 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005728:	7bbb      	ldrb	r3, [r7, #14]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00d      	beq.n	800574a <USBD_StdEPReq+0x90>
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d00a      	beq.n	800574a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 f8f1 	bl	8006920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f8ed 	bl	8006920 <USBD_LL_StallEP>
 8005746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005748:	e020      	b.n	800578c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fc6f 	bl	8006030 <USBD_CtlError>
              break;
 8005752:	e01b      	b.n	800578c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	885b      	ldrh	r3, [r3, #2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10e      	bne.n	800577a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <USBD_StdEPReq+0xc0>
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d008      	beq.n	800577a <USBD_StdEPReq+0xc0>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	88db      	ldrh	r3, [r3, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 f8d3 	bl	8006920 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fd23 	bl	80061c6 <USBD_CtlSendStatus>

              break;
 8005780:	e004      	b.n	800578c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fc53 	bl	8006030 <USBD_CtlError>
              break;
 800578a:	bf00      	nop
          }
          break;
 800578c:	e0ec      	b.n	8005968 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d002      	beq.n	80057a0 <USBD_StdEPReq+0xe6>
 800579a:	2b03      	cmp	r3, #3
 800579c:	d016      	beq.n	80057cc <USBD_StdEPReq+0x112>
 800579e:	e030      	b.n	8005802 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <USBD_StdEPReq+0x108>
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	2b80      	cmp	r3, #128	; 0x80
 80057aa:	d00a      	beq.n	80057c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057ac:	7bbb      	ldrb	r3, [r7, #14]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 f8b5 	bl	8006920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 f8b1 	bl	8006920 <USBD_LL_StallEP>
 80057be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057c0:	e025      	b.n	800580e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fc33 	bl	8006030 <USBD_CtlError>
              break;
 80057ca:	e020      	b.n	800580e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	885b      	ldrh	r3, [r3, #2]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11b      	bne.n	800580c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80057de:	7bbb      	ldrb	r3, [r7, #14]
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 f8bb 	bl	800695e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fcec 	bl	80061c6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
 80057fc:	4603      	mov	r3, r0
 80057fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005800:	e004      	b.n	800580c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fc13 	bl	8006030 <USBD_CtlError>
              break;
 800580a:	e000      	b.n	800580e <USBD_StdEPReq+0x154>
              break;
 800580c:	bf00      	nop
          }
          break;
 800580e:	e0ab      	b.n	8005968 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d002      	beq.n	8005822 <USBD_StdEPReq+0x168>
 800581c:	2b03      	cmp	r3, #3
 800581e:	d032      	beq.n	8005886 <USBD_StdEPReq+0x1cc>
 8005820:	e097      	b.n	8005952 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <USBD_StdEPReq+0x17e>
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d004      	beq.n	8005838 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fbfd 	bl	8006030 <USBD_CtlError>
                break;
 8005836:	e091      	b.n	800595c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800583c:	2b00      	cmp	r3, #0
 800583e:	da0b      	bge.n	8005858 <USBD_StdEPReq+0x19e>
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3310      	adds	r3, #16
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	e00b      	b.n	8005870 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	3304      	adds	r3, #4
 8005870:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2202      	movs	r2, #2
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fc47 	bl	8006112 <USBD_CtlSendData>
              break;
 8005884:	e06a      	b.n	800595c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800588a:	2b00      	cmp	r3, #0
 800588c:	da11      	bge.n	80058b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	f003 020f 	and.w	r2, r3, #15
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	3324      	adds	r3, #36	; 0x24
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d117      	bne.n	80058d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fbc0 	bl	8006030 <USBD_CtlError>
                  break;
 80058b0:	e054      	b.n	800595c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fbad 	bl	8006030 <USBD_CtlError>
                  break;
 80058d6:	e041      	b.n	800595c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	da0b      	bge.n	80058f8 <USBD_StdEPReq+0x23e>
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	3310      	adds	r3, #16
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	3304      	adds	r3, #4
 80058f6:	e00b      	b.n	8005910 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	3304      	adds	r3, #4
 8005910:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <USBD_StdEPReq+0x264>
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d103      	bne.n	8005926 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e00e      	b.n	8005944 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f836 	bl	800699c <USBD_LL_IsStallEP>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e002      	b.n	8005944 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2202      	movs	r2, #2
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fbe1 	bl	8006112 <USBD_CtlSendData>
              break;
 8005950:	e004      	b.n	800595c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fb6b 	bl	8006030 <USBD_CtlError>
              break;
 800595a:	bf00      	nop
          }
          break;
 800595c:	e004      	b.n	8005968 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fb65 	bl	8006030 <USBD_CtlError>
          break;
 8005966:	bf00      	nop
      }
      break;
 8005968:	e004      	b.n	8005974 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fb5f 	bl	8006030 <USBD_CtlError>
      break;
 8005972:	bf00      	nop
  }

  return ret;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	885b      	ldrh	r3, [r3, #2]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	2b0e      	cmp	r3, #14
 80059a2:	f200 8152 	bhi.w	8005c4a <USBD_GetDescriptor+0x2ca>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <USBD_GetDescriptor+0x2c>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	08005a1d 	.word	0x08005a1d
 80059b0:	08005a35 	.word	0x08005a35
 80059b4:	08005a75 	.word	0x08005a75
 80059b8:	08005c4b 	.word	0x08005c4b
 80059bc:	08005c4b 	.word	0x08005c4b
 80059c0:	08005beb 	.word	0x08005beb
 80059c4:	08005c17 	.word	0x08005c17
 80059c8:	08005c4b 	.word	0x08005c4b
 80059cc:	08005c4b 	.word	0x08005c4b
 80059d0:	08005c4b 	.word	0x08005c4b
 80059d4:	08005c4b 	.word	0x08005c4b
 80059d8:	08005c4b 	.word	0x08005c4b
 80059dc:	08005c4b 	.word	0x08005c4b
 80059e0:	08005c4b 	.word	0x08005c4b
 80059e4:	080059e9 	.word	0x080059e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	7c12      	ldrb	r2, [r2, #16]
 8005a00:	f107 0108 	add.w	r1, r7, #8
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a0a:	e126      	b.n	8005c5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb0e 	bl	8006030 <USBD_CtlError>
        err++;
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	3301      	adds	r3, #1
 8005a18:	72fb      	strb	r3, [r7, #11]
      break;
 8005a1a:	e11e      	b.n	8005c5a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	7c12      	ldrb	r2, [r2, #16]
 8005a28:	f107 0108 	add.w	r1, r7, #8
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
 8005a30:	60f8      	str	r0, [r7, #12]
      break;
 8005a32:	e112      	b.n	8005c5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	7c1b      	ldrb	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10d      	bne.n	8005a58 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	f107 0208 	add.w	r2, r7, #8
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4798      	blx	r3
 8005a4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	2202      	movs	r2, #2
 8005a54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a56:	e100      	b.n	8005c5a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f107 0208 	add.w	r2, r7, #8
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
 8005a68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	2202      	movs	r2, #2
 8005a70:	701a      	strb	r2, [r3, #0]
      break;
 8005a72:	e0f2      	b.n	8005c5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	885b      	ldrh	r3, [r3, #2]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	f200 80ac 	bhi.w	8005bd8 <USBD_GetDescriptor+0x258>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <USBD_GetDescriptor+0x108>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005aa1 	.word	0x08005aa1
 8005a8c:	08005ad5 	.word	0x08005ad5
 8005a90:	08005b09 	.word	0x08005b09
 8005a94:	08005b3d 	.word	0x08005b3d
 8005a98:	08005b71 	.word	0x08005b71
 8005a9c:	08005ba5 	.word	0x08005ba5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	7c12      	ldrb	r2, [r2, #16]
 8005ab8:	f107 0108 	add.w	r1, r7, #8
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
 8005ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ac2:	e091      	b.n	8005be8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fab2 	bl	8006030 <USBD_CtlError>
            err++;
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ad2:	e089      	b.n	8005be8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	7c12      	ldrb	r2, [r2, #16]
 8005aec:	f107 0108 	add.w	r1, r7, #8
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005af6:	e077      	b.n	8005be8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa98 	bl	8006030 <USBD_CtlError>
            err++;
 8005b00:	7afb      	ldrb	r3, [r7, #11]
 8005b02:	3301      	adds	r3, #1
 8005b04:	72fb      	strb	r3, [r7, #11]
          break;
 8005b06:	e06f      	b.n	8005be8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00b      	beq.n	8005b2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	7c12      	ldrb	r2, [r2, #16]
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
 8005b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b2a:	e05d      	b.n	8005be8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa7e 	bl	8006030 <USBD_CtlError>
            err++;
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	3301      	adds	r3, #1
 8005b38:	72fb      	strb	r3, [r7, #11]
          break;
 8005b3a:	e055      	b.n	8005be8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	7c12      	ldrb	r2, [r2, #16]
 8005b54:	f107 0108 	add.w	r1, r7, #8
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4798      	blx	r3
 8005b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b5e:	e043      	b.n	8005be8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa64 	bl	8006030 <USBD_CtlError>
            err++;
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b6e:	e03b      	b.n	8005be8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	7c12      	ldrb	r2, [r2, #16]
 8005b88:	f107 0108 	add.w	r1, r7, #8
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
 8005b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b92:	e029      	b.n	8005be8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa4a 	bl	8006030 <USBD_CtlError>
            err++;
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ba2:	e021      	b.n	8005be8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	7c12      	ldrb	r2, [r2, #16]
 8005bbc:	f107 0108 	add.w	r1, r7, #8
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4798      	blx	r3
 8005bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bc6:	e00f      	b.n	8005be8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa30 	bl	8006030 <USBD_CtlError>
            err++;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bd6:	e007      	b.n	8005be8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa28 	bl	8006030 <USBD_CtlError>
          err++;
 8005be0:	7afb      	ldrb	r3, [r7, #11]
 8005be2:	3301      	adds	r3, #1
 8005be4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005be6:	bf00      	nop
      }
      break;
 8005be8:	e037      	b.n	8005c5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	7c1b      	ldrb	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfa:	f107 0208 	add.w	r2, r7, #8
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4798      	blx	r3
 8005c02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c04:	e029      	b.n	8005c5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fa11 	bl	8006030 <USBD_CtlError>
        err++;
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	3301      	adds	r3, #1
 8005c12:	72fb      	strb	r3, [r7, #11]
      break;
 8005c14:	e021      	b.n	8005c5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7c1b      	ldrb	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10d      	bne.n	8005c3a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4798      	blx	r3
 8005c2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	2207      	movs	r2, #7
 8005c36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c38:	e00f      	b.n	8005c5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f9f7 	bl	8006030 <USBD_CtlError>
        err++;
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	3301      	adds	r3, #1
 8005c46:	72fb      	strb	r3, [r7, #11]
      break;
 8005c48:	e007      	b.n	8005c5a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f9ef 	bl	8006030 <USBD_CtlError>
      err++;
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	3301      	adds	r3, #1
 8005c56:	72fb      	strb	r3, [r7, #11]
      break;
 8005c58:	bf00      	nop
  }

  if (err != 0U)
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11e      	bne.n	8005c9e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	88db      	ldrh	r3, [r3, #6]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d016      	beq.n	8005c96 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005c68:	893b      	ldrh	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	88da      	ldrh	r2, [r3, #6]
 8005c72:	893b      	ldrh	r3, [r7, #8]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bf28      	it	cs
 8005c78:	4613      	movcs	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c7e:	893b      	ldrh	r3, [r7, #8]
 8005c80:	461a      	mov	r2, r3
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa44 	bl	8006112 <USBD_CtlSendData>
 8005c8a:	e009      	b.n	8005ca0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f9ce 	bl	8006030 <USBD_CtlError>
 8005c94:	e004      	b.n	8005ca0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa95 	bl	80061c6 <USBD_CtlSendStatus>
 8005c9c:	e000      	b.n	8005ca0 <USBD_GetDescriptor+0x320>
    return;
 8005c9e:	bf00      	nop
  }
}
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop

08005ca8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	889b      	ldrh	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d131      	bne.n	8005d1e <USBD_SetAddress+0x76>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	88db      	ldrh	r3, [r3, #6]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d12d      	bne.n	8005d1e <USBD_SetAddress+0x76>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	885b      	ldrh	r3, [r3, #2]
 8005cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc8:	d829      	bhi.n	8005d1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	885b      	ldrh	r3, [r3, #2]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d104      	bne.n	8005cec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9a3 	bl	8006030 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cea:	e01d      	b.n	8005d28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fe7b 	bl	80069f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa61 	bl	80061c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d12:	e009      	b.n	8005d28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d1c:	e004      	b.n	8005d28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f985 	bl	8006030 <USBD_CtlError>
  }
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	885b      	ldrh	r3, [r3, #2]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	4b4c      	ldr	r3, [pc, #304]	; (8005e78 <USBD_SetConfig+0x148>)
 8005d46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d48:	4b4b      	ldr	r3, [pc, #300]	; (8005e78 <USBD_SetConfig+0x148>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d905      	bls.n	8005d5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f96c 	bl	8006030 <USBD_CtlError>
    return USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e088      	b.n	8005e6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d002      	beq.n	8005d6e <USBD_SetConfig+0x3e>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d025      	beq.n	8005db8 <USBD_SetConfig+0x88>
 8005d6c:	e071      	b.n	8005e52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d6e:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <USBD_SetConfig+0x148>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01c      	beq.n	8005db0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005d76:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <USBD_SetConfig+0x148>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d80:	4b3d      	ldr	r3, [pc, #244]	; (8005e78 <USBD_SetConfig+0x148>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff f992 	bl	80050b0 <USBD_SetClassConfig>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f949 	bl	8006030 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d9e:	e065      	b.n	8005e6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa10 	bl	80061c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2203      	movs	r2, #3
 8005daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005dae:	e05d      	b.n	8005e6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fa08 	bl	80061c6 <USBD_CtlSendStatus>
      break;
 8005db6:	e059      	b.n	8005e6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005db8:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <USBD_SetConfig+0x148>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d112      	bne.n	8005de6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <USBD_SetConfig+0x148>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dd2:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <USBD_SetConfig+0x148>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff f985 	bl	80050e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9f1 	bl	80061c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005de4:	e042      	b.n	8005e6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005de6:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <USBD_SetConfig+0x148>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d02a      	beq.n	8005e4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff f973 	bl	80050e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e02:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <USBD_SetConfig+0x148>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <USBD_SetConfig+0x148>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff f94c 	bl	80050b0 <USBD_SetClassConfig>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00f      	beq.n	8005e42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f903 	bl	8006030 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff f958 	bl	80050e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e40:	e014      	b.n	8005e6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f9bf 	bl	80061c6 <USBD_CtlSendStatus>
      break;
 8005e48:	e010      	b.n	8005e6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f9bb 	bl	80061c6 <USBD_CtlSendStatus>
      break;
 8005e50:	e00c      	b.n	8005e6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f8eb 	bl	8006030 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <USBD_SetConfig+0x148>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff f941 	bl	80050e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005e66:	2303      	movs	r3, #3
 8005e68:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6a:	bf00      	nop
  }

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	2000019c 	.word	0x2000019c

08005e7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	88db      	ldrh	r3, [r3, #6]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d004      	beq.n	8005e98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8cd 	bl	8006030 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e96:	e023      	b.n	8005ee0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	dc02      	bgt.n	8005eaa <USBD_GetConfig+0x2e>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dc03      	bgt.n	8005eb0 <USBD_GetConfig+0x34>
 8005ea8:	e015      	b.n	8005ed6 <USBD_GetConfig+0x5a>
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d00b      	beq.n	8005ec6 <USBD_GetConfig+0x4a>
 8005eae:	e012      	b.n	8005ed6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f927 	bl	8006112 <USBD_CtlSendData>
        break;
 8005ec4:	e00c      	b.n	8005ee0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	2201      	movs	r2, #1
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f91f 	bl	8006112 <USBD_CtlSendData>
        break;
 8005ed4:	e004      	b.n	8005ee0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f8a9 	bl	8006030 <USBD_CtlError>
        break;
 8005ede:	bf00      	nop
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d81e      	bhi.n	8005f3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	88db      	ldrh	r3, [r3, #6]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d004      	beq.n	8005f12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f890 	bl	8006030 <USBD_CtlError>
        break;
 8005f10:	e01a      	b.n	8005f48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f043 0202 	orr.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	330c      	adds	r3, #12
 8005f32:	2202      	movs	r2, #2
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8eb 	bl	8006112 <USBD_CtlSendData>
      break;
 8005f3c:	e004      	b.n	8005f48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f875 	bl	8006030 <USBD_CtlError>
      break;
 8005f46:	bf00      	nop
  }
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d106      	bne.n	8005f70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f92b 	bl	80061c6 <USBD_CtlSendStatus>
  }
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d80b      	bhi.n	8005fa8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	885b      	ldrh	r3, [r3, #2]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d10c      	bne.n	8005fb2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f910 	bl	80061c6 <USBD_CtlSendStatus>
      }
      break;
 8005fa6:	e004      	b.n	8005fb2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f840 	bl	8006030 <USBD_CtlError>
      break;
 8005fb0:	e000      	b.n	8005fb4 <USBD_ClrFeature+0x3c>
      break;
 8005fb2:	bf00      	nop
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff fa92 	bl	8005510 <SWAPBYTE>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fa85 	bl	8005510 <SWAPBYTE>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fa78 	bl	8005510 <SWAPBYTE>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	80da      	strh	r2, [r3, #6]
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fc6f 	bl	8006920 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006042:	2100      	movs	r1, #0
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fc6b 	bl	8006920 <USBD_LL_StallEP>
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b086      	sub	sp, #24
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d036      	beq.n	80060d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800606c:	6938      	ldr	r0, [r7, #16]
 800606e:	f000 f836 	bl	80060de <USBD_GetLen>
 8006072:	4603      	mov	r3, r0
 8006074:	3301      	adds	r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	4413      	add	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	701a      	strb	r2, [r3, #0]
  idx++;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	3301      	adds	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4413      	add	r3, r2
 8006098:	2203      	movs	r2, #3
 800609a:	701a      	strb	r2, [r3, #0]
  idx++;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	3301      	adds	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060a2:	e013      	b.n	80060cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	4413      	add	r3, r2
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	3301      	adds	r3, #1
 80060b4:	613b      	str	r3, [r7, #16]
    idx++;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	3301      	adds	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
    idx++;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	3301      	adds	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e7      	bne.n	80060a4 <USBD_GetString+0x52>
 80060d4:	e000      	b.n	80060d8 <USBD_GetString+0x86>
    return;
 80060d6:	bf00      	nop
  }
}
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80060ee:	e005      	b.n	80060fc <USBD_GetLen+0x1e>
  {
    len++;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	3301      	adds	r3, #1
 80060f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1f5      	bne.n	80060f0 <USBD_GetLen+0x12>
  }

  return len;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2202      	movs	r2, #2
 8006122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	2100      	movs	r1, #0
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fc7a 	bl	8006a32 <USBD_LL_Transmit>

  return USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	2100      	movs	r1, #0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fc69 	bl	8006a32 <USBD_LL_Transmit>

  return USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2203      	movs	r2, #3
 800617a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	2100      	movs	r1, #0
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fc6d 	bl	8006a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	2100      	movs	r1, #0
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fc5c 	bl	8006a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80061d6:	2300      	movs	r3, #0
 80061d8:	2200      	movs	r2, #0
 80061da:	2100      	movs	r1, #0
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fc28 	bl	8006a32 <USBD_LL_Transmit>

  return USBD_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2205      	movs	r2, #5
 80061f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061fc:	2300      	movs	r3, #0
 80061fe:	2200      	movs	r2, #0
 8006200:	2100      	movs	r1, #0
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc36 	bl	8006a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8006218:	2200      	movs	r2, #0
 800621a:	4912      	ldr	r1, [pc, #72]	; (8006264 <MX_USB_Device_Init+0x50>)
 800621c:	4812      	ldr	r0, [pc, #72]	; (8006268 <MX_USB_Device_Init+0x54>)
 800621e:	f7fe fed9 	bl	8004fd4 <USBD_Init>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8006228:	f7f9 fffb 	bl	8000222 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800622c:	490f      	ldr	r1, [pc, #60]	; (800626c <MX_USB_Device_Init+0x58>)
 800622e:	480e      	ldr	r0, [pc, #56]	; (8006268 <MX_USB_Device_Init+0x54>)
 8006230:	f7fe ff00 	bl	8005034 <USBD_RegisterClass>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800623a:	f7f9 fff2 	bl	8000222 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800623e:	490c      	ldr	r1, [pc, #48]	; (8006270 <MX_USB_Device_Init+0x5c>)
 8006240:	4809      	ldr	r0, [pc, #36]	; (8006268 <MX_USB_Device_Init+0x54>)
 8006242:	f7fe fe51 	bl	8004ee8 <USBD_CDC_RegisterInterface>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800624c:	f7f9 ffe9 	bl	8000222 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8006250:	4805      	ldr	r0, [pc, #20]	; (8006268 <MX_USB_Device_Init+0x54>)
 8006252:	f7fe ff16 	bl	8005082 <USBD_Start>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800625c:	f7f9 ffe1 	bl	8000222 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8006260:	bf00      	nop
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20000128 	.word	0x20000128
 8006268:	200001a0 	.word	0x200001a0
 800626c:	20000010 	.word	0x20000010
 8006270:	20000114 	.word	0x20000114

08006274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006278:	2200      	movs	r2, #0
 800627a:	4905      	ldr	r1, [pc, #20]	; (8006290 <CDC_Init_FS+0x1c>)
 800627c:	4805      	ldr	r0, [pc, #20]	; (8006294 <CDC_Init_FS+0x20>)
 800627e:	f7fe fe48 	bl	8004f12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006282:	4905      	ldr	r1, [pc, #20]	; (8006298 <CDC_Init_FS+0x24>)
 8006284:	4803      	ldr	r0, [pc, #12]	; (8006294 <CDC_Init_FS+0x20>)
 8006286:	f7fe fe62 	bl	8004f4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800628a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000858 	.word	0x20000858
 8006294:	200001a0 	.word	0x200001a0
 8006298:	20000470 	.word	0x20000470

0800629c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	71fb      	strb	r3, [r7, #7]
 80062b8:	4613      	mov	r3, r2
 80062ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	2b23      	cmp	r3, #35	; 0x23
 80062c0:	d84a      	bhi.n	8006358 <CDC_Control_FS+0xac>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <CDC_Control_FS+0x1c>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	08006359 	.word	0x08006359
 80062cc:	08006359 	.word	0x08006359
 80062d0:	08006359 	.word	0x08006359
 80062d4:	08006359 	.word	0x08006359
 80062d8:	08006359 	.word	0x08006359
 80062dc:	08006359 	.word	0x08006359
 80062e0:	08006359 	.word	0x08006359
 80062e4:	08006359 	.word	0x08006359
 80062e8:	08006359 	.word	0x08006359
 80062ec:	08006359 	.word	0x08006359
 80062f0:	08006359 	.word	0x08006359
 80062f4:	08006359 	.word	0x08006359
 80062f8:	08006359 	.word	0x08006359
 80062fc:	08006359 	.word	0x08006359
 8006300:	08006359 	.word	0x08006359
 8006304:	08006359 	.word	0x08006359
 8006308:	08006359 	.word	0x08006359
 800630c:	08006359 	.word	0x08006359
 8006310:	08006359 	.word	0x08006359
 8006314:	08006359 	.word	0x08006359
 8006318:	08006359 	.word	0x08006359
 800631c:	08006359 	.word	0x08006359
 8006320:	08006359 	.word	0x08006359
 8006324:	08006359 	.word	0x08006359
 8006328:	08006359 	.word	0x08006359
 800632c:	08006359 	.word	0x08006359
 8006330:	08006359 	.word	0x08006359
 8006334:	08006359 	.word	0x08006359
 8006338:	08006359 	.word	0x08006359
 800633c:	08006359 	.word	0x08006359
 8006340:	08006359 	.word	0x08006359
 8006344:	08006359 	.word	0x08006359
 8006348:	08006359 	.word	0x08006359
 800634c:	08006359 	.word	0x08006359
 8006350:	08006359 	.word	0x08006359
 8006354:	08006359 	.word	0x08006359
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006358:	bf00      	nop
  }

  return (USBD_OK);
 800635a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4805      	ldr	r0, [pc, #20]	; (800638c <CDC_Receive_FS+0x24>)
 8006376:	f7fe fdea 	bl	8004f4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800637a:	4804      	ldr	r0, [pc, #16]	; (800638c <CDC_Receive_FS+0x24>)
 800637c:	f7fe fe00 	bl	8004f80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006380:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200001a0 	.word	0x200001a0

08006390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80063a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2212      	movs	r2, #18
 80063c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80063c6:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20000148 	.word	0x20000148

080063d8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2204      	movs	r2, #4
 80063e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063ea:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	2000015c 	.word	0x2000015c

080063fc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	6039      	str	r1, [r7, #0]
 8006406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d105      	bne.n	800641a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4907      	ldr	r1, [pc, #28]	; (8006430 <USBD_CDC_ProductStrDescriptor+0x34>)
 8006412:	4808      	ldr	r0, [pc, #32]	; (8006434 <USBD_CDC_ProductStrDescriptor+0x38>)
 8006414:	f7ff fe1d 	bl	8006052 <USBD_GetString>
 8006418:	e004      	b.n	8006424 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4904      	ldr	r1, [pc, #16]	; (8006430 <USBD_CDC_ProductStrDescriptor+0x34>)
 800641e:	4805      	ldr	r0, [pc, #20]	; (8006434 <USBD_CDC_ProductStrDescriptor+0x38>)
 8006420:	f7ff fe17 	bl	8006052 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000c40 	.word	0x20000c40
 8006434:	08006c50 	.word	0x08006c50

08006438 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	4904      	ldr	r1, [pc, #16]	; (8006458 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8006448:	4804      	ldr	r0, [pc, #16]	; (800645c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800644a:	f7ff fe02 	bl	8006052 <USBD_GetString>
  return USBD_StrDesc;
 800644e:	4b02      	ldr	r3, [pc, #8]	; (8006458 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000c40 	.word	0x20000c40
 800645c:	08006c68 	.word	0x08006c68

08006460 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	6039      	str	r1, [r7, #0]
 800646a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	221a      	movs	r2, #26
 8006470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006472:	f000 f843 	bl	80064fc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8006476:	4b02      	ldr	r3, [pc, #8]	; (8006480 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20000160 	.word	0x20000160

08006484 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d105      	bne.n	80064a2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	4907      	ldr	r1, [pc, #28]	; (80064b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800649a:	4808      	ldr	r0, [pc, #32]	; (80064bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800649c:	f7ff fdd9 	bl	8006052 <USBD_GetString>
 80064a0:	e004      	b.n	80064ac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4904      	ldr	r1, [pc, #16]	; (80064b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80064a6:	4805      	ldr	r0, [pc, #20]	; (80064bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80064a8:	f7ff fdd3 	bl	8006052 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000c40 	.word	0x20000c40
 80064bc:	08006c7c 	.word	0x08006c7c

080064c0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	4907      	ldr	r1, [pc, #28]	; (80064f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80064d6:	4808      	ldr	r0, [pc, #32]	; (80064f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80064d8:	f7ff fdbb 	bl	8006052 <USBD_GetString>
 80064dc:	e004      	b.n	80064e8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4904      	ldr	r1, [pc, #16]	; (80064f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80064e2:	4805      	ldr	r0, [pc, #20]	; (80064f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80064e4:	f7ff fdb5 	bl	8006052 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000c40 	.word	0x20000c40
 80064f8:	08006c88 	.word	0x08006c88

080064fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006502:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <Get_SerialNum+0x44>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <Get_SerialNum+0x48>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800650e:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <Get_SerialNum+0x4c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006522:	2208      	movs	r2, #8
 8006524:	4909      	ldr	r1, [pc, #36]	; (800654c <Get_SerialNum+0x50>)
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f814 	bl	8006554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800652c:	2204      	movs	r2, #4
 800652e:	4908      	ldr	r1, [pc, #32]	; (8006550 <Get_SerialNum+0x54>)
 8006530:	68b8      	ldr	r0, [r7, #8]
 8006532:	f000 f80f 	bl	8006554 <IntToUnicode>
  }
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	1fff7590 	.word	0x1fff7590
 8006544:	1fff7594 	.word	0x1fff7594
 8006548:	1fff7598 	.word	0x1fff7598
 800654c:	20000162 	.word	0x20000162
 8006550:	20000172 	.word	0x20000172

08006554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]
 800656a:	e027      	b.n	80065bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	0f1b      	lsrs	r3, r3, #28
 8006570:	2b09      	cmp	r3, #9
 8006572:	d80b      	bhi.n	800658c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	0f1b      	lsrs	r3, r3, #28
 8006578:	b2da      	uxtb	r2, r3
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4619      	mov	r1, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	440b      	add	r3, r1
 8006584:	3230      	adds	r2, #48	; 0x30
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e00a      	b.n	80065a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	0f1b      	lsrs	r3, r3, #28
 8006590:	b2da      	uxtb	r2, r3
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	4619      	mov	r1, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	440b      	add	r3, r1
 800659c:	3237      	adds	r2, #55	; 0x37
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	3301      	adds	r3, #1
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4413      	add	r3, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	3301      	adds	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
 80065bc:	7dfa      	ldrb	r2, [r7, #23]
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d3d3      	bcc.n	800656c <IntToUnicode+0x18>
  }
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b094      	sub	sp, #80	; 0x50
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065dc:	f107 030c 	add.w	r3, r7, #12
 80065e0:	2244      	movs	r2, #68	; 0x44
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fb1f 	bl	8006c28 <memset>
  if(pcdHandle->Instance==USB)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a15      	ldr	r2, [pc, #84]	; (8006644 <HAL_PCD_MspInit+0x70>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d122      	bne.n	800663a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80065f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80065fa:	2300      	movs	r3, #0
 80065fc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065fe:	f107 030c 	add.w	r3, r7, #12
 8006602:	4618      	mov	r0, r3
 8006604:	f7fb fc86 	bl	8001f14 <HAL_RCCEx_PeriphCLKConfig>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800660e:	f7f9 fe08 	bl	8000222 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006612:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <HAL_PCD_MspInit+0x74>)
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <HAL_PCD_MspInit+0x74>)
 8006618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800661c:	6593      	str	r3, [r2, #88]	; 0x58
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <HAL_PCD_MspInit+0x74>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800662a:	2200      	movs	r2, #0
 800662c:	2100      	movs	r1, #0
 800662e:	2014      	movs	r0, #20
 8006630:	f7f9 ff13 	bl	800045a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8006634:	2014      	movs	r0, #20
 8006636:	f7f9 ff2a 	bl	800048e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800663a:	bf00      	nop
 800663c:	3750      	adds	r7, #80	; 0x50
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40005c00 	.word	0x40005c00
 8006648:	40021000 	.word	0x40021000

0800664c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fe fd58 	bl	8005118 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	440b      	add	r3, r1
 8006690:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	4619      	mov	r1, r3
 800669a:	f7fe fd92 	bl	80051c2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	440b      	add	r3, r1
 80066c6:	3324      	adds	r3, #36	; 0x24
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	4619      	mov	r1, r3
 80066ce:	f7fe fddb 	bl	8005288 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe feef 	bl	80054cc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066fe:	2301      	movs	r3, #1
 8006700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	795b      	ldrb	r3, [r3, #5]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d001      	beq.n	800670e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800670a:	f7f9 fd8a 	bl	8000222 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006714:	7bfa      	ldrb	r2, [r7, #15]
 8006716:	4611      	mov	r1, r2
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fe99 	bl	8005450 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fe45 	bl	80053b4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800672a:	bf00      	nop
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fe94 	bl	8005470 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7a5b      	ldrb	r3, [r3, #9]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <HAL_PCD_SuspendCallback+0x30>)
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	4a03      	ldr	r2, [pc, #12]	; (8006764 <HAL_PCD_SuspendCallback+0x30>)
 8006756:	f043 0306 	orr.w	r3, r3, #6
 800675a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	e000ed00 	.word	0xe000ed00

08006768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	7a5b      	ldrb	r3, [r3, #9]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006778:	4b08      	ldr	r3, [pc, #32]	; (800679c <HAL_PCD_ResumeCallback+0x34>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	4a07      	ldr	r2, [pc, #28]	; (800679c <HAL_PCD_ResumeCallback+0x34>)
 800677e:	f023 0306 	bic.w	r3, r3, #6
 8006782:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006784:	f000 f9f8 	bl	8006b78 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fe84 	bl	800549c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	e000ed00 	.word	0xe000ed00

080067a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80067a8:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <USBD_LL_Init+0xb8>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a29      	ldr	r2, [pc, #164]	; (8006858 <USBD_LL_Init+0xb8>)
 80067b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <USBD_LL_Init+0xb8>)
 80067ba:	4a28      	ldr	r2, [pc, #160]	; (800685c <USBD_LL_Init+0xbc>)
 80067bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <USBD_LL_Init+0xb8>)
 80067c0:	2208      	movs	r2, #8
 80067c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <USBD_LL_Init+0xb8>)
 80067c6:	2202      	movs	r2, #2
 80067c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80067ca:	4b23      	ldr	r3, [pc, #140]	; (8006858 <USBD_LL_Init+0xb8>)
 80067cc:	2202      	movs	r2, #2
 80067ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80067d0:	4b21      	ldr	r3, [pc, #132]	; (8006858 <USBD_LL_Init+0xb8>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80067d6:	4b20      	ldr	r3, [pc, #128]	; (8006858 <USBD_LL_Init+0xb8>)
 80067d8:	2200      	movs	r2, #0
 80067da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <USBD_LL_Init+0xb8>)
 80067de:	2200      	movs	r2, #0
 80067e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <USBD_LL_Init+0xb8>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80067e8:	481b      	ldr	r0, [pc, #108]	; (8006858 <USBD_LL_Init+0xb8>)
 80067ea:	f7f9 fe5e 	bl	80004aa <HAL_PCD_Init>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80067f4:	f7f9 fd15 	bl	8000222 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067fe:	2318      	movs	r3, #24
 8006800:	2200      	movs	r2, #0
 8006802:	2100      	movs	r1, #0
 8006804:	f7fb fb18 	bl	8001e38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800680e:	2358      	movs	r3, #88	; 0x58
 8006810:	2200      	movs	r2, #0
 8006812:	2180      	movs	r1, #128	; 0x80
 8006814:	f7fb fb10 	bl	8001e38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800681e:	23c0      	movs	r3, #192	; 0xc0
 8006820:	2200      	movs	r2, #0
 8006822:	2181      	movs	r1, #129	; 0x81
 8006824:	f7fb fb08 	bl	8001e38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800682e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006832:	2200      	movs	r2, #0
 8006834:	2101      	movs	r1, #1
 8006836:	f7fb faff 	bl	8001e38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006844:	2200      	movs	r2, #0
 8006846:	2182      	movs	r1, #130	; 0x82
 8006848:	f7fb faf6 	bl	8001e38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000e40 	.word	0x20000e40
 800685c:	40005c00 	.word	0x40005c00

08006860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006876:	4618      	mov	r0, r3
 8006878:	f7f9 fee5 	bl	8000646 <HAL_PCD_Start>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f980 	bl	8006b88 <USBD_Get_USB_Status>
 8006888:	4603      	mov	r3, r0
 800688a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800688c:	7bbb      	ldrb	r3, [r7, #14]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	4608      	mov	r0, r1
 80068a0:	4611      	mov	r1, r2
 80068a2:	461a      	mov	r2, r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	70fb      	strb	r3, [r7, #3]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70bb      	strb	r3, [r7, #2]
 80068ac:	4613      	mov	r3, r2
 80068ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80068be:	78bb      	ldrb	r3, [r7, #2]
 80068c0:	883a      	ldrh	r2, [r7, #0]
 80068c2:	78f9      	ldrb	r1, [r7, #3]
 80068c4:	f7fa f82c 	bl	8000920 <HAL_PCD_EP_Open>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f95a 	bl	8006b88 <USBD_Get_USB_Status>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f7fa f86a 	bl	80009da <HAL_PCD_EP_Close>
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 f93b 	bl	8006b88 <USBD_Get_USB_Status>
 8006912:	4603      	mov	r3, r0
 8006914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006916:	7bbb      	ldrb	r3, [r7, #14]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	4611      	mov	r1, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f7fa f913 	bl	8000b6a <HAL_PCD_EP_SetStall>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f91c 	bl	8006b88 <USBD_Get_USB_Status>
 8006950:	4603      	mov	r3, r0
 8006952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006954:	7bbb      	ldrb	r3, [r7, #14]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f7fa f946 	bl	8000c0e <HAL_PCD_EP_ClrStall>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	4618      	mov	r0, r3
 800698a:	f000 f8fd 	bl	8006b88 <USBD_Get_USB_Status>
 800698e:	4603      	mov	r3, r0
 8006990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006992:	7bbb      	ldrb	r3, [r7, #14]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80069b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da0b      	bge.n	80069d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	440b      	add	r3, r1
 80069ca:	3312      	adds	r3, #18
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	e00b      	b.n	80069e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	440b      	add	r3, r1
 80069e2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80069e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a0e:	78fa      	ldrb	r2, [r7, #3]
 8006a10:	4611      	mov	r1, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 ff60 	bl	80008d8 <HAL_PCD_SetAddress>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f8b2 	bl	8006b88 <USBD_Get_USB_Status>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b086      	sub	sp, #24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006a50:	7af9      	ldrb	r1, [r7, #11]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	f7fa f851 	bl	8000afc <HAL_PCD_EP_Transmit>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f891 	bl	8006b88 <USBD_Get_USB_Status>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	460b      	mov	r3, r1
 8006a82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006a92:	7af9      	ldrb	r1, [r7, #11]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	f7f9 ffe7 	bl	8000a6a <HAL_PCD_EP_Receive>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 f870 	bl	8006b88 <USBD_Get_USB_Status>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006aac:	7dbb      	ldrb	r3, [r7, #22]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	4611      	mov	r1, r2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7f9 fffd 	bl	8000acc <HAL_PCD_EP_GetRxCount>
 8006ad2:	4603      	mov	r3, r0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_PCDEx_LPM_Callback+0x18>
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d013      	beq.n	8006b1a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8006af2:	e023      	b.n	8006b3c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7a5b      	ldrb	r3, [r3, #9]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006afc:	f000 f83c 	bl	8006b78 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	4a0f      	ldr	r2, [pc, #60]	; (8006b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8006b06:	f023 0306 	bic.w	r3, r3, #6
 8006b0a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fcc2 	bl	800549c <USBD_LL_Resume>
    break;
 8006b18:	e010      	b.n	8006b3c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fca5 	bl	8005470 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	7a5b      	ldrb	r3, [r3, #9]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	4a04      	ldr	r2, [pc, #16]	; (8006b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8006b34:	f043 0306 	orr.w	r3, r3, #6
 8006b38:	6113      	str	r3, [r2, #16]
    break;
 8006b3a:	bf00      	nop
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	e000ed00 	.word	0xe000ed00

08006b48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <USBD_static_malloc+0x18>)
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	2000111c 	.word	0x2000111c

08006b64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d817      	bhi.n	8006bcc <USBD_Get_USB_Status+0x44>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <USBD_Get_USB_Status+0x1c>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bb5 	.word	0x08006bb5
 8006ba8:	08006bbb 	.word	0x08006bbb
 8006bac:	08006bc1 	.word	0x08006bc1
 8006bb0:	08006bc7 	.word	0x08006bc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8006bb8:	e00b      	b.n	8006bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8006bbe:	e008      	b.n	8006bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8006bc4:	e005      	b.n	8006bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8006bca:	e002      	b.n	8006bd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd0:	bf00      	nop
  }
  return usb_status;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <__libc_init_array>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4d0d      	ldr	r5, [pc, #52]	; (8006c18 <__libc_init_array+0x38>)
 8006be4:	4c0d      	ldr	r4, [pc, #52]	; (8006c1c <__libc_init_array+0x3c>)
 8006be6:	1b64      	subs	r4, r4, r5
 8006be8:	10a4      	asrs	r4, r4, #2
 8006bea:	2600      	movs	r6, #0
 8006bec:	42a6      	cmp	r6, r4
 8006bee:	d109      	bne.n	8006c04 <__libc_init_array+0x24>
 8006bf0:	4d0b      	ldr	r5, [pc, #44]	; (8006c20 <__libc_init_array+0x40>)
 8006bf2:	4c0c      	ldr	r4, [pc, #48]	; (8006c24 <__libc_init_array+0x44>)
 8006bf4:	f000 f820 	bl	8006c38 <_init>
 8006bf8:	1b64      	subs	r4, r4, r5
 8006bfa:	10a4      	asrs	r4, r4, #2
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	42a6      	cmp	r6, r4
 8006c00:	d105      	bne.n	8006c0e <__libc_init_array+0x2e>
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c08:	4798      	blx	r3
 8006c0a:	3601      	adds	r6, #1
 8006c0c:	e7ee      	b.n	8006bec <__libc_init_array+0xc>
 8006c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c12:	4798      	blx	r3
 8006c14:	3601      	adds	r6, #1
 8006c16:	e7f2      	b.n	8006bfe <__libc_init_array+0x1e>
 8006c18:	08006c98 	.word	0x08006c98
 8006c1c:	08006c98 	.word	0x08006c98
 8006c20:	08006c98 	.word	0x08006c98
 8006c24:	08006c9c 	.word	0x08006c9c

08006c28 <memset>:
 8006c28:	4402      	add	r2, r0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d100      	bne.n	8006c32 <memset+0xa>
 8006c30:	4770      	bx	lr
 8006c32:	f803 1b01 	strb.w	r1, [r3], #1
 8006c36:	e7f9      	b.n	8006c2c <memset+0x4>

08006c38 <_init>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr

08006c44 <_fini>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr
