
USB_TO_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f8c  08007f8c  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  08007f8c  08007f8c  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f8c  08007f8c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08007f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  20000194  08008128  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001354  08008128  00021354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed9c  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ca  00000000  00000000  0002ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00031930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  000324d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efb6  00000000  00000000  00032f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eefc  00000000  00000000  00051ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b60f0  00000000  00000000  00060dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116eca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d78  00000000  00000000  00116f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007efc 	.word	0x08007efc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	08007efc 	.word	0x08007efc

08000218 <main>:

	RCC->APB1ENR1 |= (1 << 25);
}

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b0a0      	sub	sp, #128	; 0x80
 800021c:	af00      	add	r7, sp, #0
	// Clock System Initialize
	RCC_voidInit();
 800021e:	f005 fb07 	bl	8005830 <RCC_voidInit>
	//RCC_voidPeripheralClockCfg(RCC_CCIPR_REG1, FDCAN_Cfg);
	RCC->CCIPR |= (1 << 25);
 8000222:	4b7a      	ldr	r3, [pc, #488]	; (800040c <main+0x1f4>)
 8000224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000228:	4a78      	ldr	r2, [pc, #480]	; (800040c <main+0x1f4>)
 800022a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800022e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	// Enable Peripherals
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_A);
 8000232:	2100      	movs	r1, #0
 8000234:	2001      	movs	r0, #1
 8000236:	f005 fb5f 	bl	80058f8 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_B);
 800023a:	2101      	movs	r1, #1
 800023c:	2001      	movs	r0, #1
 800023e:	f005 fb5b 	bl	80058f8 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_C);
 8000242:	2102      	movs	r1, #2
 8000244:	2001      	movs	r0, #1
 8000246:	f005 fb57 	bl	80058f8 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, RCC_FDCAN);
 800024a:	2119      	movs	r1, #25
 800024c:	2003      	movs	r0, #3
 800024e:	f005 fb53 	bl	80058f8 <RCC_voidPeripheralClockEnable>

	//RCC_Init();
	RCC_voidPeripheralClockCfg(RCC_CCIPR_REG1,CLK48_Cfg);
 8000252:	211a      	movs	r1, #26
 8000254:	2001      	movs	r0, #1
 8000256:	f005 fbb3 	bl	80059c0 <RCC_voidPeripheralClockCfg>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, RCC_USB);
 800025a:	2117      	movs	r1, #23
 800025c:	2003      	movs	r0, #3
 800025e:	f005 fb4b 	bl	80058f8 <RCC_voidPeripheralClockEnable>

	// Initialize Variables
	MGPIO_Config_t canTxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8000262:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	f8c3 2003 	str.w	r2, [r3, #3]
 800026e:	2301      	movs	r3, #1
 8000270:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8000274:	2309      	movs	r3, #9
 8000276:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 800027a:	2302      	movs	r3, #2
 800027c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8000280:	2309      	movs	r3, #9
 8000282:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	MGPIO_Config_t canRxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN8, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8000286:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000292:	2301      	movs	r3, #1
 8000294:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8000298:	2308      	movs	r3, #8
 800029a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 800029e:	2302      	movs	r3, #2
 80002a0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80002a4:	2309      	movs	r3, #9
 80002a6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	CAN_TxConfig_t txConfig = {.automaticTransmission = CAN_AUTOMATIC_TRANSMISSION_DISABLE, .bufferType = CAN_TX_BUFFER_FIFO, .transmitPause = CAN_TX_PAUSE_DISABLE};
 80002aa:	2300      	movs	r3, #0
 80002ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 80002b0:	2300      	movs	r3, #0
 80002b2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80002b6:	2301      	movs	r3, #1
 80002b8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	MGPIO_Config_t usbCfg = {.Port = GPIO_PORTB,.Pin = GPIO_PIN3,.Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF3, .OutputType = GPIO_OT_PUSHPULL, .OutputSpeed = GPIO_SPEED_LOW,.InputPull=GPIO_NO_PULL};
 80002bc:	4a54      	ldr	r2, [pc, #336]	; (8000410 <main+0x1f8>)
 80002be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80002c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c6:	6018      	str	r0, [r3, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	8019      	strh	r1, [r3, #0]
 80002cc:	3302      	adds	r3, #2
 80002ce:	0c0a      	lsrs	r2, r1, #16
 80002d0:	701a      	strb	r2, [r3, #0]

	CAN_RxConfig_t rxConfig;
	rxConfig.FIFO0_IDs = IDs;
 80002d2:	4b50      	ldr	r3, [pc, #320]	; (8000414 <main+0x1fc>)
 80002d4:	65fb      	str	r3, [r7, #92]	; 0x5c
	rxConfig.FIFO0_numberOfIDs = CAN_IDS_COUNT;
 80002d6:	2302      	movs	r3, #2
 80002d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	rxConfig.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 80002dc:	2301      	movs	r3, #1
 80002de:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	rxConfig.nonMatchingFrames = CAN_RX_ACCEPT_FIFO1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

	CAN_RxConfig_t rxCfg;
		rxCfg.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		rxCfg.FIFO1_Mode = CAN_RX_FIFO_OVERWRITE;
 80002ee:	2301      	movs	r3, #1
 80002f0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		rxCfg.FIFO0_numberOfIDs = 2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rxCfg.FIFO1_numberOfIDs = 2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		u32 ids[2] = {0x30, 0x31};
 8000300:	4a45      	ldr	r2, [pc, #276]	; (8000418 <main+0x200>)
 8000302:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800030a:	e883 0003 	stmia.w	r3, {r0, r1}
		rxCfg.FIFO0_IDs = ids;
 800030e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000312:	64fb      	str	r3, [r7, #76]	; 0x4c
		rxCfg.FIFO1_IDs = ids;
 8000314:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000318:	653b      	str	r3, [r7, #80]	; 0x50
		rxCfg.nonMatchingFrames = CAN_RX_REJECT;
 800031a:	2302      	movs	r3, #2
 800031c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	CAN_Frame_t receiveFrame;
	u8 receiveData[8];
	receiveFrame.data = receiveData;
 8000320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
	receiveFrame.id = 0x00;
 8000326:	2300      	movs	r3, #0
 8000328:	633b      	str	r3, [r7, #48]	; 0x30

	u8 receivedMsgCount = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f


	CAN_Frame_t transmitFrame;
	transmitFrame.ide = CAN_FRAME_STANDARD_ID;
 8000330:	2300      	movs	r3, #0
 8000332:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22



	// Initialize Peripherals
	//GPIO_voidInitPin(&usbCfg);
	GPIO_voidInitPin(&canTxPin);
 8000336:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800033a:	4618      	mov	r0, r3
 800033c:	f005 fa4a 	bl	80057d4 <GPIO_voidInitPin>
	GPIO_voidInitPin(&canRxPin);
 8000340:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000344:	4618      	mov	r0, r3
 8000346:	f005 fa45 	bl	80057d4 <GPIO_voidInitPin>
	CAN_voidInit(CAN1, &rxCfg, &txConfig);
 800034a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800034e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000352:	4619      	mov	r1, r3
 8000354:	4831      	ldr	r0, [pc, #196]	; (800041c <main+0x204>)
 8000356:	f004 fd5f 	bl	8004e18 <CAN_voidInit>

	MX_USB_Device_Init();
 800035a:	f007 f873 	bl	8007444 <MX_USB_Device_Init>

	u8 d[8] = "0123456\n";
 800035e:	4a30      	ldr	r2, [pc, #192]	; (8000420 <main+0x208>)
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000368:	e883 0003 	stmia.w	r3, {r0, r1}
	transmitFrame.ide = CAN_FRAME_STANDARD_ID;
 800036c:	2300      	movs	r3, #0
 800036e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	transmitFrame.id = 0x000;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]
	transmitFrame.rtr = CAN_FRAME_DATA;
 8000376:	2300      	movs	r3, #0
 8000378:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	transmitFrame.dlc = 8;
 800037c:	2308      	movs	r3, #8
 800037e:	f887 3020 	strb.w	r3, [r7, #32]
	transmitFrame.data = d;
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_voidSendDataFrame(CAN1, &transmitFrame);
 8000388:	f107 031c 	add.w	r3, r7, #28
 800038c:	4619      	mov	r1, r3
 800038e:	4823      	ldr	r0, [pc, #140]	; (800041c <main+0x204>)
 8000390:	f004 ffc8 	bl	8005324 <CAN_voidSendDataFrame>
	while(1)
	{

		USB_RX_t DecodedData;
		// Receive from USB
		Receive_USB_data(buffer,&DecodedData);
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4822      	ldr	r0, [pc, #136]	; (8000424 <main+0x20c>)
 800039a:	f000 f8d9 	bl	8000550 <Receive_USB_data>

		// Send CAN Message
		//if msg_id contains address 0x000 and rtr contains 0 then there is no data
		if(DecodedData.msg_id == 0x000 && DecodedData.rtr == 0 )
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d102      	bne.n	80003aa <main+0x192>
 80003a4:	7a3b      	ldrb	r3, [r7, #8]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d010      	beq.n	80003cc <main+0x1b4>
		{

		}else{
			transmitFrame.id   = DecodedData.msg_id;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	61fb      	str	r3, [r7, #28]
			transmitFrame.rtr  = DecodedData.rtr;
 80003ae:	7a3b      	ldrb	r3, [r7, #8]
 80003b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			transmitFrame.dlc  = DecodedData.dlc;
 80003b4:	7a7b      	ldrb	r3, [r7, #9]
 80003b6:	f887 3020 	strb.w	r3, [r7, #32]
			transmitFrame.data = DecodedData.data;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	3306      	adds	r3, #6
 80003be:	627b      	str	r3, [r7, #36]	; 0x24

			CAN_voidSendDataFrame(CAN1, &transmitFrame);
 80003c0:	f107 031c 	add.w	r3, r7, #28
 80003c4:	4619      	mov	r1, r3
 80003c6:	4815      	ldr	r0, [pc, #84]	; (800041c <main+0x204>)
 80003c8:	f004 ffac 	bl	8005324 <CAN_voidSendDataFrame>
		}


		// Check CAN Receive Buffer
		receivedMsgCount = CAN_u8IsRxBufferFull(CAN1, CAN_RX_FIFO0);
 80003cc:	2100      	movs	r1, #0
 80003ce:	4813      	ldr	r0, [pc, #76]	; (800041c <main+0x204>)
 80003d0:	f004 ff86 	bl	80052e0 <CAN_u8IsRxBufferFull>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		// Send USB Acknowledge (Containing whether we will send or receive)
		if(receivedMsgCount == 0){
 80003da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d103      	bne.n	80003ea <main+0x1d2>
			USB_voidSendAck(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f000 f820 	bl	8000428 <USB_voidSendAck>
 80003e8:	e7d4      	b.n	8000394 <main+0x17c>
		}
		else{
			USB_voidSendAck(2);
 80003ea:	2002      	movs	r0, #2
 80003ec:	f000 f81c 	bl	8000428 <USB_voidSendAck>
			CAN_voidReceiveDataFrame(CAN1, &receiveFrame, CAN_RX_FIFO0);
 80003f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003f4:	2200      	movs	r2, #0
 80003f6:	4619      	mov	r1, r3
 80003f8:	4808      	ldr	r0, [pc, #32]	; (800041c <main+0x204>)
 80003fa:	f004 fe9d 	bl	8005138 <CAN_voidReceiveDataFrame>
			USB_voidSendCan(&receiveFrame);
 80003fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f82e 	bl	8000464 <USB_voidSendCan>
	{
 8000408:	e7c4      	b.n	8000394 <main+0x17c>
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	08007f14 	.word	0x08007f14
 8000414:	20000000 	.word	0x20000000
 8000418:	08007f1c 	.word	0x08007f1c
 800041c:	40006400 	.word	0x40006400
 8000420:	08007f24 	.word	0x08007f24
 8000424:	20000008 	.word	0x20000008

08000428 <USB_voidSendAck>:
		}
	}
}

void USB_voidSendAck(u8 A_ack)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	u8 msg[5] = "0000\n";
 8000432:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <USB_voidSendAck+0x38>)
 8000434:	f107 0308 	add.w	r3, r7, #8
 8000438:	e892 0003 	ldmia.w	r2, {r0, r1}
 800043c:	6018      	str	r0, [r3, #0]
 800043e:	3304      	adds	r3, #4
 8000440:	7019      	strb	r1, [r3, #0]
	msg[3] = '0' + A_ack;
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	3330      	adds	r3, #48	; 0x30
 8000446:	b2db      	uxtb	r3, r3
 8000448:	72fb      	strb	r3, [r7, #11]
	CDC_Transmit_FS(msg, 5);
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	2105      	movs	r1, #5
 8000450:	4618      	mov	r0, r3
 8000452:	f007 f8cb 	bl	80075ec <CDC_Transmit_FS>
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	08007f2c 	.word	0x08007f2c

08000464 <USB_voidSendCan>:

void USB_voidSendCan(CAN_Frame_t* A_frame)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	 *  ID  RTR DLC data       end
	 *  000  0   0   00000000	\n
	 */

	// ID
	decimalToHex(A_frame->id, msg);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f107 0208 	add.w	r2, r7, #8
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f83c 	bl	80004f4 <decimalToHex>

	// RTR
	msg[3] = '0' + A_frame->rtr;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	3330      	adds	r3, #48	; 0x30
 8000482:	b2db      	uxtb	r3, r3
 8000484:	72fb      	strb	r3, [r7, #11]

	// DLC
	msg[4] = '0' + A_frame->dlc;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	3330      	adds	r3, #48	; 0x30
 800048c:	b2db      	uxtb	r3, r3
 800048e:	733b      	strb	r3, [r7, #12]

	// Data
	u8 i = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	75fb      	strb	r3, [r7, #23]
	for(i = 0; i < 8; i++){
 8000494:	2300      	movs	r3, #0
 8000496:	75fb      	strb	r3, [r7, #23]
 8000498:	e01c      	b.n	80004d4 <USB_voidSendCan+0x70>
		if(i < A_frame->dlc)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d20d      	bcs.n	80004c0 <USB_voidSendCan+0x5c>
			msg[5 + i] = '0' + A_frame->data[i];
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	4413      	add	r3, r2
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	7dfb      	ldrb	r3, [r7, #23]
 80004b0:	3305      	adds	r3, #5
 80004b2:	3230      	adds	r2, #48	; 0x30
 80004b4:	b2d2      	uxtb	r2, r2
 80004b6:	3318      	adds	r3, #24
 80004b8:	443b      	add	r3, r7
 80004ba:	f803 2c10 	strb.w	r2, [r3, #-16]
 80004be:	e006      	b.n	80004ce <USB_voidSendCan+0x6a>
		else
			msg[5 + i] = '0';
 80004c0:	7dfb      	ldrb	r3, [r7, #23]
 80004c2:	3305      	adds	r3, #5
 80004c4:	3318      	adds	r3, #24
 80004c6:	443b      	add	r3, r7
 80004c8:	2230      	movs	r2, #48	; 0x30
 80004ca:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i = 0; i < 8; i++){
 80004ce:	7dfb      	ldrb	r3, [r7, #23]
 80004d0:	3301      	adds	r3, #1
 80004d2:	75fb      	strb	r3, [r7, #23]
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
 80004d6:	2b07      	cmp	r3, #7
 80004d8:	d9df      	bls.n	800049a <USB_voidSendCan+0x36>
	}

	// End
	msg[13] = '\n';
 80004da:	230a      	movs	r3, #10
 80004dc:	757b      	strb	r3, [r7, #21]

	// Send Message Via USB
	CDC_Transmit_FS(msg, 14);
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	210e      	movs	r1, #14
 80004e4:	4618      	mov	r0, r3
 80004e6:	f007 f881 	bl	80075ec <CDC_Transmit_FS>
}
 80004ea:	bf00      	nop
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <decimalToHex>:

void decimalToHex(u32 decimal, u8* hex)
{
 80004f4:	b490      	push	{r4, r7}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	u8 h[16] = {'0', '1', '2', '3', '4',
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <decimalToHex+0x58>)
 8000500:	f107 0408 	add.w	r4, r7, #8
 8000504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			'5', '6', '7', '8', '9',
			'A', 'B', 'C', 'D', 'E',
			'F'};
	hex[2] = h[decimal % 16];
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f003 020f 	and.w	r2, r3, #15
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3302      	adds	r3, #2
 8000514:	3218      	adds	r2, #24
 8000516:	443a      	add	r2, r7
 8000518:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800051c:	701a      	strb	r2, [r3, #0]
	hex[1] = h[(decimal % 256) / 16];
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	091a      	lsrs	r2, r3, #4
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	3218      	adds	r2, #24
 800052a:	443a      	add	r2, r7
 800052c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000530:	701a      	strb	r2, [r3, #0]
	hex[0] = h[decimal / 256];
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	3318      	adds	r3, #24
 8000538:	443b      	add	r3, r7
 800053a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	701a      	strb	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bc90      	pop	{r4, r7}
 800054a:	4770      	bx	lr
 800054c:	08007f34 	.word	0x08007f34

08000550 <Receive_USB_data>:
void  Receive_USB_data(uint8_t* buffer,USB_RX_t *A_xDecoded_data)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	u8 hex_str[3];
	hex_str[0] = buffer[0] ;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	733b      	strb	r3, [r7, #12]
	hex_str[1] = buffer[1] ;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	737b      	strb	r3, [r7, #13]
	hex_str[2] = buffer[2] ;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	789b      	ldrb	r3, [r3, #2]
 800056a:	73bb      	strb	r3, [r7, #14]

	A_xDecoded_data->msg_id = hexstr_to_Hex(hex_str);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f82c 	bl	80005ce <hexstr_to_Hex>
 8000576:	4602      	mov	r2, r0
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	601a      	str	r2, [r3, #0]

	A_xDecoded_data->rtr = buffer[3] - '0';
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3303      	adds	r3, #3
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	3b30      	subs	r3, #48	; 0x30
 8000584:	b2da      	uxtb	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	711a      	strb	r2, [r3, #4]

	A_xDecoded_data->dlc = buffer[4] - '0';
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3304      	adds	r3, #4
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3b30      	subs	r3, #48	; 0x30
 8000592:	b2da      	uxtb	r2, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	715a      	strb	r2, [r3, #5]

	for (u8 i = 0; i < A_xDecoded_data->dlc; i++) {
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e00d      	b.n	80005ba <Receive_USB_data+0x6a>
		A_xDecoded_data->data[i] = buffer[5 + i];
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	3305      	adds	r3, #5
 80005a2:	461a      	mov	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	441a      	add	r2, r3
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	7811      	ldrb	r1, [r2, #0]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	460a      	mov	r2, r1
 80005b2:	719a      	strb	r2, [r3, #6]
	for (u8 i = 0; i < A_xDecoded_data->dlc; i++) {
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	3301      	adds	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	7bfa      	ldrb	r2, [r7, #15]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3ec      	bcc.n	800059e <Receive_USB_data+0x4e>
	}

}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <hexstr_to_Hex>:
u32 hexstr_to_Hex(u8 *A_u8str)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	u32 hex = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	for(u8 i = 0; i<3; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	72fb      	strb	r3, [r7, #11]
 80005de:	e02d      	b.n	800063c <hexstr_to_Hex+0x6e>
	{
		if(A_u8str[i]>='0' && A_u8str[i]<= '9')
 80005e0:	7afb      	ldrb	r3, [r7, #11]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b2f      	cmp	r3, #47	; 0x2f
 80005ea:	d90f      	bls.n	800060c <hexstr_to_Hex+0x3e>
 80005ec:	7afb      	ldrb	r3, [r7, #11]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b39      	cmp	r3, #57	; 0x39
 80005f6:	d809      	bhi.n	800060c <hexstr_to_Hex+0x3e>
		{
			hex = hex *16 +  (A_u8str[i]-'0');
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	7afa      	ldrb	r2, [r7, #11]
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	440a      	add	r2, r1
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	4413      	add	r3, r2
 8000606:	3b30      	subs	r3, #48	; 0x30
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e014      	b.n	8000636 <hexstr_to_Hex+0x68>
		}else if(A_u8str[i]>='A' && A_u8str[i]<= 'F')
 800060c:	7afb      	ldrb	r3, [r7, #11]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b40      	cmp	r3, #64	; 0x40
 8000616:	d90e      	bls.n	8000636 <hexstr_to_Hex+0x68>
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b46      	cmp	r3, #70	; 0x46
 8000622:	d808      	bhi.n	8000636 <hexstr_to_Hex+0x68>
		{
			hex = hex *16 +  (A_u8str[i]-'A' + 10);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	7afa      	ldrb	r2, [r7, #11]
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	440a      	add	r2, r1
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	4413      	add	r3, r2
 8000632:	3b37      	subs	r3, #55	; 0x37
 8000634:	60fb      	str	r3, [r7, #12]
	for(u8 i = 0; i<3; i++)
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	3301      	adds	r3, #1
 800063a:	72fb      	strb	r3, [r7, #11]
 800063c:	7afb      	ldrb	r3, [r7, #11]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d9ce      	bls.n	80005e0 <hexstr_to_Hex+0x12>
		}
	}
	return hex;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <Error_Handler>:
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>

0800065a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065e:	e7fe      	b.n	800065e <NMI_Handler+0x4>

08000660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <HardFault_Handler+0x4>

08000666 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <MemManage_Handler+0x4>

0800066c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <BusFault_Handler+0x4>

08000672 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f849 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <USB_LP_IRQHandler+0x10>)
 80006b6:	f000 fa00 	bl	8000aba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000e58 	.word	0x20000e58

080006c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff ffea 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <LoopForever+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000716:	f007 fbb7 	bl	8007e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071a:	f7ff fd7d 	bl	8000218 <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   r0, =_estack
 8000720:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 800072c:	08007f94 	.word	0x08007f94
  ldr r2, =_sbss
 8000730:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8000734:	20001354 	.word	0x20001354

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x1c>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x20>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4413      	add	r3, r2
 800074a:	4a03      	ldr	r2, [pc, #12]	; (8000758 <HAL_IncTick+0x1c>)
 800074c:	6013      	str	r3, [r2, #0]
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	200001b0 	.word	0x200001b0
 800075c:	20000018 	.word	0x20000018

08000760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	200001b0 	.word	0x200001b0

08000778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <__NVIC_GetPriorityGrouping+0x18>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	f003 0307 	and.w	r3, r3, #7
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	db0b      	blt.n	80007be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 021f 	and.w	r2, r3, #31
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <__NVIC_EnableIRQ+0x38>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	095b      	lsrs	r3, r3, #5
 80007b4:	2001      	movs	r0, #1
 80007b6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff6e 	bl	8000778 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ffbe 	bl	8000824 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff8d 	bl	80007d0 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff61 	bl	8000794 <__NVIC_EnableIRQ>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e0c0      	b.n	8000a6e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d106      	bne.n	8000906 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f006 ffbb 	bl	800787c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2203      	movs	r2, #3
 800090a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f001 ff1d 	bl	8002752 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e03e      	b.n	800099c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800091e:	7bfa      	ldrb	r2, [r7, #15]
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	3311      	adds	r3, #17
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	3310      	adds	r3, #16
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000946:	7bfa      	ldrb	r2, [r7, #15]
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	440b      	add	r3, r1
 8000954:	3313      	adds	r3, #19
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800095a:	7bfa      	ldrb	r2, [r7, #15]
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	440b      	add	r3, r1
 8000968:	3320      	adds	r3, #32
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	6879      	ldr	r1, [r7, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	440b      	add	r3, r1
 800097c:	3324      	adds	r3, #36	; 0x24
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	6879      	ldr	r1, [r7, #4]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	440b      	add	r3, r1
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	3301      	adds	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d3bb      	bcc.n	800091e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	e044      	b.n	8000a36 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80009ac:	7bfa      	ldrb	r2, [r7, #15]
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	440b      	add	r3, r1
 80009ba:	f203 1351 	addw	r3, r3, #337	; 0x151
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80009d4:	7bfa      	ldrb	r2, [r7, #15]
 80009d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	4613      	mov	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	f203 1353 	addw	r3, r3, #339	; 0x153
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a04:	7bfa      	ldrb	r2, [r7, #15]
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	440b      	add	r3, r1
 8000a12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	440b      	add	r3, r1
 8000a28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3301      	adds	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	791b      	ldrb	r3, [r3, #4]
 8000a3a:	7bfa      	ldrb	r2, [r7, #15]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d3b5      	bcc.n	80009ac <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3304      	adds	r3, #4
 8000a48:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000a4c:	f001 fe9c 	bl	8002788 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7a9b      	ldrb	r3, [r3, #10]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d102      	bne.n	8000a6c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f001 fc41 	bl	80022ee <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d101      	bne.n	8000a8c <HAL_PCD_Start+0x16>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e012      	b.n	8000ab2 <HAL_PCD_Start+0x3c>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fe43 	bl	8002724 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f004 f903 	bl	8004cae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 f908 	bl	8004cdc <USB_ReadInterrupts>
 8000acc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fb04 	bl	80010e6 <PCD_EP_ISR_Handler>

    return;
 8000ade:	e110      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d013      	beq.n	8000b12 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000afc:	b292      	uxth	r2, r2
 8000afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f006 ff4b 	bl	800799e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 f8fc 	bl	8000d08 <HAL_PCD_SetAddress>

    return;
 8000b10:	e0f7      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00c      	beq.n	8000b36 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b2e:	b292      	uxth	r2, r2
 8000b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000b34:	e0e5      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00c      	beq.n	8000b5a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b52:	b292      	uxth	r2, r2
 8000b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000b58:	e0d3      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d034      	beq.n	8000bce <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 0204 	bic.w	r2, r2, #4
 8000b76:	b292      	uxth	r2, r2
 8000b78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0208 	bic.w	r2, r2, #8
 8000b8e:	b292      	uxth	r2, r2
 8000b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d107      	bne.n	8000bae <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f007 f8eb 	bl	8007d84 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f006 ff2e 	bl	8007a10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000bc6:	b292      	uxth	r2, r2
 8000bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000bcc:	e099      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d027      	beq.n	8000c28 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0208 	orr.w	r2, r2, #8
 8000bea:	b292      	uxth	r2, r2
 8000bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c02:	b292      	uxth	r2, r2
 8000c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f042 0204 	orr.w	r2, r2, #4
 8000c1a:	b292      	uxth	r2, r2
 8000c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f006 fedb 	bl	80079dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000c26:	e06c      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d040      	beq.n	8000cb4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c44:	b292      	uxth	r2, r2
 8000c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d12b      	bne.n	8000cac <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f042 0204 	orr.w	r2, r2, #4
 8000c66:	b292      	uxth	r2, r2
 8000c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f042 0208 	orr.w	r2, r2, #8
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f007 f86d 	bl	8007d84 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000caa:	e02a      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f006 fe95 	bl	80079dc <HAL_PCD_SuspendCallback>
    return;
 8000cb2:	e026      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cd0:	b292      	uxth	r2, r2
 8000cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f006 fe53 	bl	8007982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000cdc:	e011      	b.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000d00:	bf00      	nop
  }
}
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d101      	bne.n	8000d22 <HAL_PCD_SetAddress+0x1a>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e012      	b.n	8000d48 <HAL_PCD_SetAddress+0x40>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	78fa      	ldrb	r2, [r7, #3]
 8000d2e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 ffa4 	bl	8004c86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	4608      	mov	r0, r1
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	70fb      	strb	r3, [r7, #3]
 8000d62:	460b      	mov	r3, r1
 8000d64:	803b      	strh	r3, [r7, #0]
 8000d66:	4613      	mov	r3, r2
 8000d68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da0e      	bge.n	8000d94 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	f003 0207 	and.w	r2, r3, #7
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	3310      	adds	r3, #16
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	705a      	strb	r2, [r3, #1]
 8000d92:	e00e      	b.n	8000db2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	f003 0207 	and.w	r2, r3, #7
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2200      	movs	r2, #0
 8000db0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000dbe:	883a      	ldrh	r2, [r7, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	78ba      	ldrb	r2, [r7, #2]
 8000dc8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000dca:	78bb      	ldrb	r3, [r7, #2]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d102      	bne.n	8000dd6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d101      	bne.n	8000de4 <HAL_PCD_EP_Open+0x94>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e00e      	b.n	8000e02 <HAL_PCD_EP_Open+0xb2>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 fce6 	bl	80027c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8000e00:	7afb      	ldrb	r3, [r7, #11]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da0e      	bge.n	8000e3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	f003 0207 	and.w	r2, r3, #7
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	3310      	adds	r3, #16
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	705a      	strb	r2, [r3, #1]
 8000e3a:	e00e      	b.n	8000e5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	f003 0207 	and.w	r2, r3, #7
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <HAL_PCD_EP_Close+0x6a>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e00e      	b.n	8000e92 <HAL_PCD_EP_Close+0x88>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68f9      	ldr	r1, [r7, #12]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 f862 	bl	8002f4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	f003 0207 	and.w	r2, r3, #7
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eda:	7afb      	ldrb	r3, [r7, #11]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6979      	ldr	r1, [r7, #20]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fa1a 	bl	8003326 <USB_EPStartXfer>

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	f003 0207 	and.w	r2, r3, #7
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	f003 0207 	and.w	r2, r3, #7
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2201      	movs	r2, #1
 8000f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6979      	ldr	r1, [r7, #20]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 f9cb 	bl	8003326 <USB_EPStartXfer>

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	7912      	ldrb	r2, [r2, #4]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e03e      	b.n	8001036 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da0e      	bge.n	8000fde <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	f003 0207 	and.w	r2, r3, #7
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	3310      	adds	r3, #16
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	705a      	strb	r2, [r3, #1]
 8000fdc:	e00c      	b.n	8000ff8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000fde:	78fa      	ldrb	r2, [r7, #3]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	b2da      	uxtb	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_PCD_EP_SetStall+0x7e>
 8001014:	2302      	movs	r3, #2
 8001016:	e00e      	b.n	8001036 <HAL_PCD_EP_SetStall+0x9c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68f9      	ldr	r1, [r7, #12]
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fd2e 	bl	8004a88 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	7912      	ldrb	r2, [r2, #4]
 8001054:	4293      	cmp	r3, r2
 8001056:	d901      	bls.n	800105c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e040      	b.n	80010de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800105c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001060:	2b00      	cmp	r3, #0
 8001062:	da0e      	bge.n	8001082 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	f003 0207 	and.w	r2, r3, #7
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	3310      	adds	r3, #16
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2201      	movs	r2, #1
 800107e:	705a      	strb	r2, [r3, #1]
 8001080:	e00e      	b.n	80010a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	f003 0207 	and.w	r2, r3, #7
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_PCD_EP_ClrStall+0x82>
 80010bc:	2302      	movs	r3, #2
 80010be:	e00e      	b.n	80010de <HAL_PCD_EP_ClrStall+0xa0>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 fd2b 	bl	8004b2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b096      	sub	sp, #88	; 0x58
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80010ee:	e3ae      	b.n	800184e <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80010fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800110a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 8170 	bne.w	80013f4 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001114:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d14d      	bne.n	80011bc <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800112c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001130:	81fb      	strh	r3, [r7, #14]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800113c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001140:	b29b      	uxth	r3, r3
 8001142:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3310      	adds	r3, #16
 8001148:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	4413      	add	r3, r2
 8001164:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800116e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001170:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	441a      	add	r2, r3
 800117c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800117e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f006 fbe3 	bl	800794e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7b1b      	ldrb	r3, [r3, #12]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 835d 	beq.w	800184e <PCD_EP_ISR_Handler+0x768>
 8001194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	f040 8358 	bne.w	800184e <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7b1b      	ldrb	r3, [r3, #12]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b292      	uxth	r2, r2
 80011b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	731a      	strb	r2, [r3, #12]
 80011ba:	e348      	b.n	800184e <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80011c2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80011ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d032      	beq.n	8001240 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001200:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800120c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800120e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001212:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001214:	b29b      	uxth	r3, r3
 8001216:	f003 fdb3 	bl	8004d80 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29a      	uxth	r2, r3
 8001222:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001226:	4013      	ands	r3, r2
 8001228:	823b      	strh	r3, [r7, #16]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	8a3a      	ldrh	r2, [r7, #16]
 8001230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001234:	b292      	uxth	r2, r2
 8001236:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f006 fb5b 	bl	80078f4 <HAL_PCD_SetupStageCallback>
 800123e:	e306      	b.n	800184e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001240:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001244:	2b00      	cmp	r3, #0
 8001246:	f280 8302 	bge.w	800184e <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001256:	4013      	ands	r3, r2
 8001258:	83fb      	strh	r3, [r7, #30]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	8bfa      	ldrh	r2, [r7, #30]
 8001260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001264:	b292      	uxth	r2, r2
 8001266:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	4413      	add	r3, r2
 8001282:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800128c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800128e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d019      	beq.n	80012cc <PCD_EP_ISR_Handler+0x1e6>
 8001298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d015      	beq.n	80012cc <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a6:	6959      	ldr	r1, [r3, #20]
 80012a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80012ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	f003 fd65 	bl	8004d80 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80012b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	441a      	add	r2, r3
 80012c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f006 fb26 	bl	8007918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80012d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 82b5 	bne.w	800184e <PCD_EP_ISR_Handler+0x768>
 80012e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80012ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80012f0:	f000 82ad 	beq.w	800184e <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4413      	add	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800131e:	b29a      	uxth	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	801a      	strh	r2, [r3, #0]
 8001324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b3e      	cmp	r3, #62	; 0x3e
 800132a:	d91d      	bls.n	8001368 <PCD_EP_ISR_Handler+0x282>
 800132c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
 8001334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <PCD_EP_ISR_Handler+0x260>
 8001340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001342:	3b01      	subs	r3, #1
 8001344:	647b      	str	r3, [r7, #68]	; 0x44
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29a      	uxth	r2, r3
 800134c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134e:	b29b      	uxth	r3, r3
 8001350:	029b      	lsls	r3, r3, #10
 8001352:	b29b      	uxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800135c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001360:	b29a      	uxth	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	e026      	b.n	80013b6 <PCD_EP_ISR_Handler+0x2d0>
 8001368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <PCD_EP_ISR_Handler+0x2a0>
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800137a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800137e:	b29a      	uxth	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	801a      	strh	r2, [r3, #0]
 8001384:	e017      	b.n	80013b6 <PCD_EP_ISR_Handler+0x2d0>
 8001386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	647b      	str	r3, [r7, #68]	; 0x44
 800138e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <PCD_EP_ISR_Handler+0x2ba>
 800139a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139c:	3301      	adds	r3, #1
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013c6:	827b      	strh	r3, [r7, #18]
 80013c8:	8a7b      	ldrh	r3, [r7, #18]
 80013ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80013ce:	827b      	strh	r3, [r7, #18]
 80013d0:	8a7b      	ldrh	r3, [r7, #18]
 80013d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80013d6:	827b      	strh	r3, [r7, #18]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	8a7b      	ldrh	r3, [r7, #18]
 80013de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	8013      	strh	r3, [r2, #0]
 80013f2:	e22c      	b.n	800184e <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001408:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800140c:	2b00      	cmp	r3, #0
 800140e:	f280 80f6 	bge.w	80015fe <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	b29a      	uxth	r2, r3
 8001424:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001428:	4013      	ands	r3, r2
 800142a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001440:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001444:	b292      	uxth	r2, r2
 8001446:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001448:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800145e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001460:	7b1b      	ldrb	r3, [r3, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d123      	bne.n	80014ae <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4413      	add	r3, r2
 8001480:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800148a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800148e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 808e 	beq.w	80015b4 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149e:	6959      	ldr	r1, [r3, #20]
 80014a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a2:	88da      	ldrh	r2, [r3, #6]
 80014a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80014a8:	f003 fc6a 	bl	8004d80 <USB_ReadPMA>
 80014ac:	e082      	b.n	80015b4 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80014ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d10a      	bne.n	80014cc <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80014b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014ba:	461a      	mov	r2, r3
 80014bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f9d3 	bl	800186a <HAL_PCD_EP_DB_Receive>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80014ca:	e073      	b.n	80015b4 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014e6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	441a      	add	r2, r3
 80014f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80014fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800150c:	b29b      	uxth	r3, r3
 800150e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d022      	beq.n	8001570 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001532:	b29b      	uxth	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4413      	add	r3, r2
 8001544:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800154e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001552:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001556:	2b00      	cmp	r3, #0
 8001558:	d02c      	beq.n	80015b4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001560:	6959      	ldr	r1, [r3, #20]
 8001562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001564:	891a      	ldrh	r2, [r3, #8]
 8001566:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800156a:	f003 fc09 	bl	8004d80 <USB_ReadPMA>
 800156e:	e021      	b.n	80015b4 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	4413      	add	r3, r2
 800158a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001594:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001598:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a6:	6959      	ldr	r1, [r3, #20]
 80015a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015aa:	895a      	ldrh	r2, [r3, #10]
 80015ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80015b0:	f003 fbe6 	bl	8004d80 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80015b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80015bc:	441a      	add	r2, r3
 80015be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80015c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80015ca:	441a      	add	r2, r3
 80015cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80015d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <PCD_EP_ISR_Handler+0x4fe>
 80015d8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80015dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d206      	bcs.n	80015f2 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80015e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f006 f994 	bl	8007918 <HAL_PCD_DataOutStageCallback>
 80015f0:	e005      	b.n	80015fe <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fe94 	bl	8003326 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80015fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8121 	beq.w	800184e <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800160c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	3310      	adds	r3, #16
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	441a      	add	r2, r3
 800164c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001658:	b29b      	uxth	r3, r3
 800165a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800165c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800165e:	78db      	ldrb	r3, [r3, #3]
 8001660:	2b01      	cmp	r3, #1
 8001662:	f040 80a2 	bne.w	80017aa <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800166c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166e:	7b1b      	ldrb	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8093 	beq.w	800179c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001676:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800167a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d046      	beq.n	8001710 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001684:	785b      	ldrb	r3, [r3, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d126      	bne.n	80016d8 <PCD_EP_ISR_Handler+0x5f2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	4413      	add	r3, r2
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	00da      	lsls	r2, r3, #3
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	4413      	add	r3, r2
 80016ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016bc:	b29a      	uxth	r2, r3
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	801a      	strh	r2, [r3, #0]
 80016d6:	e061      	b.n	800179c <PCD_EP_ISR_Handler+0x6b6>
 80016d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d15d      	bne.n	800179c <PCD_EP_ISR_Handler+0x6b6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	4413      	add	r3, r2
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	00da      	lsls	r2, r3, #3
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	4413      	add	r3, r2
 8001702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	e045      	b.n	800179c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d126      	bne.n	800176c <PCD_EP_ISR_Handler+0x686>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800172c:	b29b      	uxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001732:	4413      	add	r3, r2
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
 8001736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	00da      	lsls	r2, r3, #3
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	4413      	add	r3, r2
 8001740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001750:	b29a      	uxth	r2, r3
 8001752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001754:	801a      	strh	r2, [r3, #0]
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001764:	b29a      	uxth	r2, r3
 8001766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001768:	801a      	strh	r2, [r3, #0]
 800176a:	e017      	b.n	800179c <PCD_EP_ISR_Handler+0x6b6>
 800176c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d113      	bne.n	800179c <PCD_EP_ISR_Handler+0x6b6>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001782:	4413      	add	r3, r2
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	00da      	lsls	r2, r3, #3
 800178c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178e:	4413      	add	r3, r2
 8001790:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800179c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f006 f8d3 	bl	800794e <HAL_PCD_DataInStageCallback>
 80017a8:	e051      	b.n	800184e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80017aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d144      	bne.n	8001840 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017be:	b29b      	uxth	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d907      	bls.n	80017fa <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80017ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f6:	619a      	str	r2, [r3, #24]
 80017f8:	e002      	b.n	8001800 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f006 f89d 	bl	800794e <HAL_PCD_DataInStageCallback>
 8001814:	e01b      	b.n	800184e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800181e:	441a      	add	r2, r3
 8001820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001822:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800182c:	441a      	add	r2, r3
 800182e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001830:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fd74 	bl	8003326 <USB_EPStartXfer>
 800183e:	e006      	b.n	800184e <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001840:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001844:	461a      	mov	r2, r3
 8001846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f917 	bl	8001a7c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001856:	b29b      	uxth	r3, r3
 8001858:	b21b      	sxth	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	f6ff ac48 	blt.w	80010f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3758      	adds	r7, #88	; 0x58
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b088      	sub	sp, #32
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	4613      	mov	r3, r2
 8001876:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d07c      	beq.n	800197c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4413      	add	r3, r2
 800189c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	8b7b      	ldrh	r3, [r7, #26]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d306      	bcc.n	80018c0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	8b7b      	ldrh	r3, [r7, #26]
 80018b8:	1ad2      	subs	r2, r2, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	619a      	str	r2, [r3, #24]
 80018be:	e002      	b.n	80018c6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d123      	bne.n	8001916 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e8:	833b      	strh	r3, [r7, #24]
 80018ea:	8b3b      	ldrh	r3, [r7, #24]
 80018ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018f0:	833b      	strh	r3, [r7, #24]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	441a      	add	r2, r3
 8001900:	8b3b      	ldrh	r3, [r7, #24]
 8001902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800190a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001912:	b29b      	uxth	r3, r3
 8001914:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01f      	beq.n	8001960 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193a:	82fb      	strh	r3, [r7, #22]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	441a      	add	r2, r3
 800194a:	8afb      	ldrh	r3, [r7, #22]
 800194c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800195c:	b29b      	uxth	r3, r3
 800195e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001960:	8b7b      	ldrh	r3, [r7, #26]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8085 	beq.w	8001a72 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	6959      	ldr	r1, [r3, #20]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	891a      	ldrh	r2, [r3, #8]
 8001974:	8b7b      	ldrh	r3, [r7, #26]
 8001976:	f003 fa03 	bl	8004d80 <USB_ReadPMA>
 800197a:	e07a      	b.n	8001a72 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001984:	b29b      	uxth	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	4413      	add	r3, r2
 8001996:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	8b7b      	ldrh	r3, [r7, #26]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d306      	bcc.n	80019ba <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	8b7b      	ldrh	r3, [r7, #26]
 80019b2:	1ad2      	subs	r2, r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	619a      	str	r2, [r3, #24]
 80019b8:	e002      	b.n	80019c0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d123      	bne.n	8001a10 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e2:	83fb      	strh	r3, [r7, #30]
 80019e4:	8bfb      	ldrh	r3, [r7, #30]
 80019e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019ea:	83fb      	strh	r3, [r7, #30]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	441a      	add	r2, r3
 80019fa:	8bfb      	ldrh	r3, [r7, #30]
 80019fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11f      	bne.n	8001a5a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a34:	83bb      	strh	r3, [r7, #28]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	441a      	add	r2, r3
 8001a44:	8bbb      	ldrh	r3, [r7, #28]
 8001a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a5a:	8b7b      	ldrh	r3, [r7, #26]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6959      	ldr	r1, [r3, #20]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	895a      	ldrh	r2, [r3, #10]
 8001a6c:	8b7b      	ldrh	r3, [r7, #26]
 8001a6e:	f003 f987 	bl	8004d80 <USB_ReadPMA>
    }
  }

  return count;
 8001a72:	8b7b      	ldrh	r3, [r7, #26]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0a4      	sub	sp, #144	; 0x90
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 81db 	beq.w	8001e4c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d907      	bls.n	8001ada <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	699a      	ldr	r2, [r3, #24]
 8001ace:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	619a      	str	r2, [r3, #24]
 8001ad8:	e002      	b.n	8001ae0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 80b9 	bne.w	8001c5c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d126      	bne.n	8001b40 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	4413      	add	r3, r2
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	00da      	lsls	r2, r3, #3
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	4413      	add	r3, r2
 8001b14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b28:	801a      	strh	r2, [r3, #0]
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	801a      	strh	r2, [r3, #0]
 8001b3e:	e01a      	b.n	8001b76 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d116      	bne.n	8001b76 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	4413      	add	r3, r2
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	00da      	lsls	r2, r3, #3
 8001b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b68:	4413      	add	r3, r2
 8001b6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b72:	2200      	movs	r2, #0
 8001b74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d126      	bne.n	8001bd2 <HAL_PCD_EP_DB_Transmit+0x156>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	00da      	lsls	r2, r3, #3
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	801a      	strh	r2, [r3, #0]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	801a      	strh	r2, [r3, #0]
 8001bd0:	e017      	b.n	8001c02 <HAL_PCD_EP_DB_Transmit+0x186>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d113      	bne.n	8001c02 <HAL_PCD_EP_DB_Transmit+0x186>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	4413      	add	r3, r2
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	00da      	lsls	r2, r3, #3
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4619      	mov	r1, r3
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f005 fea0 	bl	800794e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 82fa 	beq.w	800220e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c34:	82fb      	strh	r3, [r7, #22]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	441a      	add	r2, r3
 8001c44:	8afb      	ldrh	r3, [r7, #22]
 8001c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	8013      	strh	r3, [r2, #0]
 8001c5a:	e2d8      	b.n	800220e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d021      	beq.n	8001caa <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	441a      	add	r2, r3
 8001c92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	f040 82ac 	bne.w	800220e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cbe:	441a      	add	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ccc:	441a      	add	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d30b      	bcc.n	8001cf6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cee:	1ad2      	subs	r2, r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	621a      	str	r2, [r3, #32]
 8001cf4:	e017      	b.n	8001d26 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d108      	bne.n	8001d10 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001cfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d0e:	e00a      	b.n	8001d26 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d165      	bne.n	8001dfa <HAL_PCD_EP_DB_Transmit+0x37e>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d42:	4413      	add	r3, r2
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	00da      	lsls	r2, r3, #3
 8001d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4e:	4413      	add	r3, r2
 8001d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d6a:	2b3e      	cmp	r3, #62	; 0x3e
 8001d6c:	d91d      	bls.n	8001daa <HAL_PCD_EP_DB_Transmit+0x32e>
 8001d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_PCD_EP_DB_Transmit+0x30c>
 8001d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d84:	3b01      	subs	r3, #1
 8001d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	029b      	lsls	r3, r3, #10
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da6:	801a      	strh	r2, [r3, #0]
 8001da8:	e044      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <HAL_PCD_EP_DB_Transmit+0x34c>
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	e035      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_PCD_EP_DB_Transmit+0x366>
 8001ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dde:	3301      	adds	r3, #1
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	e01c      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d118      	bne.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e16:	4413      	add	r3, r2
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	00da      	lsls	r2, r3, #3
 8001e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e22:	4413      	add	r3, r2
 8001e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e28:	643b      	str	r3, [r7, #64]	; 0x40
 8001e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e32:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	6959      	ldr	r1, [r3, #20]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	891a      	ldrh	r2, [r3, #8]
 8001e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f002 ff59 	bl	8004cfc <USB_WritePMA>
 8001e4a:	e1e0      	b.n	800220e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e70:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d307      	bcc.n	8001e90 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e88:	1ad2      	subs	r2, r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	619a      	str	r2, [r3, #24]
 8001e8e:	e002      	b.n	8001e96 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 80c0 	bne.w	8002020 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d126      	bne.n	8001ef6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ebc:	4413      	add	r3, r2
 8001ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	00da      	lsls	r2, r3, #3
 8001ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ec8:	4413      	add	r3, r2
 8001eca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ece:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	e01a      	b.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d116      	bne.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	667b      	str	r3, [r7, #100]	; 0x64
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f12:	4413      	add	r3, r2
 8001f14:	667b      	str	r3, [r7, #100]	; 0x64
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	00da      	lsls	r2, r3, #3
 8001f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f1e:	4413      	add	r3, r2
 8001f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f24:	663b      	str	r3, [r7, #96]	; 0x60
 8001f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f28:	2200      	movs	r2, #0
 8001f2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	677b      	str	r3, [r7, #116]	; 0x74
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d12b      	bne.n	8001f92 <HAL_PCD_EP_DB_Transmit+0x516>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f4e:	4413      	add	r3, r2
 8001f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	00da      	lsls	r2, r3, #3
 8001f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	e017      	b.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x546>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d113      	bne.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x546>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa8:	4413      	add	r3, r2
 8001faa:	677b      	str	r3, [r7, #116]	; 0x74
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	00da      	lsls	r2, r3, #3
 8001fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fba:	673b      	str	r3, [r7, #112]	; 0x70
 8001fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f005 fcc0 	bl	800794e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 811a 	bne.w	800220e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800200a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800200e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201a:	b29b      	uxth	r3, r3
 800201c:	8013      	strh	r3, [r2, #0]
 800201e:	e0f6      	b.n	800220e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	441a      	add	r2, r3
 8002056:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800205a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800206a:	b29b      	uxth	r3, r3
 800206c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002074:	2b01      	cmp	r3, #1
 8002076:	f040 80ca 	bne.w	800220e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002082:	441a      	add	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	69da      	ldr	r2, [r3, #28]
 800208c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002090:	441a      	add	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d30b      	bcc.n	80020ba <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020b2:	1ad2      	subs	r2, r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	621a      	str	r2, [r3, #32]
 80020b8:	e017      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80020c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020d2:	e00a      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	657b      	str	r3, [r7, #84]	; 0x54
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	785b      	ldrb	r3, [r3, #1]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d165      	bne.n	80021c4 <HAL_PCD_EP_DB_Transmit+0x748>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210c:	4413      	add	r3, r2
 800210e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	00da      	lsls	r2, r3, #3
 8002116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002118:	4413      	add	r3, r2
 800211a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800211e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212a:	b29a      	uxth	r2, r3
 800212c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800212e:	801a      	strh	r2, [r3, #0]
 8002130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002134:	2b3e      	cmp	r3, #62	; 0x3e
 8002136:	d91d      	bls.n	8002174 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800214c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800214e:	3b01      	subs	r3, #1
 8002150:	66bb      	str	r3, [r7, #104]	; 0x68
 8002152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29a      	uxth	r2, r3
 8002158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800215a:	b29b      	uxth	r3, r3
 800215c:	029b      	lsls	r3, r3, #10
 800215e:	b29b      	uxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800216c:	b29a      	uxth	r2, r3
 800216e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	e041      	b.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <HAL_PCD_EP_DB_Transmit+0x716>
 800217c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218a:	b29a      	uxth	r2, r3
 800218c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e032      	b.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	66bb      	str	r3, [r7, #104]	; 0x68
 800219a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_PCD_EP_DB_Transmit+0x730>
 80021a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a8:	3301      	adds	r3, #1
 80021aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	029b      	lsls	r3, r3, #10
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4313      	orrs	r3, r2
 80021bc:	b29a      	uxth	r2, r3
 80021be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	e019      	b.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d115      	bne.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021da:	4413      	add	r3, r2
 80021dc:	657b      	str	r3, [r7, #84]	; 0x54
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	00da      	lsls	r2, r3, #3
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	4413      	add	r3, r2
 80021e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ec:	653b      	str	r3, [r7, #80]	; 0x50
 80021ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	6959      	ldr	r1, [r3, #20]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	895a      	ldrh	r2, [r3, #10]
 8002204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002208:	b29b      	uxth	r3, r3
 800220a:	f002 fd77 	bl	8004cfc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002228:	82bb      	strh	r3, [r7, #20]
 800222a:	8abb      	ldrh	r3, [r7, #20]
 800222c:	f083 0310 	eor.w	r3, r3, #16
 8002230:	82bb      	strh	r3, [r7, #20]
 8002232:	8abb      	ldrh	r3, [r7, #20]
 8002234:	f083 0320 	eor.w	r3, r3, #32
 8002238:	82bb      	strh	r3, [r7, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	441a      	add	r2, r3
 8002248:	8abb      	ldrh	r3, [r7, #20]
 800224a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800224e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225a:	b29b      	uxth	r3, r3
 800225c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3790      	adds	r7, #144	; 0x90
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	817b      	strh	r3, [r7, #10]
 8002276:	4613      	mov	r3, r2
 8002278:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800227a:	897b      	ldrh	r3, [r7, #10]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002286:	897b      	ldrh	r3, [r7, #10]
 8002288:	f003 0207 	and.w	r2, r3, #7
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	3310      	adds	r3, #16
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e009      	b.n	80022b2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800229e:	897a      	ldrh	r2, [r7, #10]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022b2:	893b      	ldrh	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2200      	movs	r2, #0
 80022bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	80da      	strh	r2, [r3, #6]
 80022c6:	e00b      	b.n	80022e0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2201      	movs	r2, #1
 80022cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	b29a      	uxth	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002312:	b29b      	uxth	r3, r3
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002326:	b29b      	uxth	r3, r3
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800234c:	2300      	movs	r3, #0
 800234e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002350:	2300      	movs	r3, #0
 8002352:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8098 	beq.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	6593      	str	r3, [r2, #88]	; 0x58
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800238e:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a39      	ldr	r2, [pc, #228]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800239a:	f7fe f9e1 	bl	8000760 <HAL_GetTick>
 800239e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a0:	e009      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a2:	f7fe f9dd 	bl	8000760 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d902      	bls.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	74fb      	strb	r3, [r7, #19]
        break;
 80023b4:	e005      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b6:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0ef      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d159      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01e      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d019      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002410:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe f99d 	bl	8000760 <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	e00b      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe f999 	bl	8000760 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d902      	bls.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	74fb      	strb	r3, [r7, #19]
            break;
 8002440:	e006      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ec      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10b      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	4903      	ldr	r1, [pc, #12]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800246c:	e008      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	74bb      	strb	r3, [r7, #18]
 8002472:	e005      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002480:	7c7b      	ldrb	r3, [r7, #17]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002486:	4ba6      	ldr	r3, [pc, #664]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	4aa5      	ldr	r2, [pc, #660]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800249e:	4ba0      	ldr	r3, [pc, #640]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f023 0203 	bic.w	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	499c      	ldr	r1, [pc, #624]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c0:	4b97      	ldr	r3, [pc, #604]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f023 020c 	bic.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4994      	ldr	r1, [pc, #592]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024e2:	4b8f      	ldr	r3, [pc, #572]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	498b      	ldr	r1, [pc, #556]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002504:	4b86      	ldr	r3, [pc, #536]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	4983      	ldr	r1, [pc, #524]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002526:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	497a      	ldr	r1, [pc, #488]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002548:	4b75      	ldr	r3, [pc, #468]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	4972      	ldr	r1, [pc, #456]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4969      	ldr	r1, [pc, #420]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800258c:	4b64      	ldr	r3, [pc, #400]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4961      	ldr	r1, [pc, #388]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ae:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	4958      	ldr	r1, [pc, #352]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	4950      	ldr	r1, [pc, #320]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f0:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a4a      	ldr	r2, [pc, #296]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002604:	2b00      	cmp	r3, #0
 8002606:	d015      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002608:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	4942      	ldr	r1, [pc, #264]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002626:	d105      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002628:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a3c      	ldr	r2, [pc, #240]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002632:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d015      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4934      	ldr	r1, [pc, #208]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265e:	d105      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	4926      	ldr	r1, [pc, #152]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002696:	d105      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4918      	ldr	r1, [pc, #96]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ce:	d105      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	490a      	ldr	r1, [pc, #40]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002706:	d105      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002714:	7cbb      	ldrb	r3, [r7, #18]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000

08002724 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002734:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002738:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800275a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800275e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	b29b      	uxth	r3, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	b29b      	uxth	r3, r3
 8002770:	4013      	ands	r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b09d      	sub	sp, #116	; 0x74
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	78db      	ldrb	r3, [r3, #3]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d81f      	bhi.n	8002836 <USB_ActivateEndpoint+0x72>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <USB_ActivateEndpoint+0x38>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002829 	.word	0x08002829
 8002804:	0800283f 	.word	0x0800283f
 8002808:	0800281b 	.word	0x0800281b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800280c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002814:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002818:	e012      	b.n	8002840 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800281a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800281e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002822:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002826:	e00b      	b.n	8002840 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002828:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800282c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002830:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002834:	e004      	b.n	8002840 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800283c:	e000      	b.n	8002840 <USB_ActivateEndpoint+0x7c>
      break;
 800283e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800284e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285e:	b29b      	uxth	r3, r3
 8002860:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	b21b      	sxth	r3, r3
 8002872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	b21a      	sxth	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b21b      	sxth	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b21b      	sxth	r3, r3
 8002886:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	441a      	add	r2, r3
 8002894:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	7b1b      	ldrb	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8178 	bne.w	8002ba6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8084 	beq.w	80029c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00da      	lsls	r2, r3, #3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	88db      	ldrh	r3, [r3, #6]
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	827b      	strh	r3, [r7, #18]
 8002902:	8a7b      	ldrh	r3, [r7, #18]
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <USB_ActivateEndpoint+0x180>
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	823b      	strh	r3, [r7, #16]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	441a      	add	r2, r3
 800292e:	8a3b      	ldrh	r3, [r7, #16]
 8002930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002940:	b29b      	uxth	r3, r3
 8002942:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	78db      	ldrb	r3, [r3, #3]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d020      	beq.n	800298e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002962:	81bb      	strh	r3, [r7, #12]
 8002964:	89bb      	ldrh	r3, [r7, #12]
 8002966:	f083 0320 	eor.w	r3, r3, #32
 800296a:	81bb      	strh	r3, [r7, #12]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	441a      	add	r2, r3
 8002976:	89bb      	ldrh	r3, [r7, #12]
 8002978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	b29b      	uxth	r3, r3
 800298a:	8013      	strh	r3, [r2, #0]
 800298c:	e2d5      	b.n	8002f3a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a4:	81fb      	strh	r3, [r7, #14]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	441a      	add	r2, r3
 80029b0:	89fb      	ldrh	r3, [r7, #14]
 80029b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]
 80029c6:	e2b8      	b.n	8002f3a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	4413      	add	r3, r2
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	00da      	lsls	r2, r3, #3
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	88db      	ldrh	r3, [r3, #6]
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	4413      	add	r3, r2
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	00da      	lsls	r2, r3, #3
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	4413      	add	r3, r2
 8002a1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	801a      	strh	r2, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b3e      	cmp	r3, #62	; 0x3e
 8002a36:	d91d      	bls.n	8002a74 <USB_ActivateEndpoint+0x2b0>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <USB_ActivateEndpoint+0x28e>
 8002a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	e026      	b.n	8002ac2 <USB_ActivateEndpoint+0x2fe>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <USB_ActivateEndpoint+0x2ce>
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	e017      	b.n	8002ac2 <USB_ActivateEndpoint+0x2fe>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <USB_ActivateEndpoint+0x2e8>
 8002aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	029b      	lsls	r3, r3, #10
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	4313      	orrs	r3, r2
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01b      	beq.n	8002b12 <USB_ActivateEndpoint+0x34e>
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	843b      	strh	r3, [r7, #32]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	441a      	add	r2, r3
 8002afc:	8c3b      	ldrh	r3, [r7, #32]
 8002afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d124      	bne.n	8002b64 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b30:	83bb      	strh	r3, [r7, #28]
 8002b32:	8bbb      	ldrh	r3, [r7, #28]
 8002b34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b38:	83bb      	strh	r3, [r7, #28]
 8002b3a:	8bbb      	ldrh	r3, [r7, #28]
 8002b3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b40:	83bb      	strh	r3, [r7, #28]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	8bbb      	ldrh	r3, [r7, #28]
 8002b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	8013      	strh	r3, [r2, #0]
 8002b62:	e1ea      	b.n	8002f3a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	83fb      	strh	r3, [r7, #30]
 8002b7c:	8bfb      	ldrh	r3, [r7, #30]
 8002b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b82:	83fb      	strh	r3, [r7, #30]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	8bfb      	ldrh	r3, [r7, #30]
 8002b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	8013      	strh	r3, [r2, #0]
 8002ba4:	e1c9      	b.n	8002f3a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	78db      	ldrb	r3, [r3, #3]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d11e      	bne.n	8002bec <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bde:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	441a      	add	r2, r3
 8002c10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c38:	4413      	add	r3, r2
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	00da      	lsls	r2, r3, #3
 8002c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	891b      	ldrh	r3, [r3, #8]
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	4413      	add	r3, r2
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	00da      	lsls	r2, r3, #3
 8002c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c78:	4413      	add	r3, r2
 8002c7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	895b      	ldrh	r3, [r3, #10]
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 8093 	bne.w	8002dc0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01b      	beq.n	8002cee <USB_ActivateEndpoint+0x52a>
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ccc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	441a      	add	r2, r3
 8002cd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002cfc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01b      	beq.n	8002d3e <USB_ActivateEndpoint+0x57a>
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	441a      	add	r2, r3
 8002d28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d54:	873b      	strh	r3, [r7, #56]	; 0x38
 8002d56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d5c:	873b      	strh	r3, [r7, #56]	; 0x38
 8002d5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d64:	873b      	strh	r3, [r7, #56]	; 0x38
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8013      	strh	r3, [r2, #0]
 8002dbe:	e0bc      	b.n	8002f3a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01d      	beq.n	8002e18 <USB_ActivateEndpoint+0x654>
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	441a      	add	r2, r3
 8002e00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01d      	beq.n	8002e70 <USB_ActivateEndpoint+0x6ac>
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	441a      	add	r2, r3
 8002e58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	78db      	ldrb	r3, [r3, #3]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d024      	beq.n	8002ec2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e96:	f083 0320 	eor.w	r3, r3, #32
 8002e9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	441a      	add	r2, r3
 8002ea8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	8013      	strh	r3, [r2, #0]
 8002ec0:	e01d      	b.n	8002efe <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8002f3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3774      	adds	r7, #116	; 0x74
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop

08002f4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b08d      	sub	sp, #52	; 0x34
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	7b1b      	ldrb	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 808e 	bne.w	800307c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	785b      	ldrb	r3, [r3, #1]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d044      	beq.n	8002ff2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	81bb      	strh	r3, [r7, #12]
 8002f76:	89bb      	ldrh	r3, [r7, #12]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01b      	beq.n	8002fb8 <USB_DeactivateEndpoint+0x6c>
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	817b      	strh	r3, [r7, #10]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fce:	813b      	strh	r3, [r7, #8]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	893b      	ldrh	r3, [r7, #8]
 8002fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8013      	strh	r3, [r2, #0]
 8002ff0:	e192      	b.n	8003318 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	827b      	strh	r3, [r7, #18]
 8003000:	8a7b      	ldrh	r3, [r7, #18]
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01b      	beq.n	8003042 <USB_DeactivateEndpoint+0xf6>
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003020:	823b      	strh	r3, [r7, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	441a      	add	r2, r3
 800302c:	8a3b      	ldrh	r3, [r7, #16]
 800302e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800303a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303e:	b29b      	uxth	r3, r3
 8003040:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	81fb      	strh	r3, [r7, #14]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]
 800307a:	e14d      	b.n	8003318 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 80a5 	bne.w	80031d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	843b      	strh	r3, [r7, #32]
 8003094:	8c3b      	ldrh	r3, [r7, #32]
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01b      	beq.n	80030d6 <USB_DeactivateEndpoint+0x18a>
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b4:	83fb      	strh	r3, [r7, #30]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	441a      	add	r2, r3
 80030c0:	8bfb      	ldrh	r3, [r7, #30]
 80030c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	83bb      	strh	r3, [r7, #28]
 80030e4:	8bbb      	ldrh	r3, [r7, #28]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01b      	beq.n	8003126 <USB_DeactivateEndpoint+0x1da>
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003104:	837b      	strh	r3, [r7, #26]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	441a      	add	r2, r3
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800311a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003122:	b29b      	uxth	r3, r3
 8003124:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313c:	833b      	strh	r3, [r7, #24]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	8b3b      	ldrh	r3, [r7, #24]
 800314a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800314e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800315a:	b29b      	uxth	r3, r3
 800315c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003174:	82fb      	strh	r3, [r7, #22]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	441a      	add	r2, r3
 8003180:	8afb      	ldrh	r3, [r7, #22]
 8003182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	b29b      	uxth	r3, r3
 8003194:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ac:	82bb      	strh	r3, [r7, #20]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	8abb      	ldrh	r3, [r7, #20]
 80031ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]
 80031ce:	e0a3      	b.n	8003318 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80031de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <USB_DeactivateEndpoint+0x2d4>
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800320c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	b29b      	uxth	r3, r3
 800321e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800322e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01b      	beq.n	8003270 <USB_DeactivateEndpoint+0x324>
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800325c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003268:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800326c:	b29b      	uxth	r3, r3
 800326e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032dc:	b29b      	uxth	r3, r3
 80032de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003314:	b29b      	uxth	r3, r3
 8003316:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3734      	adds	r7, #52	; 0x34
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b0c2      	sub	sp, #264	; 0x108
 800332a:	af00      	add	r7, sp, #0
 800332c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003334:	6018      	str	r0, [r3, #0]
 8003336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800333a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800333e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 86b7 	bne.w	80040c0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	429a      	cmp	r2, r3
 800336c:	d908      	bls.n	8003380 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800336e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800337e:	e007      	b.n	8003390 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	7b1b      	ldrb	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d13a      	bne.n	8003416 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80033a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6959      	ldr	r1, [r3, #20]
 80033ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	88da      	ldrh	r2, [r3, #6]
 80033b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80033c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80033c6:	6800      	ldr	r0, [r0, #0]
 80033c8:	f001 fc98 	bl	8004cfc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80033cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	00da      	lsls	r2, r3, #3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4413      	add	r3, r2
 8003402:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	f000 be1f 	b.w	8004054 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800341a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	78db      	ldrb	r3, [r3, #3]
 8003422:	2b02      	cmp	r3, #2
 8003424:	f040 8462 	bne.w	8003cec <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800342c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	429a      	cmp	r2, r3
 8003442:	f240 83df 	bls.w	8003c04 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800344a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800347e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80034a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a1a      	ldr	r2, [r3, #32]
 80034ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b2:	1ad2      	subs	r2, r2, r3
 80034b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80034c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 81c7 	beq.w	8003876 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
 80034f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d177      	bne.n	80035f4 <USB_EPStartXfer+0x2ce>
 8003504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	4413      	add	r3, r2
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
 8003528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800352c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	00da      	lsls	r2, r3, #3
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	4413      	add	r3, r2
 800353a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354a:	b29a      	uxth	r2, r3
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003554:	2b3e      	cmp	r3, #62	; 0x3e
 8003556:	d921      	bls.n	800359c <USB_EPStartXfer+0x276>
 8003558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <USB_EPStartXfer+0x252>
 800356e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003572:	3b01      	subs	r3, #1
 8003574:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29a      	uxth	r2, r3
 800357e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003582:	b29b      	uxth	r3, r3
 8003584:	029b      	lsls	r3, r3, #10
 8003586:	b29b      	uxth	r3, r3
 8003588:	4313      	orrs	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003594:	b29a      	uxth	r2, r3
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	e050      	b.n	800363e <USB_EPStartXfer+0x318>
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <USB_EPStartXfer+0x294>
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	801a      	strh	r2, [r3, #0]
 80035b8:	e041      	b.n	800363e <USB_EPStartXfer+0x318>
 80035ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <USB_EPStartXfer+0x2b4>
 80035d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035d4:	3301      	adds	r3, #1
 80035d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	029b      	lsls	r3, r3, #10
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e024      	b.n	800363e <USB_EPStartXfer+0x318>
 80035f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d11c      	bne.n	800363e <USB_EPStartXfer+0x318>
 8003604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003612:	b29b      	uxth	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	4413      	add	r3, r2
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
 800361c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00da      	lsls	r2, r3, #3
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	4413      	add	r3, r2
 800362e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003638:	b29a      	uxth	r2, r3
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800363e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	895b      	ldrh	r3, [r3, #10]
 800364a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800364e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6959      	ldr	r1, [r3, #20]
 800365a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800365e:	b29b      	uxth	r3, r3
 8003660:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003664:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003668:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800366c:	6800      	ldr	r0, [r0, #0]
 800366e:	f001 fb45 	bl	8004cfc <USB_WritePMA>
            ep->xfer_buff += len;
 8003672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003682:	441a      	add	r2, r3
 8003684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d90f      	bls.n	80036cc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80036ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036bc:	1ad2      	subs	r2, r2, r3
 80036be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	621a      	str	r2, [r3, #32]
 80036ca:	e00e      	b.n	80036ea <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80036cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80036dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2200      	movs	r2, #0
 80036e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80036ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d177      	bne.n	80037ea <USB_EPStartXfer+0x4c4>
 80036fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800370a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003714:	b29b      	uxth	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4413      	add	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	00da      	lsls	r2, r3, #3
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4413      	add	r3, r2
 8003730:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003740:	b29a      	uxth	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800374a:	2b3e      	cmp	r3, #62	; 0x3e
 800374c:	d921      	bls.n	8003792 <USB_EPStartXfer+0x46c>
 800374e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <USB_EPStartXfer+0x448>
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003768:	3b01      	subs	r3, #1
 800376a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29a      	uxth	r2, r3
 8003774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003778:	b29b      	uxth	r3, r3
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	b29b      	uxth	r3, r3
 800377e:	4313      	orrs	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378a:	b29a      	uxth	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	801a      	strh	r2, [r3, #0]
 8003790:	e056      	b.n	8003840 <USB_EPStartXfer+0x51a>
 8003792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <USB_EPStartXfer+0x48a>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	801a      	strh	r2, [r3, #0]
 80037ae:	e047      	b.n	8003840 <USB_EPStartXfer+0x51a>
 80037b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80037ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <USB_EPStartXfer+0x4aa>
 80037c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ca:	3301      	adds	r3, #1
 80037cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037da:	b29b      	uxth	r3, r3
 80037dc:	029b      	lsls	r3, r3, #10
 80037de:	b29b      	uxth	r3, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	e02a      	b.n	8003840 <USB_EPStartXfer+0x51a>
 80037ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d122      	bne.n	8003840 <USB_EPStartXfer+0x51a>
 80037fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800380a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003814:	b29b      	uxth	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	4413      	add	r3, r2
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	00da      	lsls	r2, r3, #3
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	4413      	add	r3, r2
 8003830:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800383a:	b29a      	uxth	r2, r3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	891b      	ldrh	r3, [r3, #8]
 800384c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6959      	ldr	r1, [r3, #20]
 800385c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003860:	b29b      	uxth	r3, r3
 8003862:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003866:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800386a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800386e:	6800      	ldr	r0, [r0, #0]
 8003870:	f001 fa44 	bl	8004cfc <USB_WritePMA>
 8003874:	e3ee      	b.n	8004054 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800387a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	785b      	ldrb	r3, [r3, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d177      	bne.n	8003976 <USB_EPStartXfer+0x650>
 8003886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800388a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
 8003892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a6:	4413      	add	r3, r2
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80038aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	00da      	lsls	r2, r3, #3
 80038b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ba:	4413      	add	r3, r2
 80038bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038c0:	647b      	str	r3, [r7, #68]	; 0x44
 80038c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d6:	2b3e      	cmp	r3, #62	; 0x3e
 80038d8:	d921      	bls.n	800391e <USB_EPStartXfer+0x5f8>
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <USB_EPStartXfer+0x5d4>
 80038f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038f4:	3b01      	subs	r3, #1
 80038f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003904:	b29b      	uxth	r3, r3
 8003906:	029b      	lsls	r3, r3, #10
 8003908:	b29b      	uxth	r3, r3
 800390a:	4313      	orrs	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003916:	b29a      	uxth	r2, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	801a      	strh	r2, [r3, #0]
 800391c:	e056      	b.n	80039cc <USB_EPStartXfer+0x6a6>
 800391e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <USB_EPStartXfer+0x616>
 8003926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003934:	b29a      	uxth	r2, r3
 8003936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	e047      	b.n	80039cc <USB_EPStartXfer+0x6a6>
 800393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <USB_EPStartXfer+0x636>
 8003952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003956:	3301      	adds	r3, #1
 8003958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800395c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003966:	b29b      	uxth	r3, r3
 8003968:	029b      	lsls	r3, r3, #10
 800396a:	b29b      	uxth	r3, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	b29a      	uxth	r2, r3
 8003970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003972:	801a      	strh	r2, [r3, #0]
 8003974:	e02a      	b.n	80039cc <USB_EPStartXfer+0x6a6>
 8003976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800397a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	785b      	ldrb	r3, [r3, #1]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d122      	bne.n	80039cc <USB_EPStartXfer+0x6a6>
 8003986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800398a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	653b      	str	r3, [r7, #80]	; 0x50
 8003992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a6:	4413      	add	r3, r2
 80039a8:	653b      	str	r3, [r7, #80]	; 0x50
 80039aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	00da      	lsls	r2, r3, #3
 80039b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ba:	4413      	add	r3, r2
 80039bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80039cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	891b      	ldrh	r3, [r3, #8]
 80039d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6959      	ldr	r1, [r3, #20]
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80039f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80039f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	f001 f97e 	bl	8004cfc <USB_WritePMA>
            ep->xfer_buff += len;
 8003a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a10:	441a      	add	r2, r3
 8003a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d90f      	bls.n	8003a5a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a1a      	ldr	r2, [r3, #32]
 8003a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	621a      	str	r2, [r3, #32]
 8003a58:	e00e      	b.n	8003a78 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2200      	movs	r2, #0
 8003a76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
 8003a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d177      	bne.n	8003b84 <USB_EPStartXfer+0x85e>
 8003a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	4413      	add	r3, r2
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	00da      	lsls	r2, r3, #3
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	4413      	add	r3, r2
 8003aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ae6:	d921      	bls.n	8003b2c <USB_EPStartXfer+0x806>
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <USB_EPStartXfer+0x7e2>
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	029b      	lsls	r3, r3, #10
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	e050      	b.n	8003bce <USB_EPStartXfer+0x8a8>
 8003b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <USB_EPStartXfer+0x824>
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	e041      	b.n	8003bce <USB_EPStartXfer+0x8a8>
 8003b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <USB_EPStartXfer+0x844>
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	3301      	adds	r3, #1
 8003b66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	e024      	b.n	8003bce <USB_EPStartXfer+0x8a8>
 8003b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d11c      	bne.n	8003bce <USB_EPStartXfer+0x8a8>
 8003b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba8:	4413      	add	r3, r2
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
 8003bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	00da      	lsls	r2, r3, #3
 8003bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	895b      	ldrh	r3, [r3, #10]
 8003bda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6959      	ldr	r1, [r3, #20]
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003bf4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003bf8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003bfc:	6800      	ldr	r0, [r0, #0]
 8003bfe:	f001 f87d 	bl	8004cfc <USB_WritePMA>
 8003c02:	e227      	b.n	8004054 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c90:	4413      	add	r3, r2
 8003c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	00da      	lsls	r2, r3, #3
 8003ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003caa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	891b      	ldrh	r3, [r3, #8]
 8003cc2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6959      	ldr	r1, [r3, #20]
 8003cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003cdc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003ce0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003ce4:	6800      	ldr	r0, [r0, #0]
 8003ce6:	f001 f809 	bl	8004cfc <USB_WritePMA>
 8003cea:	e1b3      	b.n	8004054 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80c6 	beq.w	8003ebe <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d177      	bne.n	8003e3e <USB_EPStartXfer+0xb18>
 8003d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d6e:	4413      	add	r3, r2
 8003d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	00da      	lsls	r2, r3, #3
 8003d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d82:	4413      	add	r3, r2
 8003d84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d88:	667b      	str	r3, [r7, #100]	; 0x64
 8003d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003da0:	d921      	bls.n	8003de6 <USB_EPStartXfer+0xac0>
 8003da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <USB_EPStartXfer+0xa9c>
 8003db8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de2:	801a      	strh	r2, [r3, #0]
 8003de4:	e050      	b.n	8003e88 <USB_EPStartXfer+0xb62>
 8003de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <USB_EPStartXfer+0xade>
 8003dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e041      	b.n	8003e88 <USB_EPStartXfer+0xb62>
 8003e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <USB_EPStartXfer+0xafe>
 8003e1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	029b      	lsls	r3, r3, #10
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	e024      	b.n	8003e88 <USB_EPStartXfer+0xb62>
 8003e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d11c      	bne.n	8003e88 <USB_EPStartXfer+0xb62>
 8003e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e62:	4413      	add	r3, r2
 8003e64:	673b      	str	r3, [r7, #112]	; 0x70
 8003e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	00da      	lsls	r2, r3, #3
 8003e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e76:	4413      	add	r3, r2
 8003e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	895b      	ldrh	r3, [r3, #10]
 8003e94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6959      	ldr	r1, [r3, #20]
 8003ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003eae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003eb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	f000 ff20 	bl	8004cfc <USB_WritePMA>
 8003ebc:	e0ca      	b.n	8004054 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d177      	bne.n	8003fbe <USB_EPStartXfer+0xc98>
 8003ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eee:	4413      	add	r3, r2
 8003ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	00da      	lsls	r2, r3, #3
 8003f00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f02:	4413      	add	r3, r2
 8003f04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f20:	d921      	bls.n	8003f66 <USB_EPStartXfer+0xc40>
 8003f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <USB_EPStartXfer+0xc1c>
 8003f38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	029b      	lsls	r3, r3, #10
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	e05c      	b.n	8004020 <USB_EPStartXfer+0xcfa>
 8003f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <USB_EPStartXfer+0xc5e>
 8003f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	e04d      	b.n	8004020 <USB_EPStartXfer+0xcfa>
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <USB_EPStartXfer+0xc7e>
 8003f9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	029b      	lsls	r3, r3, #10
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	e030      	b.n	8004020 <USB_EPStartXfer+0xcfa>
 8003fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d128      	bne.n	8004020 <USB_EPStartXfer+0xcfa>
 8003fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	00da      	lsls	r2, r3, #3
 8004006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800400a:	4413      	add	r3, r2
 800400c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004018:	b29a      	uxth	r2, r3
 800401a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800401e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	891b      	ldrh	r3, [r3, #8]
 800402c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6959      	ldr	r1, [r3, #20]
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004040:	b29b      	uxth	r3, r3
 8004042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004046:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800404a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800404e:	6800      	ldr	r0, [r0, #0]
 8004050:	f000 fe54 	bl	8004cfc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407a:	817b      	strh	r3, [r7, #10]
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	f083 0310 	eor.w	r3, r3, #16
 8004082:	817b      	strh	r3, [r7, #10]
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	f083 0320 	eor.w	r3, r3, #32
 800408a:	817b      	strh	r3, [r7, #10]
 800408c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800409a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]
 80040bc:	f000 bcde 	b.w	8004a7c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80040c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	7b1b      	ldrb	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f040 80bb 	bne.w	8004248 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80040d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d917      	bls.n	800411e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80040ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80040fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	619a      	str	r2, [r3, #24]
 800411c:	e00e      	b.n	800413c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800411e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800412e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800413c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800414a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800414e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004160:	4413      	add	r3, r2
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800416a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00da      	lsls	r2, r3, #3
 8004174:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004178:	4413      	add	r3, r2
 800417a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800417e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418e:	b29a      	uxth	r2, r3
 8004190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800419a:	2b3e      	cmp	r3, #62	; 0x3e
 800419c:	d924      	bls.n	80041e8 <USB_EPStartXfer+0xec2>
 800419e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <USB_EPStartXfer+0xe98>
 80041b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041b8:	3b01      	subs	r3, #1
 80041ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	029b      	lsls	r3, r3, #10
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041dc:	b29a      	uxth	r2, r3
 80041de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	f000 bc10 	b.w	8004a08 <USB_EPStartXfer+0x16e2>
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10c      	bne.n	800420a <USB_EPStartXfer+0xee4>
 80041f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004200:	b29a      	uxth	r2, r3
 8004202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e3fe      	b.n	8004a08 <USB_EPStartXfer+0x16e2>
 800420a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <USB_EPStartXfer+0xf04>
 8004220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004224:	3301      	adds	r3, #1
 8004226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800422a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29a      	uxth	r2, r3
 8004232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004236:	b29b      	uxth	r3, r3
 8004238:	029b      	lsls	r3, r3, #10
 800423a:	b29b      	uxth	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b29a      	uxth	r2, r3
 8004240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	e3df      	b.n	8004a08 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800424c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	78db      	ldrb	r3, [r3, #3]
 8004254:	2b02      	cmp	r3, #2
 8004256:	f040 8218 	bne.w	800468a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800425a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800425e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 809d 	bne.w	80043a6 <USB_EPStartXfer+0x1080>
 800426c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800427a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800427e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004290:	4413      	add	r3, r2
 8004292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800429a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	00da      	lsls	r2, r3, #3
 80042a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042a8:	4413      	add	r3, r2
 80042aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042be:	b29a      	uxth	r2, r3
 80042c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b3e      	cmp	r3, #62	; 0x3e
 80042d4:	d92b      	bls.n	800432e <USB_EPStartXfer+0x1008>
 80042d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <USB_EPStartXfer+0xfe0>
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	3b01      	subs	r3, #1
 8004302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29a      	uxth	r2, r3
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	b29b      	uxth	r3, r3
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	b29b      	uxth	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004324:	b29a      	uxth	r2, r3
 8004326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	e070      	b.n	8004410 <USB_EPStartXfer+0x10ea>
 800432e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10c      	bne.n	8004358 <USB_EPStartXfer+0x1032>
 800433e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434e:	b29a      	uxth	r2, r3
 8004350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	e05b      	b.n	8004410 <USB_EPStartXfer+0x10ea>
 8004358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800435c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800436a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800436e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <USB_EPStartXfer+0x1062>
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	3301      	adds	r3, #1
 8004384:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29a      	uxth	r2, r3
 8004390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004394:	b29b      	uxth	r3, r3
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	b29b      	uxth	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b29a      	uxth	r2, r3
 800439e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	e034      	b.n	8004410 <USB_EPStartXfer+0x10ea>
 80043a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d12c      	bne.n	8004410 <USB_EPStartXfer+0x10ea>
 80043b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043da:	4413      	add	r3, r2
 80043dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	00da      	lsls	r2, r3, #3
 80043ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043f2:	4413      	add	r3, r2
 80043f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	b29a      	uxth	r2, r3
 800440a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800441e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 809d 	bne.w	800456a <USB_EPStartXfer+0x1244>
 8004430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800443e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444c:	b29b      	uxth	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004454:	4413      	add	r3, r2
 8004456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800445a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800445e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	00da      	lsls	r2, r3, #3
 8004468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800446c:	4413      	add	r3, r2
 800446e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004472:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004476:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004482:	b29a      	uxth	r2, r3
 8004484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b3e      	cmp	r3, #62	; 0x3e
 8004498:	d92b      	bls.n	80044f2 <USB_EPStartXfer+0x11cc>
 800449a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800449e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <USB_EPStartXfer+0x11a4>
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c4:	3b01      	subs	r3, #1
 80044c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4313      	orrs	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	e069      	b.n	80045c6 <USB_EPStartXfer+0x12a0>
 80044f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10c      	bne.n	800451c <USB_EPStartXfer+0x11f6>
 8004502:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004512:	b29a      	uxth	r2, r3
 8004514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	e054      	b.n	80045c6 <USB_EPStartXfer+0x12a0>
 800451c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800452e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <USB_EPStartXfer+0x1226>
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004546:	3301      	adds	r3, #1
 8004548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800454c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29a      	uxth	r2, r3
 8004554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004558:	b29b      	uxth	r3, r3
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	b29b      	uxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b29a      	uxth	r2, r3
 8004562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	e02d      	b.n	80045c6 <USB_EPStartXfer+0x12a0>
 800456a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800456e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d125      	bne.n	80045c6 <USB_EPStartXfer+0x12a0>
 800457a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800457e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004588:	b29b      	uxth	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004590:	4413      	add	r3, r2
 8004592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800459a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	00da      	lsls	r2, r3, #3
 80045a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045a8:	4413      	add	r3, r2
 80045aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045c4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80045c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8218 	beq.w	8004a08 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80045d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80045fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <USB_EPStartXfer+0x12ea>
 8004604:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004610:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 81f5 	bne.w	8004a08 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800461e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 81ee 	bne.w	8004a08 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800462c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800463a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800465a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]
 8004688:	e1be      	b.n	8004a08 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800468a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	78db      	ldrb	r3, [r3, #3]
 8004696:	2b01      	cmp	r3, #1
 8004698:	f040 81b4 	bne.w	8004a04 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800469c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d917      	bls.n	80046e8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80046b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80046c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d8:	1ad2      	subs	r2, r2, r3
 80046da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	619a      	str	r2, [r3, #24]
 80046e6:	e00e      	b.n	8004706 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80046e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80046f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 8085 	bne.w	8004822 <USB_EPStartXfer+0x14fc>
 8004718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800471c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800472a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004734:	b29b      	uxth	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800473c:	4413      	add	r3, r2
 800473e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	00da      	lsls	r2, r3, #3
 8004750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004754:	4413      	add	r3, r2
 8004756:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800475a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800475e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800476a:	b29a      	uxth	r2, r3
 800476c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004776:	2b3e      	cmp	r3, #62	; 0x3e
 8004778:	d923      	bls.n	80047c2 <USB_EPStartXfer+0x149c>
 800477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <USB_EPStartXfer+0x1474>
 8004790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004794:	3b01      	subs	r3, #1
 8004796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800479a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4313      	orrs	r3, r2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	e060      	b.n	8004884 <USB_EPStartXfer+0x155e>
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <USB_EPStartXfer+0x14be>
 80047ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047da:	b29a      	uxth	r2, r3
 80047dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	e04f      	b.n	8004884 <USB_EPStartXfer+0x155e>
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <USB_EPStartXfer+0x14de>
 80047fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047fe:	3301      	adds	r3, #1
 8004800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29a      	uxth	r2, r3
 800480c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004810:	b29b      	uxth	r3, r3
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	b29b      	uxth	r3, r3
 8004816:	4313      	orrs	r3, r2
 8004818:	b29a      	uxth	r2, r3
 800481a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	e030      	b.n	8004884 <USB_EPStartXfer+0x155e>
 8004822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d128      	bne.n	8004884 <USB_EPStartXfer+0x155e>
 8004832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004856:	4413      	add	r3, r2
 8004858:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800485c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	00da      	lsls	r2, r3, #3
 800486a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486e:	4413      	add	r3, r2
 8004870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487c:	b29a      	uxth	r2, r3
 800487e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 8085 	bne.w	80049ae <USB_EPStartXfer+0x1688>
 80048a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048c8:	4413      	add	r3, r2
 80048ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	00da      	lsls	r2, r3, #3
 80048dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e0:	4413      	add	r3, r2
 80048e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048fc:	801a      	strh	r2, [r3, #0]
 80048fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004902:	2b3e      	cmp	r3, #62	; 0x3e
 8004904:	d923      	bls.n	800494e <USB_EPStartXfer+0x1628>
 8004906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <USB_EPStartXfer+0x1600>
 800491c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004920:	3b01      	subs	r3, #1
 8004922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29a      	uxth	r2, r3
 800492e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004932:	b29b      	uxth	r3, r3
 8004934:	029b      	lsls	r3, r3, #10
 8004936:	b29b      	uxth	r3, r3
 8004938:	4313      	orrs	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004944:	b29a      	uxth	r2, r3
 8004946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	e05c      	b.n	8004a08 <USB_EPStartXfer+0x16e2>
 800494e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10c      	bne.n	8004970 <USB_EPStartXfer+0x164a>
 8004956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004966:	b29a      	uxth	r2, r3
 8004968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	e04b      	b.n	8004a08 <USB_EPStartXfer+0x16e2>
 8004970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <USB_EPStartXfer+0x166a>
 8004986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498a:	3301      	adds	r3, #1
 800498c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29a      	uxth	r2, r3
 8004998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499c:	b29b      	uxth	r3, r3
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4313      	orrs	r3, r2
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	e02c      	b.n	8004a08 <USB_EPStartXfer+0x16e2>
 80049ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d124      	bne.n	8004a08 <USB_EPStartXfer+0x16e2>
 80049be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049d4:	4413      	add	r3, r2
 80049d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	00da      	lsls	r2, r3, #3
 80049e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e001      	b.n	8004a08 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e03a      	b.n	8004a7e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004a32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004a3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d020      	beq.n	8004adc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab0:	81bb      	strh	r3, [r7, #12]
 8004ab2:	89bb      	ldrh	r3, [r7, #12]
 8004ab4:	f083 0310 	eor.w	r3, r3, #16
 8004ab8:	81bb      	strh	r3, [r7, #12]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	89bb      	ldrh	r3, [r7, #12]
 8004ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8013      	strh	r3, [r2, #0]
 8004ada:	e01f      	b.n	8004b1c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af2:	81fb      	strh	r3, [r7, #14]
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004afa:	81fb      	strh	r3, [r7, #14]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	441a      	add	r2, r3
 8004b06:	89fb      	ldrh	r3, [r7, #14]
 8004b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b087      	sub	sp, #28
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	7b1b      	ldrb	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 809d 	bne.w	8004c78 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	785b      	ldrb	r3, [r3, #1]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d04c      	beq.n	8004be0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	823b      	strh	r3, [r7, #16]
 8004b54:	8a3b      	ldrh	r3, [r7, #16]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01b      	beq.n	8004b96 <USB_EPClearStall+0x6c>
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	81fb      	strh	r3, [r7, #14]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	441a      	add	r2, r3
 8004b80:	89fb      	ldrh	r3, [r7, #14]
 8004b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	78db      	ldrb	r3, [r3, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d06c      	beq.n	8004c78 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb4:	81bb      	strh	r3, [r7, #12]
 8004bb6:	89bb      	ldrh	r3, [r7, #12]
 8004bb8:	f083 0320 	eor.w	r3, r3, #32
 8004bbc:	81bb      	strh	r3, [r7, #12]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	89bb      	ldrh	r3, [r7, #12]
 8004bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8013      	strh	r3, [r2, #0]
 8004bde:	e04b      	b.n	8004c78 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	82fb      	strh	r3, [r7, #22]
 8004bee:	8afb      	ldrh	r3, [r7, #22]
 8004bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <USB_EPClearStall+0x106>
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	82bb      	strh	r3, [r7, #20]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	8abb      	ldrh	r3, [r7, #20]
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	827b      	strh	r3, [r7, #18]
 8004c48:	8a7b      	ldrh	r3, [r7, #18]
 8004c4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c4e:	827b      	strh	r3, [r7, #18]
 8004c50:	8a7b      	ldrh	r3, [r7, #18]
 8004c52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c56:	827b      	strh	r3, [r7, #18]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	8a7b      	ldrh	r3, [r7, #18]
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2280      	movs	r2, #128	; 0x80
 8004c9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b08b      	sub	sp, #44	; 0x2c
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4611      	mov	r1, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	80fb      	strh	r3, [r7, #6]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d12:	88bb      	ldrh	r3, [r7, #4]
 8004d14:	3301      	adds	r3, #1
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	e01b      	b.n	8004d6c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	b21a      	sxth	r2, r3
 8004d44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	b21b      	sxth	r3, r3
 8004d4c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	8a7a      	ldrh	r2, [r7, #18]
 8004d52:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	3302      	adds	r3, #2
 8004d58:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e0      	bne.n	8004d34 <USB_WritePMA+0x38>
  }
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	372c      	adds	r7, #44	; 0x2c
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b08b      	sub	sp, #44	; 0x2c
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	460b      	mov	r3, r1
 8004d90:	80fb      	strh	r3, [r7, #6]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d96:	88bb      	ldrh	r3, [r7, #4]
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e018      	b.n	8004dea <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	3302      	adds	r3, #2
 8004dc4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	3b01      	subs	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e3      	bne.n	8004db8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004df0:	88bb      	ldrh	r3, [r7, #4]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	701a      	strb	r2, [r3, #0]
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	372c      	adds	r7, #44	; 0x2c
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <CAN_voidInit>:
 */

#include "CAN_Interface.h"

void CAN_voidInit(CAN_RegMap_t* A_canx, CAN_RxConfig_t* A_rxConfig, CAN_TxConfig_t* A_txConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b08b      	sub	sp, #44	; 0x2c
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4aa0      	ldr	r2, [pc, #640]	; (80050a8 <CAN_voidInit+0x290>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d102      	bne.n	8004e32 <CAN_voidInit+0x1a>
		L_msg = CAN1_MESSAGES;
 8004e2c:	4b9f      	ldr	r3, [pc, #636]	; (80050ac <CAN_voidInit+0x294>)
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	e00c      	b.n	8004e4c <CAN_voidInit+0x34>
	else if(A_canx == CAN2)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a9e      	ldr	r2, [pc, #632]	; (80050b0 <CAN_voidInit+0x298>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d102      	bne.n	8004e40 <CAN_voidInit+0x28>
		L_msg = CAN2_MESSAGES;
 8004e3a:	4b9e      	ldr	r3, [pc, #632]	; (80050b4 <CAN_voidInit+0x29c>)
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3e:	e005      	b.n	8004e4c <CAN_voidInit+0x34>
	else if(A_canx == CAN3)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a9d      	ldr	r2, [pc, #628]	; (80050b8 <CAN_voidInit+0x2a0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <CAN_voidInit+0x34>
			L_msg = CAN3_MESSAGES;
 8004e48:	4b9c      	ldr	r3, [pc, #624]	; (80050bc <CAN_voidInit+0x2a4>)
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enter Initialization mode */
	A_canx->CCCR |= (1 << 0);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	619a      	str	r2, [r3, #24]
	while(! ((A_canx->CCCR >> 0) & 1));  // Wait to make sure INIT bit has been written (Recommendation from reference manual)
 8004e58:	bf00      	nop
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f9      	beq.n	8004e5a <CAN_voidInit+0x42>

	// might configure Timeout value here
	A_canx->CCCR |= (1 << 1);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f043 0202 	orr.w	r2, r3, #2
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	619a      	str	r2, [r3, #24]

/* Setup General Configuration */
#if CAN_FDCAN_OPERATION == CAN_FDCAN_DISABLE
		A_canx->CCCR &= ~(1 << 8);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 8);
#endif

#if CAN_BIT_RATE_SWITCHING == CAN_BIT_RATE_SWITCHING_DISABLE
		A_canx->CCCR &= ~(1 << 9);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 9);
#endif

#if CAN_EDGE_FILTERING == CAN_FILTERING_DISABLE
		A_canx->CCCR &= ~(1 << 13);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 13);
#endif

#if CAN_EXCEPTION_HANDLING == CAN_EXCEPTION_ENABLE
		A_canx->CCCR &= ~(1 << 12);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 12);
#endif

#if CAN_BUS_MONITORING == CAN_BUS_MONITORING_DISABLE
		A_canx->CCCR &= ~(1 << 5);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f023 0220 	bic.w	r2, r3, #32
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 5);
#endif

#if CAN_OPERATION_MODE == CAN_MODE_NORMAL_OPERATION
		A_canx->CCCR &= ~(1 << 2);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f023 0204 	bic.w	r2, r3, #4
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 2);
#endif

	/* Timing Configuration */
	u32 L_timing = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 25);		// 3 is default value for NSJW (Nominal (re)synchronization jump width)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8004ec4:	61bb      	str	r3, [r7, #24]
	// L_timing |= (0 << 16);		// 0 is the default value for NBRP (Bit rate prescaler)
	L_timing |= (10 << 8);		// 10 is the default value for NTSEG1
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8004ecc:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 0);		// 3 is the default value for NTSEG2
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f043 0303 	orr.w	r3, r3, #3
 8004ed4:	61bb      	str	r3, [r7, #24]
	 * for 125kb  (8us)	 BRB = 8
	 * for 250kb  (4us)  BRB = 4
	 * for 500kb  (2us)  BRB = 2
	 * for 1000kb (1us)  BRB = 1
	 * */
	L_timing |= (CAN_BAUD_RATE << 16);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004edc:	61bb      	str	r3, [r7, #24]

	A_canx->NBTP = L_timing;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	61da      	str	r2, [r3, #28]

	/* Receiver Configuration */
	if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO0){
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <CAN_voidInit+0xe6>
		A_canx->RXGFC &= ~(0b11 << 4);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004efc:	e01c      	b.n	8004f38 <CAN_voidInit+0x120>
	}
	else if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO1){
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d110      	bne.n	8004f28 <CAN_voidInit+0x110>
		A_canx->RXGFC &= ~(0b11 << 4);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		A_canx->RXGFC |= (1 << 4);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1c:	f043 0210 	orr.w	r2, r3, #16
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f26:	e007      	b.n	8004f38 <CAN_voidInit+0x120>
	}
	else{	// Reject
		A_canx->RXGFC |= (0b11 << 4);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2e:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	if(A_rxConfig->FIFO0_Mode == CAN_RX_FIFO_BLOCKING)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d108      	bne.n	8004f52 <CAN_voidInit+0x13a>
		A_canx->RXGFC &= ~(1 << 9);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f46:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f50:	e007      	b.n	8004f62 <CAN_voidInit+0x14a>
	else	// Overwrite
		A_canx->RXGFC |= (1 << 9);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	if(A_rxConfig->FIFO1_Mode == CAN_RX_FIFO_BLOCKING)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	789b      	ldrb	r3, [r3, #2]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <CAN_voidInit+0x164>
			A_canx->RXGFC &= ~(1 << 8);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f7a:	e007      	b.n	8004f8c <CAN_voidInit+0x174>
		else
			A_canx->RXGFC |= (1 << 8);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	A_canx->RXGFC &= ~(0b11111 << 16);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	A_canx->RXGFC |= ((A_rxConfig->FIFO0_numberOfIDs + A_rxConfig->FIFO1_numberOfIDs) << 16);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	78d2      	ldrb	r2, [r2, #3]
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	7912      	ldrb	r2, [r2, #4]
 8004fac:	440a      	add	r2, r1
 8004fae:	0412      	lsls	r2, r2, #16
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Flush SRAM */
	u32 pointer;
	pointer = (u32)L_msg;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e008      	b.n	8004fd4 <CAN_voidInit+0x1bc>
		*(u32 *)(pointer) = 0x00000000U;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
		pointer += 4;
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 8004fce:	7ffb      	ldrb	r3, [r7, #31]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	7ffb      	ldrb	r3, [r7, #31]
 8004fd6:	2bd3      	cmp	r3, #211	; 0xd3
 8004fd8:	d9f3      	bls.n	8004fc2 <CAN_voidInit+0x1aa>
	}

	/* Store The IDs */
	u32 L_temp;
	u8 L_idIndex = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	77bb      	strb	r3, [r7, #30]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 8004fde:	2300      	movs	r3, #0
 8004fe0:	777b      	strb	r3, [r7, #29]
 8004fe2:	e023      	b.n	800502c <CAN_voidInit+0x214>
		L_temp = A_rxConfig->FIFO0_IDs[i];			// SID1
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	7f7b      	ldrb	r3, [r7, #29]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO0_IDs[i] << 16);	// SID2
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	7f7b      	ldrb	r3, [r7, #29]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 27);				// Store in FIFO0 (if filter matches)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800500c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005014:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 8005016:	7fbb      	ldrb	r3, [r7, #30]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	77ba      	strb	r2, [r7, #30]
 800501c:	4619      	mov	r1, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 8005026:	7f7b      	ldrb	r3, [r7, #29]
 8005028:	3301      	adds	r3, #1
 800502a:	777b      	strb	r3, [r7, #29]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	78db      	ldrb	r3, [r3, #3]
 8005030:	7f7a      	ldrb	r2, [r7, #29]
 8005032:	429a      	cmp	r2, r3
 8005034:	d3d6      	bcc.n	8004fe4 <CAN_voidInit+0x1cc>
	}

	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 8005036:	2300      	movs	r3, #0
 8005038:	773b      	strb	r3, [r7, #28]
 800503a:	e023      	b.n	8005084 <CAN_voidInit+0x26c>
		L_temp = A_rxConfig->FIFO1_IDs[i];			// SID1
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	7f3b      	ldrb	r3, [r7, #28]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO1_IDs[i] << 16);	// SID2
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	7f3b      	ldrb	r3, [r7, #28]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 28);				// Store in FIFO1 (if filter matches)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005064:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800506c:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 800506e:	7fbb      	ldrb	r3, [r7, #30]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	77ba      	strb	r2, [r7, #30]
 8005074:	4619      	mov	r1, r3
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 800507e:	7f3b      	ldrb	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	773b      	strb	r3, [r7, #28]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	791b      	ldrb	r3, [r3, #4]
 8005088:	7f3a      	ldrb	r2, [r7, #28]
 800508a:	429a      	cmp	r2, r3
 800508c:	d3d6      	bcc.n	800503c <CAN_voidInit+0x224>
	}

	/* Transmitter Configuration */
	if(A_txConfig->bufferType == CAN_TX_BUFFER_FIFO)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d114      	bne.n	80050c0 <CAN_voidInit+0x2a8>
		A_canx->TXBC &= ~(1 << 24);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800509c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80050a6:	e013      	b.n	80050d0 <CAN_voidInit+0x2b8>
 80050a8:	40006400 	.word	0x40006400
 80050ac:	4000a400 	.word	0x4000a400
 80050b0:	40006800 	.word	0x40006800
 80050b4:	4000a800 	.word	0x4000a800
 80050b8:	40006c00 	.word	0x40006c00
 80050bc:	4000ac00 	.word	0x4000ac00
	else // Queue FIFO
		A_canx->TXBC |= (1 << 24);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	if(A_txConfig->transmitPause == CAN_TX_PAUSE_DISABLE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <CAN_voidInit+0x2ce>
		A_canx->CCCR &= ~(1 << 14);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	619a      	str	r2, [r3, #24]
 80050e4:	e005      	b.n	80050f2 <CAN_voidInit+0x2da>
	else
		A_canx->CCCR |= (1 << 14);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	619a      	str	r2, [r3, #24]

	if (A_txConfig->automaticTransmission == CAN_AUTOMATIC_TRANSMISSION_ENABLE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	789b      	ldrb	r3, [r3, #2]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <CAN_voidInit+0x2f0>
		A_canx->CCCR &= ~(1 << 6);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]
 8005106:	e005      	b.n	8005114 <CAN_voidInit+0x2fc>
	else
		A_canx->CCCR |= (1 << 6);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	619a      	str	r2, [r3, #24]

	/* Exit Initialization and Enter Normal mode */
	A_canx->CCCR &= ~(1 << 1);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f023 0202 	bic.w	r2, r3, #2
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	619a      	str	r2, [r3, #24]
	A_canx->CCCR &= ~(1 << 0);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f023 0201 	bic.w	r2, r3, #1
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	619a      	str	r2, [r3, #24]
}
 800512c:	bf00      	nop
 800512e:	372c      	adds	r7, #44	; 0x2c
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <CAN_voidReceiveDataFrame>:

void CAN_voidReceiveDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame, u8 A_fifox)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	71fb      	strb	r3, [r7, #7]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4a5f      	ldr	r2, [pc, #380]	; (80052c8 <CAN_voidReceiveDataFrame+0x190>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d102      	bne.n	8005154 <CAN_voidReceiveDataFrame+0x1c>
		L_msg = CAN1_MESSAGES;
 800514e:	4b5f      	ldr	r3, [pc, #380]	; (80052cc <CAN_voidReceiveDataFrame+0x194>)
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e00c      	b.n	800516e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN2)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a5e      	ldr	r2, [pc, #376]	; (80052d0 <CAN_voidReceiveDataFrame+0x198>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d102      	bne.n	8005162 <CAN_voidReceiveDataFrame+0x2a>
		L_msg = CAN2_MESSAGES;
 800515c:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <CAN_voidReceiveDataFrame+0x19c>)
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e005      	b.n	800516e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN3)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a5c      	ldr	r2, [pc, #368]	; (80052d8 <CAN_voidReceiveDataFrame+0x1a0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d101      	bne.n	800516e <CAN_voidReceiveDataFrame+0x36>
			L_msg = CAN3_MESSAGES;
 800516a:	4b5c      	ldr	r3, [pc, #368]	; (80052dc <CAN_voidReceiveDataFrame+0x1a4>)
 800516c:	617b      	str	r3, [r7, #20]

	if(A_fifox == 0)
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d150      	bne.n	8005216 <CAN_voidReceiveDataFrame+0xde>
	{
		u8 L_getIndex = (u8)(A_canx->RXF0S & (0b11 << 8));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	2300      	movs	r3, #0
 800517c:	743b      	strb	r3, [r7, #16]

		A_frame->id = (L_msg->RxFIFO0[L_getIndex].ID >> 18) & (0b11111111111);
 800517e:	7c3a      	ldrb	r2, [r7, #16]
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	440b      	add	r3, r1
 800518c:	33b0      	adds	r3, #176	; 0xb0
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0c9b      	lsrs	r3, r3, #18
 8005192:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	601a      	str	r2, [r3, #0]
		A_frame->dlc = (u8)((L_msg->RxFIFO0[L_getIndex].DLC >> 16) & (0b111));
 800519a:	7c3a      	ldrb	r2, [r7, #16]
 800519c:	6979      	ldr	r1, [r7, #20]
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	33b4      	adds	r3, #180	; 0xb4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	711a      	strb	r2, [r3, #4]
		for(u8 i = 0; i < A_frame->dlc; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	74fb      	strb	r3, [r7, #19]
 80051be:	e01c      	b.n	80051fa <CAN_voidReceiveDataFrame+0xc2>
			A_frame->data[i] = (u8)((L_msg->RxFIFO0[L_getIndex].data[i/4] >> 4*(i%4)) & (0xFF));
 80051c0:	7c3a      	ldrb	r2, [r7, #16]
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	089b      	lsrs	r3, r3, #2
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	4618      	mov	r0, r3
 80051ca:	6979      	ldr	r1, [r7, #20]
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4403      	add	r3, r0
 80051d6:	332e      	adds	r3, #46	; 0x2e
 80051d8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	fa22 f103 	lsr.w	r1, r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	7cfb      	ldrb	r3, [r7, #19]
 80051ee:	4413      	add	r3, r2
 80051f0:	b2ca      	uxtb	r2, r1
 80051f2:	701a      	strb	r2, [r3, #0]
		for(u8 i = 0; i < A_frame->dlc; i++)
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	3301      	adds	r3, #1
 80051f8:	74fb      	strb	r3, [r7, #19]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	791b      	ldrb	r3, [r3, #4]
 80051fe:	7cfa      	ldrb	r2, [r7, #19]
 8005200:	429a      	cmp	r2, r3
 8005202:	d3dd      	bcc.n	80051c0 <CAN_voidReceiveDataFrame+0x88>

		// Acknowledge Reading
		A_canx->RXF0A |= L_getIndex;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800520a:	7c3b      	ldrb	r3, [r7, #16]
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			A_frame->data[i] = (u8)((L_msg->RxFIFO1[L_getIndex].data[i/4] >> 4*(i%4)) & (0xFF));

		// Acknowledge Reading
		A_canx->RXF1A |= L_getIndex;
	}
}
 8005214:	e051      	b.n	80052ba <CAN_voidReceiveDataFrame+0x182>
		u8 L_getIndex = (u8)(A_canx->RXF1S & (0b11 << 8));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800521c:	2300      	movs	r3, #0
 800521e:	747b      	strb	r3, [r7, #17]
		A_frame->id = (L_msg->RxFIFO1[L_getIndex].ID >> 18) & (0b11111111111);
 8005220:	7c7a      	ldrb	r2, [r7, #17]
 8005222:	6979      	ldr	r1, [r7, #20]
 8005224:	4613      	mov	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4413      	add	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	440b      	add	r3, r1
 800522e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	0c9b      	lsrs	r3, r3, #18
 8005236:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	601a      	str	r2, [r3, #0]
		A_frame->dlc = (u8)((L_msg->RxFIFO1[L_getIndex].DLC >> 16) & (0b111));
 800523e:	7c7a      	ldrb	r2, [r7, #17]
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	440b      	add	r3, r1
 800524c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	711a      	strb	r2, [r3, #4]
		for(u8 i = 0; i < A_frame->dlc; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	74bb      	strb	r3, [r7, #18]
 8005264:	e01c      	b.n	80052a0 <CAN_voidReceiveDataFrame+0x168>
			A_frame->data[i] = (u8)((L_msg->RxFIFO1[L_getIndex].data[i/4] >> 4*(i%4)) & (0xFF));
 8005266:	7c7a      	ldrb	r2, [r7, #17]
 8005268:	7cbb      	ldrb	r3, [r7, #18]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	b2db      	uxtb	r3, r3
 800526e:	4618      	mov	r0, r3
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	4613      	mov	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	4413      	add	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4403      	add	r3, r0
 800527c:	3364      	adds	r3, #100	; 0x64
 800527e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005282:	7cbb      	ldrb	r3, [r7, #18]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	fa22 f103 	lsr.w	r1, r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	7cbb      	ldrb	r3, [r7, #18]
 8005294:	4413      	add	r3, r2
 8005296:	b2ca      	uxtb	r2, r1
 8005298:	701a      	strb	r2, [r3, #0]
		for(u8 i = 0; i < A_frame->dlc; i++)
 800529a:	7cbb      	ldrb	r3, [r7, #18]
 800529c:	3301      	adds	r3, #1
 800529e:	74bb      	strb	r3, [r7, #18]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	791b      	ldrb	r3, [r3, #4]
 80052a4:	7cba      	ldrb	r2, [r7, #18]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3dd      	bcc.n	8005266 <CAN_voidReceiveDataFrame+0x12e>
		A_canx->RXF1A |= L_getIndex;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80052b0:	7c7b      	ldrb	r3, [r7, #17]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40006400 	.word	0x40006400
 80052cc:	4000a400 	.word	0x4000a400
 80052d0:	40006800 	.word	0x40006800
 80052d4:	4000a800 	.word	0x4000a800
 80052d8:	40006c00 	.word	0x40006c00
 80052dc:	4000ac00 	.word	0x4000ac00

080052e0 <CAN_u8IsRxBufferFull>:
		L_result = (u8)(A_canx->RXF1S & (0b11 << 0));
	return L_result;
}

u8 CAN_u8IsRxBufferFull(CAN_RegMap_t* A_canx, u8 A_fifox)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
	u8 L_result;
	if(A_fifox == CAN_RX_FIFO0)
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d108      	bne.n	8005304 <CAN_u8IsRxBufferFull+0x24>
		L_result = (A_canx->RXF0S & (1 << 24)) >> 24;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	0e1b      	lsrs	r3, r3, #24
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	e007      	b.n	8005314 <CAN_u8IsRxBufferFull+0x34>
	else
		L_result = (A_canx->RXF1S & (1 << 24)) >> 24;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800530a:	0e1b      	lsrs	r3, r3, #24
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
	return L_result;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <CAN_voidSendDataFrame>:

void CAN_voidSendDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame)
{
 8005324:	b490      	push	{r4, r7}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a48      	ldr	r2, [pc, #288]	; (8005454 <CAN_voidSendDataFrame+0x130>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d102      	bne.n	800533c <CAN_voidSendDataFrame+0x18>
		L_msg = CAN1_MESSAGES;
 8005336:	4b48      	ldr	r3, [pc, #288]	; (8005458 <CAN_voidSendDataFrame+0x134>)
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e00c      	b.n	8005356 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a47      	ldr	r2, [pc, #284]	; (800545c <CAN_voidSendDataFrame+0x138>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d102      	bne.n	800534a <CAN_voidSendDataFrame+0x26>
		L_msg = CAN2_MESSAGES;
 8005344:	4b46      	ldr	r3, [pc, #280]	; (8005460 <CAN_voidSendDataFrame+0x13c>)
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e005      	b.n	8005356 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN3)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a45      	ldr	r2, [pc, #276]	; (8005464 <CAN_voidSendDataFrame+0x140>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d101      	bne.n	8005356 <CAN_voidSendDataFrame+0x32>
			L_msg = CAN3_MESSAGES;
 8005352:	4b45      	ldr	r3, [pc, #276]	; (8005468 <CAN_voidSendDataFrame+0x144>)
 8005354:	617b      	str	r3, [r7, #20]

	// Define the put index
	u8 L_putIndex = (u8)((A_canx->TXFQS >> 16) & 0b11);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	73bb      	strb	r3, [r7, #14]

	// write the message
	u32 L_tmp = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
	if(A_frame->ide == CAN_FRAME_EXTENDED_ID){
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	799b      	ldrb	r3, [r3, #6]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <CAN_voidSendDataFrame+0x5e>
		L_tmp = A_frame->id;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	613b      	str	r3, [r7, #16]
		L_tmp |= (1 << 30); // XTD bit
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	e003      	b.n	800538a <CAN_voidSendDataFrame+0x66>
	}
	else{
		L_tmp = A_frame->id << 18;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	049b      	lsls	r3, r3, #18
 8005388:	613b      	str	r3, [r7, #16]
	}
	if(A_frame->rtr == CAN_FRAME_REMOTE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	795b      	ldrb	r3, [r3, #5]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d103      	bne.n	800539a <CAN_voidSendDataFrame+0x76>
		L_tmp |= (1 << 29);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005398:	613b      	str	r3, [r7, #16]
	L_msg->TxBuffer[L_putIndex].ID = L_tmp;
 800539a:	7bba      	ldrb	r2, [r7, #14]
 800539c:	6979      	ldr	r1, [r7, #20]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 23); // Don't store event
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 21); // Classic Can
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 20); // No bit rate switching
*/

	L_msg->TxBuffer[L_putIndex].DLC = (A_frame->dlc << 16); // write DLC
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	791b      	ldrb	r3, [r3, #4]
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	7bba      	ldrb	r2, [r7, #14]
 80053b8:	4618      	mov	r0, r3
 80053ba:	6979      	ldr	r1, [r7, #20]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	440b      	add	r3, r1
 80053c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80053ca:	6018      	str	r0, [r3, #0]

	for(u8 i = 0; i < A_frame->dlc; i++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e02a      	b.n	8005428 <CAN_voidSendDataFrame+0x104>
		L_msg->TxBuffer[L_putIndex].data[i/4] |= (u32)(A_frame->data[i] << (8 * (i%4)));
 80053d2:	7bba      	ldrb	r2, [r7, #14]
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	b2d8      	uxtb	r0, r3
 80053da:	4604      	mov	r4, r0
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4423      	add	r3, r4
 80053e8:	33a0      	adds	r3, #160	; 0xa0
 80053ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	6891      	ldr	r1, [r2, #8]
 80053f2:	7bfa      	ldrb	r2, [r7, #15]
 80053f4:	440a      	add	r2, r1
 80053f6:	7812      	ldrb	r2, [r2, #0]
 80053f8:	4611      	mov	r1, r2
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	f002 0203 	and.w	r2, r2, #3
 8005400:	00d2      	lsls	r2, r2, #3
 8005402:	fa01 f202 	lsl.w	r2, r1, r2
 8005406:	4611      	mov	r1, r2
 8005408:	7bba      	ldrb	r2, [r7, #14]
 800540a:	4604      	mov	r4, r0
 800540c:	ea43 0001 	orr.w	r0, r3, r1
 8005410:	6979      	ldr	r1, [r7, #20]
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4413      	add	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4423      	add	r3, r4
 800541c:	33a0      	adds	r3, #160	; 0xa0
 800541e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	for(u8 i = 0; i < A_frame->dlc; i++)
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	3301      	adds	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	791b      	ldrb	r3, [r3, #4]
 800542c:	7bfa      	ldrb	r2, [r7, #15]
 800542e:	429a      	cmp	r2, r3
 8005430:	d3cf      	bcc.n	80053d2 <CAN_voidSendDataFrame+0xae>

	// Request Transmission
	A_canx->TXBAR |= (1 << L_putIndex);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005438:	7bba      	ldrb	r2, [r7, #14]
 800543a:	2101      	movs	r1, #1
 800543c:	fa01 f202 	lsl.w	r2, r1, r2
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	// Wait for transmission to be done
	//while(! ((A_canx->TXBTO >> L_putIndex) & 1) );
}
 8005448:	bf00      	nop
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bc90      	pop	{r4, r7}
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40006400 	.word	0x40006400
 8005458:	4000a400 	.word	0x4000a400
 800545c:	40006800 	.word	0x40006800
 8005460:	4000a800 	.word	0x4000a800
 8005464:	40006c00 	.word	0x40006c00
 8005468:	4000ac00 	.word	0x4000ac00

0800546c <GPIO_voidSetPinMode>:
/************************************************************/
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D);
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc);

static void GPIO_voidSetPinMode(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Mode)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
 8005476:	460b      	mov	r3, r1
 8005478:	71bb      	strb	r3, [r7, #6]
 800547a:	4613      	mov	r3, r2
 800547c:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d827      	bhi.n	80054d8 <GPIO_voidSetPinMode+0x6c>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <GPIO_voidSetPinMode+0x24>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054ad 	.word	0x080054ad
 8005494:	080054b5 	.word	0x080054b5
 8005498:	080054bb 	.word	0x080054bb
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c7 	.word	0x080054c7
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d3 	.word	0x080054d3
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 80054ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054b0:	60fb      	str	r3, [r7, #12]
		break;
 80054b2:	e012      	b.n	80054da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 80054b4:	4b16      	ldr	r3, [pc, #88]	; (8005510 <GPIO_voidSetPinMode+0xa4>)
 80054b6:	60fb      	str	r3, [r7, #12]
		break;
 80054b8:	e00f      	b.n	80054da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 80054ba:	4b16      	ldr	r3, [pc, #88]	; (8005514 <GPIO_voidSetPinMode+0xa8>)
 80054bc:	60fb      	str	r3, [r7, #12]
		break;
 80054be:	e00c      	b.n	80054da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 80054c0:	4b15      	ldr	r3, [pc, #84]	; (8005518 <GPIO_voidSetPinMode+0xac>)
 80054c2:	60fb      	str	r3, [r7, #12]
		break;
 80054c4:	e009      	b.n	80054da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <GPIO_voidSetPinMode+0xb0>)
 80054c8:	60fb      	str	r3, [r7, #12]
		break;
 80054ca:	e006      	b.n	80054da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 80054cc:	4b14      	ldr	r3, [pc, #80]	; (8005520 <GPIO_voidSetPinMode+0xb4>)
 80054ce:	60fb      	str	r3, [r7, #12]
		break;
 80054d0:	e003      	b.n	80054da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 80054d2:	4b14      	ldr	r3, [pc, #80]	; (8005524 <GPIO_voidSetPinMode+0xb8>)
 80054d4:	60fb      	str	r3, [r7, #12]
		break;
 80054d6:	e000      	b.n	80054da <GPIO_voidSetPinMode+0x6e>
	default:
		/* Port ID out of range */
		break;
 80054d8:	bf00      	nop
	}
	GPIOx->MODER &= ~(0b11<<(2*A_u8PinNo));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	79ba      	ldrb	r2, [r7, #6]
 80054e0:	0052      	lsls	r2, r2, #1
 80054e2:	2103      	movs	r1, #3
 80054e4:	fa01 f202 	lsl.w	r2, r1, r2
 80054e8:	43d2      	mvns	r2, r2
 80054ea:	401a      	ands	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (A_u8Mode<<(2*A_u8PinNo));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	7979      	ldrb	r1, [r7, #5]
 80054f6:	79ba      	ldrb	r2, [r7, #6]
 80054f8:	0052      	lsls	r2, r2, #1
 80054fa:	fa01 f202 	lsl.w	r2, r1, r2
 80054fe:	431a      	orrs	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	48000400 	.word	0x48000400
 8005514:	48000800 	.word	0x48000800
 8005518:	48000c00 	.word	0x48000c00
 800551c:	48001000 	.word	0x48001000
 8005520:	48001400 	.word	0x48001400
 8005524:	48001800 	.word	0x48001800

08005528 <GPIO_voidSetPinOutput_typ_spd>:
static void GPIO_voidSetPinOutput_typ_spd(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Output_t, u8 A_u8OutputSpeed)
{
 8005528:	b490      	push	{r4, r7}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4623      	mov	r3, r4
 8005538:	71fb      	strb	r3, [r7, #7]
 800553a:	4603      	mov	r3, r0
 800553c:	71bb      	strb	r3, [r7, #6]
 800553e:	460b      	mov	r3, r1
 8005540:	717b      	strb	r3, [r7, #5]
 8005542:	4613      	mov	r3, r2
 8005544:	713b      	strb	r3, [r7, #4]
	GPIO_RegMap_t *GPIOx = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	2b06      	cmp	r3, #6
 800554e:	d827      	bhi.n	80055a0 <GPIO_voidSetPinOutput_typ_spd+0x78>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <GPIO_voidSetPinOutput_typ_spd+0x30>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005575 	.word	0x08005575
 800555c:	0800557d 	.word	0x0800557d
 8005560:	08005583 	.word	0x08005583
 8005564:	08005589 	.word	0x08005589
 8005568:	0800558f 	.word	0x0800558f
 800556c:	08005595 	.word	0x08005595
 8005570:	0800559b 	.word	0x0800559b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8005574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005578:	60fb      	str	r3, [r7, #12]
		break;
 800557a:	e012      	b.n	80055a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800557c:	4b23      	ldr	r3, [pc, #140]	; (800560c <GPIO_voidSetPinOutput_typ_spd+0xe4>)
 800557e:	60fb      	str	r3, [r7, #12]
		break;
 8005580:	e00f      	b.n	80055a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8005582:	4b23      	ldr	r3, [pc, #140]	; (8005610 <GPIO_voidSetPinOutput_typ_spd+0xe8>)
 8005584:	60fb      	str	r3, [r7, #12]
		break;
 8005586:	e00c      	b.n	80055a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005588:	4b22      	ldr	r3, [pc, #136]	; (8005614 <GPIO_voidSetPinOutput_typ_spd+0xec>)
 800558a:	60fb      	str	r3, [r7, #12]
		break;
 800558c:	e009      	b.n	80055a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800558e:	4b22      	ldr	r3, [pc, #136]	; (8005618 <GPIO_voidSetPinOutput_typ_spd+0xf0>)
 8005590:	60fb      	str	r3, [r7, #12]
		break;
 8005592:	e006      	b.n	80055a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <GPIO_voidSetPinOutput_typ_spd+0xf4>)
 8005596:	60fb      	str	r3, [r7, #12]
		break;
 8005598:	e003      	b.n	80055a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800559a:	4b21      	ldr	r3, [pc, #132]	; (8005620 <GPIO_voidSetPinOutput_typ_spd+0xf8>)
 800559c:	60fb      	str	r3, [r7, #12]
		break;
 800559e:	e000      	b.n	80055a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	default:
		/* Port ID out of range */
		break;
 80055a0:	bf00      	nop
	}
	if(A_u8Output_t == GPIO_OT_PUSHPULL)
 80055a2:	797b      	ldrb	r3, [r7, #5]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <GPIO_voidSetPinOutput_typ_spd+0x96>
	{
		/* Set pin type */
		CLR_BIT(GPIOx->OTYPER,A_u8PinNo);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	79ba      	ldrb	r2, [r7, #6]
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f202 	lsl.w	r2, r1, r2
 80055b4:	43d2      	mvns	r2, r2
 80055b6:	401a      	ands	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	605a      	str	r2, [r3, #4]
 80055bc:	e00b      	b.n	80055d6 <GPIO_voidSetPinOutput_typ_spd+0xae>

	}else if(A_u8Output_t == GPIO_OT_OPEN_DRAIN)
 80055be:	797b      	ldrb	r3, [r7, #5]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d108      	bne.n	80055d6 <GPIO_voidSetPinOutput_typ_spd+0xae>
	{
		SET_BIT(GPIOx->OTYPER,A_u8PinNo);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	79ba      	ldrb	r2, [r7, #6]
 80055ca:	2101      	movs	r1, #1
 80055cc:	fa01 f202 	lsl.w	r2, r1, r2
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]
	}
	/* Set pin speed */
	GPIOx->OSPEEDR &= ~(0b11<<(2*A_u8PinNo));
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	79ba      	ldrb	r2, [r7, #6]
 80055dc:	0052      	lsls	r2, r2, #1
 80055de:	2103      	movs	r1, #3
 80055e0:	fa01 f202 	lsl.w	r2, r1, r2
 80055e4:	43d2      	mvns	r2, r2
 80055e6:	401a      	ands	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (A_u8OutputSpeed<<(2*A_u8PinNo));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	7939      	ldrb	r1, [r7, #4]
 80055f2:	79ba      	ldrb	r2, [r7, #6]
 80055f4:	0052      	lsls	r2, r2, #1
 80055f6:	fa01 f202 	lsl.w	r2, r1, r2
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bc90      	pop	{r4, r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	48000400 	.word	0x48000400
 8005610:	48000800 	.word	0x48000800
 8005614:	48000c00 	.word	0x48000c00
 8005618:	48001000 	.word	0x48001000
 800561c:	48001400 	.word	0x48001400
 8005620:	48001800 	.word	0x48001800

08005624 <GPIO_voidSetPinPUPD>:
	{
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
	}
}
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
 800562e:	460b      	mov	r3, r1
 8005630:	71bb      	strb	r3, [r7, #6]
 8005632:	4613      	mov	r3, r2
 8005634:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	2b06      	cmp	r3, #6
 800563e:	d827      	bhi.n	8005690 <GPIO_voidSetPinPUPD+0x6c>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <GPIO_voidSetPinPUPD+0x24>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	08005665 	.word	0x08005665
 800564c:	0800566d 	.word	0x0800566d
 8005650:	08005673 	.word	0x08005673
 8005654:	08005679 	.word	0x08005679
 8005658:	0800567f 	.word	0x0800567f
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568b 	.word	0x0800568b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8005664:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005668:	60fb      	str	r3, [r7, #12]
		break;
 800566a:	e012      	b.n	8005692 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800566c:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <GPIO_voidSetPinPUPD+0xa4>)
 800566e:	60fb      	str	r3, [r7, #12]
		break;
 8005670:	e00f      	b.n	8005692 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <GPIO_voidSetPinPUPD+0xa8>)
 8005674:	60fb      	str	r3, [r7, #12]
		break;
 8005676:	e00c      	b.n	8005692 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <GPIO_voidSetPinPUPD+0xac>)
 800567a:	60fb      	str	r3, [r7, #12]
		break;
 800567c:	e009      	b.n	8005692 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <GPIO_voidSetPinPUPD+0xb0>)
 8005680:	60fb      	str	r3, [r7, #12]
		break;
 8005682:	e006      	b.n	8005692 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005684:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <GPIO_voidSetPinPUPD+0xb4>)
 8005686:	60fb      	str	r3, [r7, #12]
		break;
 8005688:	e003      	b.n	8005692 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <GPIO_voidSetPinPUPD+0xb8>)
 800568c:	60fb      	str	r3, [r7, #12]
		break;
 800568e:	e000      	b.n	8005692 <GPIO_voidSetPinPUPD+0x6e>
	default:
		/* Port ID out of range */
		break;
 8005690:	bf00      	nop
	}
	GPIOx->PUPDR &= ~(0b11<<(2*A_u8PinNo));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	79ba      	ldrb	r2, [r7, #6]
 8005698:	0052      	lsls	r2, r2, #1
 800569a:	2103      	movs	r1, #3
 800569c:	fa01 f202 	lsl.w	r2, r1, r2
 80056a0:	43d2      	mvns	r2, r2
 80056a2:	401a      	ands	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (A_u8PullU_D<<(2*A_u8PinNo));
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	7979      	ldrb	r1, [r7, #5]
 80056ae:	79ba      	ldrb	r2, [r7, #6]
 80056b0:	0052      	lsls	r2, r2, #1
 80056b2:	fa01 f202 	lsl.w	r2, r1, r2
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	60da      	str	r2, [r3, #12]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	48000400 	.word	0x48000400
 80056cc:	48000800 	.word	0x48000800
 80056d0:	48000c00 	.word	0x48000c00
 80056d4:	48001000 	.word	0x48001000
 80056d8:	48001400 	.word	0x48001400
 80056dc:	48001800 	.word	0x48001800

080056e0 <GPIO_voidAltFunc>:
		break;
	}
	TOG_BIT(GPIOx->ODR,A_u8PinNo);
}
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
 80056ea:	460b      	mov	r3, r1
 80056ec:	71bb      	strb	r3, [r7, #6]
 80056ee:	4613      	mov	r3, r2
 80056f0:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	2b06      	cmp	r3, #6
 80056fa:	d827      	bhi.n	800574c <GPIO_voidAltFunc+0x6c>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <GPIO_voidAltFunc+0x24>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005721 	.word	0x08005721
 8005708:	08005729 	.word	0x08005729
 800570c:	0800572f 	.word	0x0800572f
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573b 	.word	0x0800573b
 8005718:	08005741 	.word	0x08005741
 800571c:	08005747 	.word	0x08005747
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8005720:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005724:	60fb      	str	r3, [r7, #12]
		break;
 8005726:	e012      	b.n	800574e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8005728:	4b24      	ldr	r3, [pc, #144]	; (80057bc <GPIO_voidAltFunc+0xdc>)
 800572a:	60fb      	str	r3, [r7, #12]
		break;
 800572c:	e00f      	b.n	800574e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <GPIO_voidAltFunc+0xe0>)
 8005730:	60fb      	str	r3, [r7, #12]
		break;
 8005732:	e00c      	b.n	800574e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005734:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <GPIO_voidAltFunc+0xe4>)
 8005736:	60fb      	str	r3, [r7, #12]
		break;
 8005738:	e009      	b.n	800574e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800573a:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <GPIO_voidAltFunc+0xe8>)
 800573c:	60fb      	str	r3, [r7, #12]
		break;
 800573e:	e006      	b.n	800574e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005740:	4b22      	ldr	r3, [pc, #136]	; (80057cc <GPIO_voidAltFunc+0xec>)
 8005742:	60fb      	str	r3, [r7, #12]
		break;
 8005744:	e003      	b.n	800574e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8005746:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <GPIO_voidAltFunc+0xf0>)
 8005748:	60fb      	str	r3, [r7, #12]
		break;
 800574a:	e000      	b.n	800574e <GPIO_voidAltFunc+0x6e>
	default:
		/* Port ID out of range */
		break;
 800574c:	bf00      	nop
	}
	if(A_u8PinNo < 8)
 800574e:	79bb      	ldrb	r3, [r7, #6]
 8005750:	2b07      	cmp	r3, #7
 8005752:	d815      	bhi.n	8005780 <GPIO_voidAltFunc+0xa0>
	{
		GPIOx->AFRL &= ~(0b1111<<(4*A_u8PinNo));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	79ba      	ldrb	r2, [r7, #6]
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	210f      	movs	r1, #15
 800575e:	fa01 f202 	lsl.w	r2, r1, r2
 8005762:	43d2      	mvns	r2, r2
 8005764:	401a      	ands	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
		GPIOx->AFRL |= (A_u8AltFunc<<(4*A_u8PinNo));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	7979      	ldrb	r1, [r7, #5]
 8005770:	79ba      	ldrb	r2, [r7, #6]
 8005772:	0092      	lsls	r2, r2, #2
 8005774:	fa01 f202 	lsl.w	r2, r1, r2
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
	{
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
	}

}
 800577e:	e016      	b.n	80057ae <GPIO_voidAltFunc+0xce>
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	79ba      	ldrb	r2, [r7, #6]
 8005786:	3a08      	subs	r2, #8
 8005788:	0092      	lsls	r2, r2, #2
 800578a:	210f      	movs	r1, #15
 800578c:	fa01 f202 	lsl.w	r2, r1, r2
 8005790:	43d2      	mvns	r2, r2
 8005792:	401a      	ands	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	7979      	ldrb	r1, [r7, #5]
 800579e:	79ba      	ldrb	r2, [r7, #6]
 80057a0:	3a08      	subs	r2, #8
 80057a2:	0092      	lsls	r2, r2, #2
 80057a4:	fa01 f202 	lsl.w	r2, r1, r2
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	48000400 	.word	0x48000400
 80057c0:	48000800 	.word	0x48000800
 80057c4:	48000c00 	.word	0x48000c00
 80057c8:	48001000 	.word	0x48001000
 80057cc:	48001400 	.word	0x48001400
 80057d0:	48001800 	.word	0x48001800

080057d4 <GPIO_voidInitPin>:
		break;
	}
	GPIOx->ODR ^= 0xFFFF;
}
void GPIO_voidInitPin(MGPIO_Config_t *A_xPin_Port_Config)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinMode(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->Mode);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	7818      	ldrb	r0, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7859      	ldrb	r1, [r3, #1]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	789b      	ldrb	r3, [r3, #2]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f7ff fe3f 	bl	800546c <GPIO_voidSetPinMode>
	GPIO_voidSetPinOutput_typ_spd(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->OutputType,A_xPin_Port_Config->OutputSpeed);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7818      	ldrb	r0, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7859      	ldrb	r1, [r3, #1]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	78da      	ldrb	r2, [r3, #3]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	791b      	ldrb	r3, [r3, #4]
 80057fe:	f7ff fe93 	bl	8005528 <GPIO_voidSetPinOutput_typ_spd>
	GPIO_voidSetPinPUPD(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->InputPull);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7818      	ldrb	r0, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7859      	ldrb	r1, [r3, #1]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	795b      	ldrb	r3, [r3, #5]
 800580e:	461a      	mov	r2, r3
 8005810:	f7ff ff08 	bl	8005624 <GPIO_voidSetPinPUPD>
	GPIO_voidAltFunc(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->AltFunc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7818      	ldrb	r0, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	7859      	ldrb	r1, [r3, #1]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	799b      	ldrb	r3, [r3, #6]
 8005820:	461a      	mov	r2, r3
 8005822:	f7ff ff5d 	bl	80056e0 <GPIO_voidAltFunc>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <RCC_voidInit>:

/****************************************************************************/
/*							Function Implementation							*/
/****************************************************************************/
void RCC_voidInit(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
	/*Clear All Registers To Avoid Errors*/

	RCC->CR = 0x00000000;
 8005834:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <RCC_voidInit+0xc4>)
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
	RCC->ICSCR = 0x00000000;
 800583a:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <RCC_voidInit+0xc4>)
 800583c:	2200      	movs	r2, #0
 800583e:	605a      	str	r2, [r3, #4]
	RCC->CFGR = 0x00000000;
 8005840:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <RCC_voidInit+0xc4>)
 8005842:	2200      	movs	r2, #0
 8005844:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00000000;
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <RCC_voidInit+0xc4>)
 8005848:	2200      	movs	r2, #0
 800584a:	60da      	str	r2, [r3, #12]
	RCC->BDCR = 0x00000000;
 800584c:	4b29      	ldr	r3, [pc, #164]	; (80058f4 <RCC_voidInit+0xc4>)
 800584e:	2200      	movs	r2, #0
 8005850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RCC->CSR = 0x00000000;
 8005854:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <RCC_voidInit+0xc4>)
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RCC->CRRCR = 0x00000000;
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <RCC_voidInit+0xc4>)
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	/*Turn HSI48 RC oscillator */
	RCC->CRRCR |=(RCC_HSI48<<0);
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <RCC_voidInit+0xc4>)
 8005866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586a:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <RCC_voidInit+0xc4>)
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	/*Turn on the different clocks*/
	RCC->CR |= (RCC_HSI_ON<<8);			//HSI Clock ON
 8005874:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <RCC_voidInit+0xc4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <RCC_voidInit+0xc4>)
 800587a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587e:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSIKER_ON<<9);		//HSIKER Clock ON
 8005880:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <RCC_voidInit+0xc4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <RCC_voidInit+0xc4>)
 8005886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800588a:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSE_ON<<16);		//HSE Clock ON
 800588c:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <RCC_voidInit+0xc4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <RCC_voidInit+0xc4>)
 8005892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005896:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSEBYP_ON<<18);		//HSE BYP ON
 8005898:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <RCC_voidInit+0xc4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <RCC_voidInit+0xc4>)
 800589e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a2:	6013      	str	r3, [r2, #0]
	//RCC->CR |= (RCC_PLL_ON<<24);		//PLL Clock ON


	/*HSI Trimming Value Adjust*/
	RCC->ICSCR |= (RCC_HSITRIM_VAL<<24);
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <RCC_voidInit+0xc4>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <RCC_voidInit+0xc4>)
 80058aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ae:	6053      	str	r3, [r2, #4]

	/*Select System Clock*/
	RCC->CFGR |= (RCC_SYSCLK_SEL<<0);
 80058b0:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <RCC_voidInit+0xc4>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a0f      	ldr	r2, [pc, #60]	; (80058f4 <RCC_voidInit+0xc4>)
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	6093      	str	r3, [r2, #8]
	/*Select Micro-controller Output Clock*/
	RCC->CFGR |= (RCC_MCO_SEL<<24);
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <RCC_voidInit+0xc4>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <RCC_voidInit+0xc4>)
 80058c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058c6:	6093      	str	r3, [r2, #8]

	/*Select Micro-controller Output Prescaler*/
	RCC->CFGR |= (RCC_MCO_PRE<<28);
 80058c8:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <RCC_voidInit+0xc4>)
 80058ca:	4a0a      	ldr	r2, [pc, #40]	; (80058f4 <RCC_voidInit+0xc4>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	6093      	str	r3, [r2, #8]
	/*Select AHB Prescaler*/
	RCC->CFGR |= (RCC_AHB_PRE<<4);
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <RCC_voidInit+0xc4>)
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <RCC_voidInit+0xc4>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	6093      	str	r3, [r2, #8]
	/*Select APB1 Prescaler*/
	RCC->CFGR |= (RCC_APB1_PRE<<8);
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <RCC_voidInit+0xc4>)
 80058da:	4a06      	ldr	r2, [pc, #24]	; (80058f4 <RCC_voidInit+0xc4>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	6093      	str	r3, [r2, #8]
	/*Select APB2 Prescaler*/
	RCC->CFGR |= (RCC_APB2_PRE<<11);
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <RCC_voidInit+0xc4>)
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <RCC_voidInit+0xc4>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	6093      	str	r3, [r2, #8]



}
 80058e8:	bf00      	nop
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40021000 	.word	0x40021000

080058f8 <RCC_voidPeripheralClockEnable>:
void RCC_voidPeripheralClockEnable(u8 A_u8BusName, RCC_Peripheral_t A_tPeripheral)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	460a      	mov	r2, r1
 8005902:	71fb      	strb	r3, [r7, #7]
 8005904:	4613      	mov	r3, r2
 8005906:	71bb      	strb	r3, [r7, #6]
	switch(A_u8BusName)
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b05      	cmp	r3, #5
 800590c:	d850      	bhi.n	80059b0 <RCC_voidPeripheralClockEnable+0xb8>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <RCC_voidPeripheralClockEnable+0x1c>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005943 	.word	0x08005943
 800591c:	08005959 	.word	0x08005959
 8005920:	0800596f 	.word	0x0800596f
 8005924:	08005985 	.word	0x08005985
 8005928:	0800599b 	.word	0x0800599b
	{
		case RCC_AHB1:
			SET_BIT(RCC->AHB1ENR, A_tPeripheral);
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 800592e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005930:	79ba      	ldrb	r2, [r7, #6]
 8005932:	2101      	movs	r1, #1
 8005934:	fa01 f202 	lsl.w	r2, r1, r2
 8005938:	4611      	mov	r1, r2
 800593a:	4a20      	ldr	r2, [pc, #128]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 8005940:	e036      	b.n	80059b0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB2:
			SET_BIT(RCC->AHB2ENR, A_tPeripheral);
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	79ba      	ldrb	r2, [r7, #6]
 8005948:	2101      	movs	r1, #1
 800594a:	fa01 f202 	lsl.w	r2, r1, r2
 800594e:	4611      	mov	r1, r2
 8005950:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 8005952:	430b      	orrs	r3, r1
 8005954:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8005956:	e02b      	b.n	80059b0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB3:
			SET_BIT(RCC->AHB3ENR, A_tPeripheral);
 8005958:	4b18      	ldr	r3, [pc, #96]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	79ba      	ldrb	r2, [r7, #6]
 800595e:	2101      	movs	r1, #1
 8005960:	fa01 f202 	lsl.w	r2, r1, r2
 8005964:	4611      	mov	r1, r2
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 8005968:	430b      	orrs	r3, r1
 800596a:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 800596c:	e020      	b.n	80059b0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_1:
			SET_BIT(RCC->APB1ENR1, A_tPeripheral);
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	79ba      	ldrb	r2, [r7, #6]
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	4611      	mov	r1, r2
 800597c:	4a0f      	ldr	r2, [pc, #60]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 800597e:	430b      	orrs	r3, r1
 8005980:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8005982:	e015      	b.n	80059b0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_2:
			SET_BIT(RCC->APB1ENR2, A_tPeripheral);
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 8005986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005988:	79ba      	ldrb	r2, [r7, #6]
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	4611      	mov	r1, r2
 8005992:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 8005994:	430b      	orrs	r3, r1
 8005996:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 8005998:	e00a      	b.n	80059b0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB2:
			SET_BIT(RCC->APB2ENR, A_tPeripheral);
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	79ba      	ldrb	r2, [r7, #6]
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f202 	lsl.w	r2, r1, r2
 80059a6:	4611      	mov	r1, r2
 80059a8:	4a04      	ldr	r2, [pc, #16]	; (80059bc <RCC_voidPeripheralClockEnable+0xc4>)
 80059aa:	430b      	orrs	r3, r1
 80059ac:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 80059ae:	bf00      	nop
	}
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	40021000 	.word	0x40021000

080059c0 <RCC_voidPeripheralClockCfg>:
			SET_BIT(RCC->APB2RSTR, A_tPeripheral);
			break;
	}
}
void RCC_voidPeripheralClockCfg(u8 A_u8RegName, RCC_Peripheral_Cfg_t A_tCfgPeripheral)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	460a      	mov	r2, r1
 80059ca:	71fb      	strb	r3, [r7, #7]
 80059cc:	4613      	mov	r3, r2
 80059ce:	71bb      	strb	r3, [r7, #6]
	switch(A_u8RegName)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d003      	beq.n	80059de <RCC_voidPeripheralClockCfg+0x1e>
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f000 80cd 	beq.w	8005b76 <RCC_voidPeripheralClockCfg+0x1b6>
					RCC->CCIPR2 |= (RCC_QSPI_CLK<<QSPI_Cfg);
					break;
			}
			break;
	}
}
 80059dc:	e0e3      	b.n	8005ba6 <RCC_voidPeripheralClockCfg+0x1e6>
			switch(A_tCfgPeripheral)
 80059de:	79bb      	ldrb	r3, [r7, #6]
 80059e0:	2b1e      	cmp	r3, #30
 80059e2:	f200 80df 	bhi.w	8005ba4 <RCC_voidPeripheralClockCfg+0x1e4>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <RCC_voidPeripheralClockCfg+0x2c>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a69 	.word	0x08005a69
 80059f0:	08005ba5 	.word	0x08005ba5
 80059f4:	08005a7b 	.word	0x08005a7b
 80059f8:	08005ba5 	.word	0x08005ba5
 80059fc:	08005a8d 	.word	0x08005a8d
 8005a00:	08005ba5 	.word	0x08005ba5
 8005a04:	08005a9f 	.word	0x08005a9f
 8005a08:	08005ba5 	.word	0x08005ba5
 8005a0c:	08005ab1 	.word	0x08005ab1
 8005a10:	08005ba5 	.word	0x08005ba5
 8005a14:	08005ac3 	.word	0x08005ac3
 8005a18:	08005ba5 	.word	0x08005ba5
 8005a1c:	08005ad5 	.word	0x08005ad5
 8005a20:	08005ba5 	.word	0x08005ba5
 8005a24:	08005ae7 	.word	0x08005ae7
 8005a28:	08005ba5 	.word	0x08005ba5
 8005a2c:	08005af9 	.word	0x08005af9
 8005a30:	08005ba5 	.word	0x08005ba5
 8005a34:	08005b0b 	.word	0x08005b0b
 8005a38:	08005ba5 	.word	0x08005ba5
 8005a3c:	08005b19 	.word	0x08005b19
 8005a40:	08005ba5 	.word	0x08005ba5
 8005a44:	08005b27 	.word	0x08005b27
 8005a48:	08005ba5 	.word	0x08005ba5
 8005a4c:	08005b35 	.word	0x08005b35
 8005a50:	08005ba5 	.word	0x08005ba5
 8005a54:	08005b43 	.word	0x08005b43
 8005a58:	08005ba5 	.word	0x08005ba5
 8005a5c:	08005b51 	.word	0x08005b51
 8005a60:	08005ba5 	.word	0x08005ba5
 8005a64:	08005b63 	.word	0x08005b63
					RCC->CCIPR |= (RCC_USART1_CLK<<USART1_Cfg);
 8005a68:	4b52      	ldr	r3, [pc, #328]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6e:	4a51      	ldr	r2, [pc, #324]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005a78:	e07c      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART2_CLK<<USART2_Cfg);
 8005a7a:	4b4e      	ldr	r3, [pc, #312]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	4a4c      	ldr	r2, [pc, #304]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005a8a:	e073      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART3_CLK<<USART3_Cfg);
 8005a8c:	4b49      	ldr	r3, [pc, #292]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	4a48      	ldr	r2, [pc, #288]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005a94:	f043 0310 	orr.w	r3, r3, #16
 8005a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005a9c:	e06a      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART4_CLK<<USART4_Cfg);
 8005a9e:	4b45      	ldr	r3, [pc, #276]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	4a43      	ldr	r2, [pc, #268]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005aae:	e061      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART5_CLK<<USART5_Cfg);
 8005ab0:	4b40      	ldr	r3, [pc, #256]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab6:	4a3f      	ldr	r2, [pc, #252]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005ac0:	e058      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_LPUSART_CLK<<LPUART1_Cfg);
 8005ac2:	4b3c      	ldr	r3, [pc, #240]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	4a3a      	ldr	r2, [pc, #232]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005ad2:	e04f      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C1_CLK<<I2C1_Cfg);
 8005ad4:	4b37      	ldr	r3, [pc, #220]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	4a36      	ldr	r2, [pc, #216]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005ae4:	e046      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C2_CLK<<I2C2_Cfg);
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	4a31      	ldr	r2, [pc, #196]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005af6:	e03d      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C3_CLK<<I2C3_Cfg);
 8005af8:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	4a2d      	ldr	r2, [pc, #180]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b08:	e034      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_LPTIM1_CLK<<LPTIM1_Cfg);
 8005b0a:	4b2a      	ldr	r3, [pc, #168]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b0c:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b16:	e02d      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_SAI1_CLK<<SAI1_Cfg);
 8005b18:	4b26      	ldr	r3, [pc, #152]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b1a:	4a26      	ldr	r2, [pc, #152]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b24:	e026      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2S23_CLK<<I2S23_Cfg);
 8005b26:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b32:	e01f      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_FDCAN_CLK<<FDCAN_Cfg);
 8005b34:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b36:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b40:	e018      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_CLK48_CLK<<CLK48_Cfg);
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b4e:	e011      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_ADC12_CLK<<ADC12_Cfg);
 8005b50:	4b18      	ldr	r3, [pc, #96]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b60:	e008      	b.n	8005b74 <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_ADC345_CLK<<ADC345_Cfg);
 8005b62:	4b14      	ldr	r3, [pc, #80]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005b72:	bf00      	nop
			break;
 8005b74:	e016      	b.n	8005ba4 <RCC_voidPeripheralClockCfg+0x1e4>
			switch(A_tCfgPeripheral)
 8005b76:	79bb      	ldrb	r3, [r7, #6]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <RCC_voidPeripheralClockCfg+0x1c2>
 8005b7c:	2b14      	cmp	r3, #20
 8005b7e:	d009      	beq.n	8005b94 <RCC_voidPeripheralClockCfg+0x1d4>
			break;
 8005b80:	e011      	b.n	8005ba6 <RCC_voidPeripheralClockCfg+0x1e6>
					RCC->CCIPR2 |= (RCC_I2C4_CLK<<I2C4_Cfg);
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b88:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
					break;
 8005b92:	e006      	b.n	8005ba2 <RCC_voidPeripheralClockCfg+0x1e2>
					RCC->CCIPR2 |= (RCC_QSPI_CLK<<QSPI_Cfg);
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b96:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <RCC_voidPeripheralClockCfg+0x1f4>)
 8005b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
					break;
 8005ba0:	bf00      	nop
			break;
 8005ba2:	e000      	b.n	8005ba6 <RCC_voidPeripheralClockCfg+0x1e6>
			break;
 8005ba4:	bf00      	nop
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000

08005bb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bc8:	f002 f912 	bl	8007df0 <USBD_static_malloc>
 8005bcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e066      	b.n	8005cae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	7c1b      	ldrb	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d119      	bne.n	8005c24 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	2181      	movs	r1, #129	; 0x81
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 ffa0 	bl	8007b3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c08:	2202      	movs	r2, #2
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 ff96 	bl	8007b3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c22:	e016      	b.n	8005c52 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c24:	2340      	movs	r3, #64	; 0x40
 8005c26:	2202      	movs	r2, #2
 8005c28:	2181      	movs	r1, #129	; 0x81
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 ff87 	bl	8007b3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c36:	2340      	movs	r3, #64	; 0x40
 8005c38:	2202      	movs	r2, #2
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 ff7e 	bl	8007b3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c52:	2308      	movs	r3, #8
 8005c54:	2203      	movs	r2, #3
 8005c56:	2182      	movs	r1, #130	; 0x82
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 ff70 	bl	8007b3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7c1b      	ldrb	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c92:	2101      	movs	r1, #1
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f002 f841 	bl	8007d1c <USBD_LL_PrepareReceive>
 8005c9a:	e007      	b.n	8005cac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ca2:	2340      	movs	r3, #64	; 0x40
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f002 f838 	bl	8007d1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cc2:	2181      	movs	r1, #129	; 0x81
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 ff60 	bl	8007b8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 ff59 	bl	8007b8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ce0:	2182      	movs	r1, #130	; 0x82
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 ff51 	bl	8007b8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00e      	beq.n	8005d20 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d12:	4618      	mov	r0, r3
 8005d14:	f002 f87a 	bl	8007e0c <USBD_static_free>
    pdev->pClassData = NULL;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e0af      	b.n	8005eb4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d03f      	beq.n	8005de0 <USBD_CDC_Setup+0xb4>
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	f040 809f 	bne.w	8005ea4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	88db      	ldrh	r3, [r3, #6]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d02e      	beq.n	8005dcc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da16      	bge.n	8005da6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005d84:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	88d2      	ldrh	r2, [r2, #6]
 8005d8a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	88db      	ldrh	r3, [r3, #6]
 8005d90:	2b07      	cmp	r3, #7
 8005d92:	bf28      	it	cs
 8005d94:	2307      	movcs	r3, #7
 8005d96:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	89fa      	ldrh	r2, [r7, #14]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 facf 	bl	8007342 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005da4:	e085      	b.n	8005eb2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	785a      	ldrb	r2, [r3, #1]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	88db      	ldrh	r3, [r3, #6]
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005dbc:	6939      	ldr	r1, [r7, #16]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	88db      	ldrh	r3, [r3, #6]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 fae8 	bl	800739a <USBD_CtlPrepareRx>
      break;
 8005dca:	e072      	b.n	8005eb2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	7850      	ldrb	r0, [r2, #1]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	4798      	blx	r3
      break;
 8005dde:	e068      	b.n	8005eb2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b0b      	cmp	r3, #11
 8005de6:	d852      	bhi.n	8005e8e <USBD_CDC_Setup+0x162>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <USBD_CDC_Setup+0xc4>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e21 	.word	0x08005e21
 8005df4:	08005e9d 	.word	0x08005e9d
 8005df8:	08005e8f 	.word	0x08005e8f
 8005dfc:	08005e8f 	.word	0x08005e8f
 8005e00:	08005e8f 	.word	0x08005e8f
 8005e04:	08005e8f 	.word	0x08005e8f
 8005e08:	08005e8f 	.word	0x08005e8f
 8005e0c:	08005e8f 	.word	0x08005e8f
 8005e10:	08005e8f 	.word	0x08005e8f
 8005e14:	08005e8f 	.word	0x08005e8f
 8005e18:	08005e4b 	.word	0x08005e4b
 8005e1c:	08005e75 	.word	0x08005e75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d107      	bne.n	8005e3c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e2c:	f107 030a 	add.w	r3, r7, #10
 8005e30:	2202      	movs	r2, #2
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 fa84 	bl	8007342 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e3a:	e032      	b.n	8005ea2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 fa0e 	bl	8007260 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e44:	2303      	movs	r3, #3
 8005e46:	75fb      	strb	r3, [r7, #23]
          break;
 8005e48:	e02b      	b.n	8005ea2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d107      	bne.n	8005e66 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e56:	f107 030d 	add.w	r3, r7, #13
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fa6f 	bl	8007342 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e64:	e01d      	b.n	8005ea2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 f9f9 	bl	8007260 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	75fb      	strb	r3, [r7, #23]
          break;
 8005e72:	e016      	b.n	8005ea2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d00f      	beq.n	8005ea0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f9ec 	bl	8007260 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e8c:	e008      	b.n	8005ea0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 f9e5 	bl	8007260 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e96:	2303      	movs	r3, #3
 8005e98:	75fb      	strb	r3, [r7, #23]
          break;
 8005e9a:	e002      	b.n	8005ea2 <USBD_CDC_Setup+0x176>
          break;
 8005e9c:	bf00      	nop
 8005e9e:	e008      	b.n	8005eb2 <USBD_CDC_Setup+0x186>
          break;
 8005ea0:	bf00      	nop
      }
      break;
 8005ea2:	e006      	b.n	8005eb2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 f9da 	bl	8007260 <USBD_CtlError>
      ret = USBD_FAIL;
 8005eac:	2303      	movs	r3, #3
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ece:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e04f      	b.n	8005f7e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ee6:	78fa      	ldrb	r2, [r7, #3]
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3318      	adds	r3, #24
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d029      	beq.n	8005f50 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	3318      	adds	r3, #24
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	78f9      	ldrb	r1, [r7, #3]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	460b      	mov	r3, r1
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4403      	add	r3, r0
 8005f1c:	3320      	adds	r3, #32
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d110      	bne.n	8005f50 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f42:	78f9      	ldrb	r1, [r7, #3]
 8005f44:	2300      	movs	r3, #0
 8005f46:	2200      	movs	r2, #0
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 fec6 	bl	8007cda <USBD_LL_Transmit>
 8005f4e:	e015      	b.n	8005f7c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e015      	b.n	8005fd4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 fed6 	bl	8007d5e <USBD_LL_GetRxDataSize>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e01b      	b.n	800602e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d015      	beq.n	800602c <USBD_CDC_EP0_RxReady+0x50>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006006:	2bff      	cmp	r3, #255	; 0xff
 8006008:	d010      	beq.n	800602c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006018:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006020:	b292      	uxth	r2, r2
 8006022:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	22ff      	movs	r2, #255	; 0xff
 8006028:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2243      	movs	r2, #67	; 0x43
 8006044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	200000a4 	.word	0x200000a4

08006058 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2243      	movs	r2, #67	; 0x43
 8006064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20000060 	.word	0x20000060

08006078 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2243      	movs	r2, #67	; 0x43
 8006084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006086:	4b03      	ldr	r3, [pc, #12]	; (8006094 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	200000e8 	.word	0x200000e8

08006098 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	220a      	movs	r2, #10
 80060a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	2000001c 	.word	0x2000001c

080060b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e004      	b.n	80060d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b087      	sub	sp, #28
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e008      	b.n	8006112 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006136:	2303      	movs	r3, #3
 8006138:	e004      	b.n	8006144 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800616e:	2303      	movs	r3, #3
 8006170:	e01a      	b.n	80061a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006178:	2b00      	cmp	r3, #0
 800617a:	d114      	bne.n	80061a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2201      	movs	r2, #1
 8006180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800619a:	2181      	movs	r1, #129	; 0x81
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 fd9c 	bl	8007cda <USBD_LL_Transmit>

    ret = USBD_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e016      	b.n	80061fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	7c1b      	ldrb	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e0:	2101      	movs	r1, #1
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fd9a 	bl	8007d1c <USBD_LL_PrepareReceive>
 80061e8:	e007      	b.n	80061fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f0:	2340      	movs	r3, #64	; 0x40
 80061f2:	2101      	movs	r1, #1
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fd91 	bl	8007d1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	e01f      	b.n	800625c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	79fa      	ldrb	r2, [r7, #7]
 800624e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f001 fbf9 	bl	8007a48 <USBD_LL_Init>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

  return ret;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006278:	2303      	movs	r3, #3
 800627a:	e016      	b.n	80062aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	f107 020e 	add.w	r2, r7, #14
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3
 80062a0:	4602      	mov	r2, r0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 fc24 	bl	8007b08 <USBD_LL_Start>
 80062c0:	4603      	mov	r3, r0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	4611      	mov	r1, r2
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	78fa      	ldrb	r2, [r7, #3]
 8006338:	4611      	mov	r1, r2
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
  }

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 ff46 	bl	80071ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2b02      	cmp	r3, #2
 8006382:	d01a      	beq.n	80063ba <USBD_LL_SetupStage+0x72>
 8006384:	2b02      	cmp	r3, #2
 8006386:	d822      	bhi.n	80063ce <USBD_LL_SetupStage+0x86>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <USBD_LL_SetupStage+0x4a>
 800638c:	2b01      	cmp	r3, #1
 800638e:	d00a      	beq.n	80063a6 <USBD_LL_SetupStage+0x5e>
 8006390:	e01d      	b.n	80063ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f9ee 	bl	800677c <USBD_StdDevReq>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
      break;
 80063a4:	e020      	b.n	80063e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa52 	bl	8006858 <USBD_StdItfReq>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
      break;
 80063b8:	e016      	b.n	80063e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa91 	bl	80068ea <USBD_StdEPReq>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	e00c      	b.n	80063e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fbf3 	bl	8007bc8 <USBD_LL_StallEP>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73fb      	strb	r3, [r7, #15]
      break;
 80063e6:	bf00      	nop
  }

  return ret;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	460b      	mov	r3, r1
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d138      	bne.n	8006478 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800640c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006414:	2b03      	cmp	r3, #3
 8006416:	d14a      	bne.n	80064ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d913      	bls.n	800644c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	4293      	cmp	r3, r2
 800643c:	bf28      	it	cs
 800643e:	4613      	movcs	r3, r2
 8006440:	461a      	mov	r2, r3
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 ffc5 	bl	80073d4 <USBD_CtlContinueRx>
 800644a:	e030      	b.n	80064ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b03      	cmp	r3, #3
 8006456:	d10b      	bne.n	8006470 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 ffc0 	bl	80073f6 <USBD_CtlSendStatus>
 8006476:	e01a      	b.n	80064ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b03      	cmp	r3, #3
 8006482:	d114      	bne.n	80064ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	7afa      	ldrb	r2, [r7, #11]
 800649a:	4611      	mov	r1, r2
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	4798      	blx	r3
 80064a0:	4603      	mov	r3, r0
 80064a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	e000      	b.n	80064b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	460b      	mov	r3, r1
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d16b      	bne.n	80065a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3314      	adds	r3, #20
 80064d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d156      	bne.n	800658a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d914      	bls.n	8006512 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 ff3a 	bl	8007378 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006504:	2300      	movs	r3, #0
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f001 fc06 	bl	8007d1c <USBD_LL_PrepareReceive>
 8006510:	e03b      	b.n	800658a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	d11c      	bne.n	8006558 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006526:	429a      	cmp	r2, r3
 8006528:	d316      	bcc.n	8006558 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006534:	429a      	cmp	r2, r3
 8006536:	d20f      	bcs.n	8006558 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006538:	2200      	movs	r2, #0
 800653a:	2100      	movs	r1, #0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 ff1b 	bl	8007378 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800654a:	2300      	movs	r3, #0
 800654c:	2200      	movs	r2, #0
 800654e:	2100      	movs	r1, #0
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 fbe3 	bl	8007d1c <USBD_LL_PrepareReceive>
 8006556:	e018      	b.n	800658a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b03      	cmp	r3, #3
 8006562:	d10b      	bne.n	800657c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800657c:	2180      	movs	r1, #128	; 0x80
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f001 fb22 	bl	8007bc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 ff49 	bl	800741c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d122      	bne.n	80065da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff fe98 	bl	80062ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065a2:	e01a      	b.n	80065da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d114      	bne.n	80065da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00e      	beq.n	80065da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	7afa      	ldrb	r2, [r7, #11]
 80065c6:	4611      	mov	r1, r2
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	4798      	blx	r3
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	e000      	b.n	80065dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	e02f      	b.n	8006678 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6852      	ldr	r2, [r2, #4]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	4611      	mov	r1, r2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	2200      	movs	r2, #0
 8006646:	2100      	movs	r1, #0
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fa78 	bl	8007b3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2240      	movs	r2, #64	; 0x40
 800665a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800665e:	2340      	movs	r3, #64	; 0x40
 8006660:	2200      	movs	r2, #0
 8006662:	2180      	movs	r1, #128	; 0x80
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fa6a 	bl	8007b3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2204      	movs	r2, #4
 80066ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d106      	bne.n	80066ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	e012      	b.n	8006738 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b03      	cmp	r3, #3
 800671c:	d10b      	bne.n	8006736 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	3301      	adds	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800675e:	8a3b      	ldrh	r3, [r7, #16]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	b21a      	sxth	r2, r3
 8006764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006768:	4313      	orrs	r3, r2
 800676a:	b21b      	sxth	r3, r3
 800676c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800676e:	89fb      	ldrh	r3, [r7, #14]
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d005      	beq.n	80067a2 <USBD_StdDevReq+0x26>
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d853      	bhi.n	8006842 <USBD_StdDevReq+0xc6>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <USBD_StdDevReq+0x3a>
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d14f      	bne.n	8006842 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
      break;
 80067b4:	e04a      	b.n	800684c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	d83b      	bhi.n	8006836 <USBD_StdDevReq+0xba>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <USBD_StdDevReq+0x48>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	08006819 	.word	0x08006819
 80067c8:	0800682d 	.word	0x0800682d
 80067cc:	08006837 	.word	0x08006837
 80067d0:	08006823 	.word	0x08006823
 80067d4:	08006837 	.word	0x08006837
 80067d8:	080067f7 	.word	0x080067f7
 80067dc:	080067ed 	.word	0x080067ed
 80067e0:	08006837 	.word	0x08006837
 80067e4:	0800680f 	.word	0x0800680f
 80067e8:	08006801 	.word	0x08006801
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f9de 	bl	8006bb0 <USBD_GetDescriptor>
          break;
 80067f4:	e024      	b.n	8006840 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fb6d 	bl	8006ed8 <USBD_SetAddress>
          break;
 80067fe:	e01f      	b.n	8006840 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fbac 	bl	8006f60 <USBD_SetConfig>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
          break;
 800680c:	e018      	b.n	8006840 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fc4b 	bl	80070ac <USBD_GetConfig>
          break;
 8006816:	e013      	b.n	8006840 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fc7c 	bl	8007118 <USBD_GetStatus>
          break;
 8006820:	e00e      	b.n	8006840 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fcab 	bl	8007180 <USBD_SetFeature>
          break;
 800682a:	e009      	b.n	8006840 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fcba 	bl	80071a8 <USBD_ClrFeature>
          break;
 8006834:	e004      	b.n	8006840 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fd11 	bl	8007260 <USBD_CtlError>
          break;
 800683e:	bf00      	nop
      }
      break;
 8006840:	e004      	b.n	800684c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fd0b 	bl	8007260 <USBD_CtlError>
      break;
 800684a:	bf00      	nop
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop

08006858 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d005      	beq.n	800687e <USBD_StdItfReq+0x26>
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d82f      	bhi.n	80068d6 <USBD_StdItfReq+0x7e>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <USBD_StdItfReq+0x26>
 800687a:	2b20      	cmp	r3, #32
 800687c:	d12b      	bne.n	80068d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006884:	b2db      	uxtb	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	2b02      	cmp	r3, #2
 800688a:	d81d      	bhi.n	80068c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	889b      	ldrh	r3, [r3, #4]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b01      	cmp	r3, #1
 8006894:	d813      	bhi.n	80068be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	88db      	ldrh	r3, [r3, #6]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d110      	bne.n	80068d2 <USBD_StdItfReq+0x7a>
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10d      	bne.n	80068d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fd9d 	bl	80073f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068bc:	e009      	b.n	80068d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fccd 	bl	8007260 <USBD_CtlError>
          break;
 80068c6:	e004      	b.n	80068d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fcc8 	bl	8007260 <USBD_CtlError>
          break;
 80068d0:	e000      	b.n	80068d4 <USBD_StdItfReq+0x7c>
          break;
 80068d2:	bf00      	nop
      }
      break;
 80068d4:	e004      	b.n	80068e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fcc1 	bl	8007260 <USBD_CtlError>
      break;
 80068de:	bf00      	nop
  }

  return ret;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	889b      	ldrh	r3, [r3, #4]
 80068fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d007      	beq.n	800691a <USBD_StdEPReq+0x30>
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	f200 8145 	bhi.w	8006b9a <USBD_StdEPReq+0x2b0>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00c      	beq.n	800692e <USBD_StdEPReq+0x44>
 8006914:	2b20      	cmp	r3, #32
 8006916:	f040 8140 	bne.w	8006b9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
      break;
 800692c:	e13a      	b.n	8006ba4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	785b      	ldrb	r3, [r3, #1]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d007      	beq.n	8006946 <USBD_StdEPReq+0x5c>
 8006936:	2b03      	cmp	r3, #3
 8006938:	f300 8129 	bgt.w	8006b8e <USBD_StdEPReq+0x2a4>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d07f      	beq.n	8006a40 <USBD_StdEPReq+0x156>
 8006940:	2b01      	cmp	r3, #1
 8006942:	d03c      	beq.n	80069be <USBD_StdEPReq+0xd4>
 8006944:	e123      	b.n	8006b8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d002      	beq.n	8006958 <USBD_StdEPReq+0x6e>
 8006952:	2b03      	cmp	r3, #3
 8006954:	d016      	beq.n	8006984 <USBD_StdEPReq+0x9a>
 8006956:	e02c      	b.n	80069b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00d      	beq.n	800697a <USBD_StdEPReq+0x90>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b80      	cmp	r3, #128	; 0x80
 8006962:	d00a      	beq.n	800697a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 f92d 	bl	8007bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800696e:	2180      	movs	r1, #128	; 0x80
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 f929 	bl	8007bc8 <USBD_LL_StallEP>
 8006976:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006978:	e020      	b.n	80069bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc6f 	bl	8007260 <USBD_CtlError>
              break;
 8006982:	e01b      	b.n	80069bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	885b      	ldrh	r3, [r3, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10e      	bne.n	80069aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <USBD_StdEPReq+0xc0>
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d008      	beq.n	80069aa <USBD_StdEPReq+0xc0>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	88db      	ldrh	r3, [r3, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 f90f 	bl	8007bc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fd23 	bl	80073f6 <USBD_CtlSendStatus>

              break;
 80069b0:	e004      	b.n	80069bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fc53 	bl	8007260 <USBD_CtlError>
              break;
 80069ba:	bf00      	nop
          }
          break;
 80069bc:	e0ec      	b.n	8006b98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d002      	beq.n	80069d0 <USBD_StdEPReq+0xe6>
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d016      	beq.n	80069fc <USBD_StdEPReq+0x112>
 80069ce:	e030      	b.n	8006a32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00d      	beq.n	80069f2 <USBD_StdEPReq+0x108>
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b80      	cmp	r3, #128	; 0x80
 80069da:	d00a      	beq.n	80069f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 f8f1 	bl	8007bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069e6:	2180      	movs	r1, #128	; 0x80
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 f8ed 	bl	8007bc8 <USBD_LL_StallEP>
 80069ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f0:	e025      	b.n	8006a3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fc33 	bl	8007260 <USBD_CtlError>
              break;
 80069fa:	e020      	b.n	8006a3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	885b      	ldrh	r3, [r3, #2]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11b      	bne.n	8006a3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 f8f7 	bl	8007c06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fcec 	bl	80073f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006a30:	e004      	b.n	8006a3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc13 	bl	8007260 <USBD_CtlError>
              break;
 8006a3a:	e000      	b.n	8006a3e <USBD_StdEPReq+0x154>
              break;
 8006a3c:	bf00      	nop
          }
          break;
 8006a3e:	e0ab      	b.n	8006b98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d002      	beq.n	8006a52 <USBD_StdEPReq+0x168>
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d032      	beq.n	8006ab6 <USBD_StdEPReq+0x1cc>
 8006a50:	e097      	b.n	8006b82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d007      	beq.n	8006a68 <USBD_StdEPReq+0x17e>
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d004      	beq.n	8006a68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fbfd 	bl	8007260 <USBD_CtlError>
                break;
 8006a66:	e091      	b.n	8006b8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	da0b      	bge.n	8006a88 <USBD_StdEPReq+0x19e>
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	3310      	adds	r3, #16
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	3304      	adds	r3, #4
 8006a86:	e00b      	b.n	8006aa0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fc47 	bl	8007342 <USBD_CtlSendData>
              break;
 8006ab4:	e06a      	b.n	8006b8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da11      	bge.n	8006ae2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	3324      	adds	r3, #36	; 0x24
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d117      	bne.n	8006b08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fbc0 	bl	8007260 <USBD_CtlError>
                  break;
 8006ae0:	e054      	b.n	8006b8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	f003 020f 	and.w	r2, r3, #15
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	440b      	add	r3, r1
 8006af4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fbad 	bl	8007260 <USBD_CtlError>
                  break;
 8006b06:	e041      	b.n	8006b8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	da0b      	bge.n	8006b28 <USBD_StdEPReq+0x23e>
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	3310      	adds	r3, #16
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	3304      	adds	r3, #4
 8006b26:	e00b      	b.n	8006b40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3304      	adds	r3, #4
 8006b40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <USBD_StdEPReq+0x264>
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2b80      	cmp	r3, #128	; 0x80
 8006b4c:	d103      	bne.n	8006b56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e00e      	b.n	8006b74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 f872 	bl	8007c44 <USBD_LL_IsStallEP>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e002      	b.n	8006b74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2202      	movs	r2, #2
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fbe1 	bl	8007342 <USBD_CtlSendData>
              break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fb6b 	bl	8007260 <USBD_CtlError>
              break;
 8006b8a:	bf00      	nop
          }
          break;
 8006b8c:	e004      	b.n	8006b98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fb65 	bl	8007260 <USBD_CtlError>
          break;
 8006b96:	bf00      	nop
      }
      break;
 8006b98:	e004      	b.n	8006ba4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fb5f 	bl	8007260 <USBD_CtlError>
      break;
 8006ba2:	bf00      	nop
  }

  return ret;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	2b0e      	cmp	r3, #14
 8006bd2:	f200 8152 	bhi.w	8006e7a <USBD_GetDescriptor+0x2ca>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <USBD_GetDescriptor+0x2c>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c4d 	.word	0x08006c4d
 8006be0:	08006c65 	.word	0x08006c65
 8006be4:	08006ca5 	.word	0x08006ca5
 8006be8:	08006e7b 	.word	0x08006e7b
 8006bec:	08006e7b 	.word	0x08006e7b
 8006bf0:	08006e1b 	.word	0x08006e1b
 8006bf4:	08006e47 	.word	0x08006e47
 8006bf8:	08006e7b 	.word	0x08006e7b
 8006bfc:	08006e7b 	.word	0x08006e7b
 8006c00:	08006e7b 	.word	0x08006e7b
 8006c04:	08006e7b 	.word	0x08006e7b
 8006c08:	08006e7b 	.word	0x08006e7b
 8006c0c:	08006e7b 	.word	0x08006e7b
 8006c10:	08006e7b 	.word	0x08006e7b
 8006c14:	08006c19 	.word	0x08006c19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	7c12      	ldrb	r2, [r2, #16]
 8006c30:	f107 0108 	add.w	r1, r7, #8
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
 8006c38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c3a:	e126      	b.n	8006e8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fb0e 	bl	8007260 <USBD_CtlError>
        err++;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	3301      	adds	r3, #1
 8006c48:	72fb      	strb	r3, [r7, #11]
      break;
 8006c4a:	e11e      	b.n	8006e8a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7c12      	ldrb	r2, [r2, #16]
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	60f8      	str	r0, [r7, #12]
      break;
 8006c62:	e112      	b.n	8006e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	7c1b      	ldrb	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10d      	bne.n	8006c88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f107 0208 	add.w	r2, r7, #8
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4798      	blx	r3
 8006c7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3301      	adds	r3, #1
 8006c82:	2202      	movs	r2, #2
 8006c84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c86:	e100      	b.n	8006e8a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	f107 0208 	add.w	r2, r7, #8
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	701a      	strb	r2, [r3, #0]
      break;
 8006ca2:	e0f2      	b.n	8006e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	885b      	ldrh	r3, [r3, #2]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	f200 80ac 	bhi.w	8006e08 <USBD_GetDescriptor+0x258>
 8006cb0:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <USBD_GetDescriptor+0x108>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006cd1 	.word	0x08006cd1
 8006cbc:	08006d05 	.word	0x08006d05
 8006cc0:	08006d39 	.word	0x08006d39
 8006cc4:	08006d6d 	.word	0x08006d6d
 8006cc8:	08006da1 	.word	0x08006da1
 8006ccc:	08006dd5 	.word	0x08006dd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	7c12      	ldrb	r2, [r2, #16]
 8006ce8:	f107 0108 	add.w	r1, r7, #8
 8006cec:	4610      	mov	r0, r2
 8006cee:	4798      	blx	r3
 8006cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf2:	e091      	b.n	8006e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fab2 	bl	8007260 <USBD_CtlError>
            err++;
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	72fb      	strb	r3, [r7, #11]
          break;
 8006d02:	e089      	b.n	8006e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	7c12      	ldrb	r2, [r2, #16]
 8006d1c:	f107 0108 	add.w	r1, r7, #8
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3
 8006d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d26:	e077      	b.n	8006e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa98 	bl	8007260 <USBD_CtlError>
            err++;
 8006d30:	7afb      	ldrb	r3, [r7, #11]
 8006d32:	3301      	adds	r3, #1
 8006d34:	72fb      	strb	r3, [r7, #11]
          break;
 8006d36:	e06f      	b.n	8006e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	7c12      	ldrb	r2, [r2, #16]
 8006d50:	f107 0108 	add.w	r1, r7, #8
 8006d54:	4610      	mov	r0, r2
 8006d56:	4798      	blx	r3
 8006d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5a:	e05d      	b.n	8006e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa7e 	bl	8007260 <USBD_CtlError>
            err++;
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	3301      	adds	r3, #1
 8006d68:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6a:	e055      	b.n	8006e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	7c12      	ldrb	r2, [r2, #16]
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
 8006d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d8e:	e043      	b.n	8006e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa64 	bl	8007260 <USBD_CtlError>
            err++;
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d9e:	e03b      	b.n	8006e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	f107 0108 	add.w	r1, r7, #8
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc2:	e029      	b.n	8006e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa4a 	bl	8007260 <USBD_CtlError>
            err++;
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd2:	e021      	b.n	8006e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7c12      	ldrb	r2, [r2, #16]
 8006dec:	f107 0108 	add.w	r1, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df6:	e00f      	b.n	8006e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa30 	bl	8007260 <USBD_CtlError>
            err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
          break;
 8006e06:	e007      	b.n	8006e18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa28 	bl	8007260 <USBD_CtlError>
          err++;
 8006e10:	7afb      	ldrb	r3, [r7, #11]
 8006e12:	3301      	adds	r3, #1
 8006e14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006e16:	bf00      	nop
      }
      break;
 8006e18:	e037      	b.n	8006e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7c1b      	ldrb	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	f107 0208 	add.w	r2, r7, #8
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4798      	blx	r3
 8006e32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e34:	e029      	b.n	8006e8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fa11 	bl	8007260 <USBD_CtlError>
        err++;
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	3301      	adds	r3, #1
 8006e42:	72fb      	strb	r3, [r7, #11]
      break;
 8006e44:	e021      	b.n	8006e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7c1b      	ldrb	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10d      	bne.n	8006e6a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f107 0208 	add.w	r2, r7, #8
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4798      	blx	r3
 8006e5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	2207      	movs	r2, #7
 8006e66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e68:	e00f      	b.n	8006e8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f9f7 	bl	8007260 <USBD_CtlError>
        err++;
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	3301      	adds	r3, #1
 8006e76:	72fb      	strb	r3, [r7, #11]
      break;
 8006e78:	e007      	b.n	8006e8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f9ef 	bl	8007260 <USBD_CtlError>
      err++;
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	3301      	adds	r3, #1
 8006e86:	72fb      	strb	r3, [r7, #11]
      break;
 8006e88:	bf00      	nop
  }

  if (err != 0U)
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d11e      	bne.n	8006ece <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	88db      	ldrh	r3, [r3, #6]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d016      	beq.n	8006ec6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006e98:	893b      	ldrh	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00e      	beq.n	8006ebc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88da      	ldrh	r2, [r3, #6]
 8006ea2:	893b      	ldrh	r3, [r7, #8]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bf28      	it	cs
 8006ea8:	4613      	movcs	r3, r2
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006eae:	893b      	ldrh	r3, [r7, #8]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa44 	bl	8007342 <USBD_CtlSendData>
 8006eba:	e009      	b.n	8006ed0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f9ce 	bl	8007260 <USBD_CtlError>
 8006ec4:	e004      	b.n	8006ed0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa95 	bl	80073f6 <USBD_CtlSendStatus>
 8006ecc:	e000      	b.n	8006ed0 <USBD_GetDescriptor+0x320>
    return;
 8006ece:	bf00      	nop
  }
}
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop

08006ed8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	889b      	ldrh	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d131      	bne.n	8006f4e <USBD_SetAddress+0x76>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d12d      	bne.n	8006f4e <USBD_SetAddress+0x76>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef8:	d829      	bhi.n	8006f4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d104      	bne.n	8006f1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9a3 	bl	8007260 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1a:	e01d      	b.n	8006f58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	7bfa      	ldrb	r2, [r7, #15]
 8006f20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 feb7 	bl	8007c9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa61 	bl	80073f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f42:	e009      	b.n	8006f58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4c:	e004      	b.n	8006f58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f985 	bl	8007260 <USBD_CtlError>
  }
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	885b      	ldrh	r3, [r3, #2]
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	4b4c      	ldr	r3, [pc, #304]	; (80070a8 <USBD_SetConfig+0x148>)
 8006f76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f78:	4b4b      	ldr	r3, [pc, #300]	; (80070a8 <USBD_SetConfig+0x148>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d905      	bls.n	8006f8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f96c 	bl	8007260 <USBD_CtlError>
    return USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e088      	b.n	800709e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d002      	beq.n	8006f9e <USBD_SetConfig+0x3e>
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d025      	beq.n	8006fe8 <USBD_SetConfig+0x88>
 8006f9c:	e071      	b.n	8007082 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f9e:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <USBD_SetConfig+0x148>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01c      	beq.n	8006fe0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006fa6:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <USBD_SetConfig+0x148>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fb0:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <USBD_SetConfig+0x148>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff f992 	bl	80062e0 <USBD_SetClassConfig>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f949 	bl	8007260 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fce:	e065      	b.n	800709c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa10 	bl	80073f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2203      	movs	r2, #3
 8006fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fde:	e05d      	b.n	800709c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa08 	bl	80073f6 <USBD_CtlSendStatus>
      break;
 8006fe6:	e059      	b.n	800709c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fe8:	4b2f      	ldr	r3, [pc, #188]	; (80070a8 <USBD_SetConfig+0x148>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d112      	bne.n	8007016 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <USBD_SetConfig+0x148>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007002:	4b29      	ldr	r3, [pc, #164]	; (80070a8 <USBD_SetConfig+0x148>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff f985 	bl	8006318 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f9f1 	bl	80073f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007014:	e042      	b.n	800709c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <USBD_SetConfig+0x148>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d02a      	beq.n	800707a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff f973 	bl	8006318 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <USBD_SetConfig+0x148>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <USBD_SetConfig+0x148>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff f94c 	bl	80062e0 <USBD_SetClassConfig>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00f      	beq.n	8007072 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f903 	bl	8007260 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff f958 	bl	8006318 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007070:	e014      	b.n	800709c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9bf 	bl	80073f6 <USBD_CtlSendStatus>
      break;
 8007078:	e010      	b.n	800709c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9bb 	bl	80073f6 <USBD_CtlSendStatus>
      break;
 8007080:	e00c      	b.n	800709c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f8eb 	bl	8007260 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <USBD_SetConfig+0x148>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff f941 	bl	8006318 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007096:	2303      	movs	r3, #3
 8007098:	73fb      	strb	r3, [r7, #15]
      break;
 800709a:	bf00      	nop
  }

  return ret;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200001b4 	.word	0x200001b4

080070ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d004      	beq.n	80070c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f8cd 	bl	8007260 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070c6:	e023      	b.n	8007110 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	dc02      	bgt.n	80070da <USBD_GetConfig+0x2e>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc03      	bgt.n	80070e0 <USBD_GetConfig+0x34>
 80070d8:	e015      	b.n	8007106 <USBD_GetConfig+0x5a>
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d00b      	beq.n	80070f6 <USBD_GetConfig+0x4a>
 80070de:	e012      	b.n	8007106 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3308      	adds	r3, #8
 80070ea:	2201      	movs	r2, #1
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f927 	bl	8007342 <USBD_CtlSendData>
        break;
 80070f4:	e00c      	b.n	8007110 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	2201      	movs	r2, #1
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f91f 	bl	8007342 <USBD_CtlSendData>
        break;
 8007104:	e004      	b.n	8007110 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8a9 	bl	8007260 <USBD_CtlError>
        break;
 800710e:	bf00      	nop
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007128:	b2db      	uxtb	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	2b02      	cmp	r3, #2
 800712e:	d81e      	bhi.n	800716e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	88db      	ldrh	r3, [r3, #6]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d004      	beq.n	8007142 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f890 	bl	8007260 <USBD_CtlError>
        break;
 8007140:	e01a      	b.n	8007178 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f043 0202 	orr.w	r2, r3, #2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	330c      	adds	r3, #12
 8007162:	2202      	movs	r2, #2
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f8eb 	bl	8007342 <USBD_CtlSendData>
      break;
 800716c:	e004      	b.n	8007178 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f875 	bl	8007260 <USBD_CtlError>
      break;
 8007176:	bf00      	nop
  }
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d106      	bne.n	80071a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f92b 	bl	80073f6 <USBD_CtlSendStatus>
  }
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d80b      	bhi.n	80071d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	885b      	ldrh	r3, [r3, #2]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d10c      	bne.n	80071e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f910 	bl	80073f6 <USBD_CtlSendStatus>
      }
      break;
 80071d6:	e004      	b.n	80071e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f840 	bl	8007260 <USBD_CtlError>
      break;
 80071e0:	e000      	b.n	80071e4 <USBD_ClrFeature+0x3c>
      break;
 80071e2:	bf00      	nop
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fa92 	bl	8006740 <SWAPBYTE>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fa85 	bl	8006740 <SWAPBYTE>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fa78 	bl	8006740 <SWAPBYTE>
 8007250:	4603      	mov	r3, r0
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	80da      	strh	r2, [r3, #6]
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fcab 	bl	8007bc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007272:	2100      	movs	r1, #0
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fca7 	bl	8007bc8 <USBD_LL_StallEP>
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d036      	beq.n	8007306 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800729c:	6938      	ldr	r0, [r7, #16]
 800729e:	f000 f836 	bl	800730e <USBD_GetLen>
 80072a2:	4603      	mov	r3, r0
 80072a4:	3301      	adds	r3, #1
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4413      	add	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	3301      	adds	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	4413      	add	r3, r2
 80072c8:	2203      	movs	r2, #3
 80072ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	3301      	adds	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072d2:	e013      	b.n	80072fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	7812      	ldrb	r2, [r2, #0]
 80072de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3301      	adds	r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
    idx++;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	3301      	adds	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	4413      	add	r3, r2
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	3301      	adds	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e7      	bne.n	80072d4 <USBD_GetString+0x52>
 8007304:	e000      	b.n	8007308 <USBD_GetString+0x86>
    return;
 8007306:	bf00      	nop
  }
}
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800731e:	e005      	b.n	800732c <USBD_GetLen+0x1e>
  {
    len++;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	3301      	adds	r3, #1
 8007324:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3301      	adds	r3, #1
 800732a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f5      	bne.n	8007320 <USBD_GetLen+0x12>
  }

  return len;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2202      	movs	r2, #2
 8007352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	2100      	movs	r1, #0
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fcb6 	bl	8007cda <USBD_LL_Transmit>

  return USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	2100      	movs	r1, #0
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 fca5 	bl	8007cda <USBD_LL_Transmit>

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2203      	movs	r2, #3
 80073aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	2100      	movs	r1, #0
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fca9 	bl	8007d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	2100      	movs	r1, #0
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fc98 	bl	8007d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2204      	movs	r2, #4
 8007402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007406:	2300      	movs	r3, #0
 8007408:	2200      	movs	r2, #0
 800740a:	2100      	movs	r1, #0
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fc64 	bl	8007cda <USBD_LL_Transmit>

  return USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2205      	movs	r2, #5
 8007428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800742c:	2300      	movs	r3, #0
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fc72 	bl	8007d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007448:	2200      	movs	r2, #0
 800744a:	4912      	ldr	r1, [pc, #72]	; (8007494 <MX_USB_Device_Init+0x50>)
 800744c:	4812      	ldr	r0, [pc, #72]	; (8007498 <MX_USB_Device_Init+0x54>)
 800744e:	f7fe fed9 	bl	8006204 <USBD_Init>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007458:	f7f9 f8fa 	bl	8000650 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800745c:	490f      	ldr	r1, [pc, #60]	; (800749c <MX_USB_Device_Init+0x58>)
 800745e:	480e      	ldr	r0, [pc, #56]	; (8007498 <MX_USB_Device_Init+0x54>)
 8007460:	f7fe ff00 	bl	8006264 <USBD_RegisterClass>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800746a:	f7f9 f8f1 	bl	8000650 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800746e:	490c      	ldr	r1, [pc, #48]	; (80074a0 <MX_USB_Device_Init+0x5c>)
 8007470:	4809      	ldr	r0, [pc, #36]	; (8007498 <MX_USB_Device_Init+0x54>)
 8007472:	f7fe fe21 	bl	80060b8 <USBD_CDC_RegisterInterface>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800747c:	f7f9 f8e8 	bl	8000650 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007480:	4805      	ldr	r0, [pc, #20]	; (8007498 <MX_USB_Device_Init+0x54>)
 8007482:	f7fe ff16 	bl	80062b2 <USBD_Start>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800748c:	f7f9 f8e0 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007490:	bf00      	nop
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000140 	.word	0x20000140
 8007498:	200001b8 	.word	0x200001b8
 800749c:	20000028 	.word	0x20000028
 80074a0:	2000012c 	.word	0x2000012c

080074a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074a8:	2200      	movs	r2, #0
 80074aa:	4905      	ldr	r1, [pc, #20]	; (80074c0 <CDC_Init_FS+0x1c>)
 80074ac:	4805      	ldr	r0, [pc, #20]	; (80074c4 <CDC_Init_FS+0x20>)
 80074ae:	f7fe fe18 	bl	80060e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074b2:	4905      	ldr	r1, [pc, #20]	; (80074c8 <CDC_Init_FS+0x24>)
 80074b4:	4803      	ldr	r0, [pc, #12]	; (80074c4 <CDC_Init_FS+0x20>)
 80074b6:	f7fe fe32 	bl	800611e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074bc:	4618      	mov	r0, r3
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000870 	.word	0x20000870
 80074c4:	200001b8 	.word	0x200001b8
 80074c8:	20000488 	.word	0x20000488

080074cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	6039      	str	r1, [r7, #0]
 80074e6:	71fb      	strb	r3, [r7, #7]
 80074e8:	4613      	mov	r3, r2
 80074ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b23      	cmp	r3, #35	; 0x23
 80074f0:	d84a      	bhi.n	8007588 <CDC_Control_FS+0xac>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <CDC_Control_FS+0x1c>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007589 	.word	0x08007589
 80074fc:	08007589 	.word	0x08007589
 8007500:	08007589 	.word	0x08007589
 8007504:	08007589 	.word	0x08007589
 8007508:	08007589 	.word	0x08007589
 800750c:	08007589 	.word	0x08007589
 8007510:	08007589 	.word	0x08007589
 8007514:	08007589 	.word	0x08007589
 8007518:	08007589 	.word	0x08007589
 800751c:	08007589 	.word	0x08007589
 8007520:	08007589 	.word	0x08007589
 8007524:	08007589 	.word	0x08007589
 8007528:	08007589 	.word	0x08007589
 800752c:	08007589 	.word	0x08007589
 8007530:	08007589 	.word	0x08007589
 8007534:	08007589 	.word	0x08007589
 8007538:	08007589 	.word	0x08007589
 800753c:	08007589 	.word	0x08007589
 8007540:	08007589 	.word	0x08007589
 8007544:	08007589 	.word	0x08007589
 8007548:	08007589 	.word	0x08007589
 800754c:	08007589 	.word	0x08007589
 8007550:	08007589 	.word	0x08007589
 8007554:	08007589 	.word	0x08007589
 8007558:	08007589 	.word	0x08007589
 800755c:	08007589 	.word	0x08007589
 8007560:	08007589 	.word	0x08007589
 8007564:	08007589 	.word	0x08007589
 8007568:	08007589 	.word	0x08007589
 800756c:	08007589 	.word	0x08007589
 8007570:	08007589 	.word	0x08007589
 8007574:	08007589 	.word	0x08007589
 8007578:	08007589 	.word	0x08007589
 800757c:	08007589 	.word	0x08007589
 8007580:	08007589 	.word	0x08007589
 8007584:	08007589 	.word	0x08007589
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007588:	bf00      	nop
  }

  return (USBD_OK);
 800758a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	480f      	ldr	r0, [pc, #60]	; (80075e4 <CDC_Receive_FS+0x4c>)
 80075a6:	f7fe fdba 	bl	800611e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075aa:	480e      	ldr	r0, [pc, #56]	; (80075e4 <CDC_Receive_FS+0x4c>)
 80075ac:	f7fe fe00 	bl	80061b0 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	73fb      	strb	r3, [r7, #15]
    memset(buffer,'\0',14);
 80075b6:	220e      	movs	r2, #14
 80075b8:	2100      	movs	r1, #0
 80075ba:	480b      	ldr	r0, [pc, #44]	; (80075e8 <CDC_Receive_FS+0x50>)
 80075bc:	f000 fc96 	bl	8007eec <memset>
    memcpy(buffer,Buf,len);
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4808      	ldr	r0, [pc, #32]	; (80075e8 <CDC_Receive_FS+0x50>)
 80075c8:	f000 fc82 	bl	8007ed0 <memcpy>
    memset(Buf,'\0',len);
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	461a      	mov	r2, r3
 80075d0:	2100      	movs	r1, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc8a 	bl	8007eec <memset>
  return (USBD_OK);
 80075d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200001b8 	.word	0x200001b8
 80075e8:	20000008 	.word	0x20000008

080075ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <CDC_Transmit_FS+0x48>)
 80075fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007602:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800760e:	2301      	movs	r3, #1
 8007610:	e00b      	b.n	800762a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	461a      	mov	r2, r3
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	4806      	ldr	r0, [pc, #24]	; (8007634 <CDC_Transmit_FS+0x48>)
 800761a:	f7fe fd62 	bl	80060e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800761e:	4805      	ldr	r0, [pc, #20]	; (8007634 <CDC_Transmit_FS+0x48>)
 8007620:	f7fe fd96 	bl	8006150 <USBD_CDC_TransmitPacket>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200001b8 	.word	0x200001b8

08007638 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800764a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800764e:	4618      	mov	r0, r3
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	6039      	str	r1, [r7, #0]
 8007666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2212      	movs	r2, #18
 800766c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800766e:	4b03      	ldr	r3, [pc, #12]	; (800767c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	20000160 	.word	0x20000160

08007680 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	6039      	str	r1, [r7, #0]
 800768a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2204      	movs	r2, #4
 8007690:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007692:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	20000174 	.word	0x20000174

080076a4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	6039      	str	r1, [r7, #0]
 80076ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4907      	ldr	r1, [pc, #28]	; (80076d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <USBD_CDC_ProductStrDescriptor+0x38>)
 80076bc:	f7ff fde1 	bl	8007282 <USBD_GetString>
 80076c0:	e004      	b.n	80076cc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	4904      	ldr	r1, [pc, #16]	; (80076d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80076c6:	4805      	ldr	r0, [pc, #20]	; (80076dc <USBD_CDC_ProductStrDescriptor+0x38>)
 80076c8:	f7ff fddb 	bl	8007282 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076cc:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000c58 	.word	0x20000c58
 80076dc:	08007f44 	.word	0x08007f44

080076e0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	4904      	ldr	r1, [pc, #16]	; (8007700 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80076f0:	4804      	ldr	r0, [pc, #16]	; (8007704 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80076f2:	f7ff fdc6 	bl	8007282 <USBD_GetString>
  return USBD_StrDesc;
 80076f6:	4b02      	ldr	r3, [pc, #8]	; (8007700 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000c58 	.word	0x20000c58
 8007704:	08007f5c 	.word	0x08007f5c

08007708 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	221a      	movs	r2, #26
 8007718:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800771a:	f000 f843 	bl	80077a4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800771e:	4b02      	ldr	r3, [pc, #8]	; (8007728 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000178 	.word	0x20000178

0800772c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	6039      	str	r1, [r7, #0]
 8007736:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	4907      	ldr	r1, [pc, #28]	; (8007760 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007742:	4808      	ldr	r0, [pc, #32]	; (8007764 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007744:	f7ff fd9d 	bl	8007282 <USBD_GetString>
 8007748:	e004      	b.n	8007754 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4904      	ldr	r1, [pc, #16]	; (8007760 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800774e:	4805      	ldr	r0, [pc, #20]	; (8007764 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007750:	f7ff fd97 	bl	8007282 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000c58 	.word	0x20000c58
 8007764:	08007f70 	.word	0x08007f70

08007768 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4907      	ldr	r1, [pc, #28]	; (800779c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800777e:	4808      	ldr	r0, [pc, #32]	; (80077a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007780:	f7ff fd7f 	bl	8007282 <USBD_GetString>
 8007784:	e004      	b.n	8007790 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4904      	ldr	r1, [pc, #16]	; (800779c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800778a:	4805      	ldr	r0, [pc, #20]	; (80077a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800778c:	f7ff fd79 	bl	8007282 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000c58 	.word	0x20000c58
 80077a0:	08007f7c 	.word	0x08007f7c

080077a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077aa:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <Get_SerialNum+0x44>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077b0:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <Get_SerialNum+0x48>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077b6:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <Get_SerialNum+0x4c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4413      	add	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077ca:	2208      	movs	r2, #8
 80077cc:	4909      	ldr	r1, [pc, #36]	; (80077f4 <Get_SerialNum+0x50>)
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f814 	bl	80077fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077d4:	2204      	movs	r2, #4
 80077d6:	4908      	ldr	r1, [pc, #32]	; (80077f8 <Get_SerialNum+0x54>)
 80077d8:	68b8      	ldr	r0, [r7, #8]
 80077da:	f000 f80f 	bl	80077fc <IntToUnicode>
  }
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	1fff7590 	.word	0x1fff7590
 80077ec:	1fff7594 	.word	0x1fff7594
 80077f0:	1fff7598 	.word	0x1fff7598
 80077f4:	2000017a 	.word	0x2000017a
 80077f8:	2000018a 	.word	0x2000018a

080077fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	4613      	mov	r3, r2
 8007808:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]
 8007812:	e027      	b.n	8007864 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	0f1b      	lsrs	r3, r3, #28
 8007818:	2b09      	cmp	r3, #9
 800781a:	d80b      	bhi.n	8007834 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	0f1b      	lsrs	r3, r3, #28
 8007820:	b2da      	uxtb	r2, r3
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	4619      	mov	r1, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	440b      	add	r3, r1
 800782c:	3230      	adds	r2, #48	; 0x30
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	e00a      	b.n	800784a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	0f1b      	lsrs	r3, r3, #28
 8007838:	b2da      	uxtb	r2, r3
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4619      	mov	r1, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	440b      	add	r3, r1
 8007844:	3237      	adds	r2, #55	; 0x37
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	3301      	adds	r3, #1
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	4413      	add	r3, r2
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	3301      	adds	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]
 8007864:	7dfa      	ldrb	r2, [r7, #23]
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	429a      	cmp	r2, r3
 800786a:	d3d3      	bcc.n	8007814 <IntToUnicode+0x18>
  }
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
	...

0800787c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b094      	sub	sp, #80	; 0x50
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	2244      	movs	r2, #68	; 0x44
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fb2d 	bl	8007eec <memset>
  if(pcdHandle->Instance==USB)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a15      	ldr	r2, [pc, #84]	; (80078ec <HAL_PCD_MspInit+0x70>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d122      	bne.n	80078e2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800789c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80078a2:	2300      	movs	r3, #0
 80078a4:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80078a6:	f107 030c 	add.w	r3, r7, #12
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fa fd4a 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80078b6:	f7f8 fecb 	bl	8000650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80078ba:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <HAL_PCD_MspInit+0x74>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <HAL_PCD_MspInit+0x74>)
 80078c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078c4:	6593      	str	r3, [r2, #88]	; 0x58
 80078c6:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <HAL_PCD_MspInit+0x74>)
 80078c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	2014      	movs	r0, #20
 80078d8:	f7f8 ffd7 	bl	800088a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80078dc:	2014      	movs	r0, #20
 80078de:	f7f8 ffee 	bl	80008be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80078e2:	bf00      	nop
 80078e4:	3750      	adds	r7, #80	; 0x50
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40005c00 	.word	0x40005c00
 80078f0:	40021000 	.word	0x40021000

080078f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f7fe fd1c 	bl	8006348 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	440b      	add	r3, r1
 8007938:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	4619      	mov	r1, r3
 8007942:	f7fe fd56 	bl	80063f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	440b      	add	r3, r1
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	4619      	mov	r1, r3
 8007976:	f7fe fd9f 	bl	80064b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe feb3 	bl	80066fc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079a6:	2301      	movs	r3, #1
 80079a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	795b      	ldrb	r3, [r3, #5]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d001      	beq.n	80079b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079b2:	f7f8 fe4d 	bl	8000650 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80079bc:	7bfa      	ldrb	r2, [r7, #15]
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fe5d 	bl	8006680 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fe09 	bl	80065e4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fe58 	bl	80066a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7a5b      	ldrb	r3, [r3, #9]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <HAL_PCD_SuspendCallback+0x30>)
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	4a03      	ldr	r2, [pc, #12]	; (8007a0c <HAL_PCD_SuspendCallback+0x30>)
 80079fe:	f043 0306 	orr.w	r3, r3, #6
 8007a02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	e000ed00 	.word	0xe000ed00

08007a10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	7a5b      	ldrb	r3, [r3, #9]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <HAL_PCD_ResumeCallback+0x34>)
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	4a07      	ldr	r2, [pc, #28]	; (8007a44 <HAL_PCD_ResumeCallback+0x34>)
 8007a26:	f023 0306 	bic.w	r3, r3, #6
 8007a2a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007a2c:	f000 f9f8 	bl	8007e20 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fe48 	bl	80066cc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	e000ed00 	.word	0xe000ed00

08007a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007a50:	4a2b      	ldr	r2, [pc, #172]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a29      	ldr	r2, [pc, #164]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007a60:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a62:	4a28      	ldr	r2, [pc, #160]	; (8007b04 <USBD_LL_Init+0xbc>)
 8007a64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a66:	4b26      	ldr	r3, [pc, #152]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a68:	2208      	movs	r2, #8
 8007a6a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a6c:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a6e:	2202      	movs	r2, #2
 8007a70:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a72:	4b23      	ldr	r3, [pc, #140]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a74:	2202      	movs	r2, #2
 8007a76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007a78:	4b21      	ldr	r3, [pc, #132]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a7e:	4b20      	ldr	r3, [pc, #128]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a84:	4b1e      	ldr	r3, [pc, #120]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a90:	481b      	ldr	r0, [pc, #108]	; (8007b00 <USBD_LL_Init+0xb8>)
 8007a92:	f7f8 ff22 	bl	80008da <HAL_PCD_Init>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007a9c:	f7f8 fdd8 	bl	8000650 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007aa6:	2318      	movs	r3, #24
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	f7fa fbdc 	bl	8002268 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ab6:	2358      	movs	r3, #88	; 0x58
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2180      	movs	r1, #128	; 0x80
 8007abc:	f7fa fbd4 	bl	8002268 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ac6:	23c0      	movs	r3, #192	; 0xc0
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2181      	movs	r1, #129	; 0x81
 8007acc:	f7fa fbcc 	bl	8002268 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ad6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007ada:	2200      	movs	r2, #0
 8007adc:	2101      	movs	r1, #1
 8007ade:	f7fa fbc3 	bl	8002268 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aec:	2200      	movs	r2, #0
 8007aee:	2182      	movs	r1, #130	; 0x82
 8007af0:	f7fa fbba 	bl	8002268 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000e58 	.word	0x20000e58
 8007b04:	40005c00 	.word	0x40005c00

08007b08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7f8 ffa9 	bl	8000a76 <HAL_PCD_Start>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f980 	bl	8007e30 <USBD_Get_USB_Status>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	4608      	mov	r0, r1
 8007b48:	4611      	mov	r1, r2
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	70fb      	strb	r3, [r7, #3]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70bb      	strb	r3, [r7, #2]
 8007b54:	4613      	mov	r3, r2
 8007b56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b66:	78bb      	ldrb	r3, [r7, #2]
 8007b68:	883a      	ldrh	r2, [r7, #0]
 8007b6a:	78f9      	ldrb	r1, [r7, #3]
 8007b6c:	f7f9 f8f0 	bl	8000d50 <HAL_PCD_EP_Open>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f95a 	bl	8007e30 <USBD_Get_USB_Status>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7f9 f92e 	bl	8000e0a <HAL_PCD_EP_Close>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f93b 	bl	8007e30 <USBD_Get_USB_Status>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7f9 f9d7 	bl	8000f9a <HAL_PCD_EP_SetStall>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 f91c 	bl	8007e30 <USBD_Get_USB_Status>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	4611      	mov	r1, r2
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7f9 fa0a 	bl	800103e <HAL_PCD_EP_ClrStall>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 f8fd 	bl	8007e30 <USBD_Get_USB_Status>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da0b      	bge.n	8007c78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	440b      	add	r3, r1
 8007c72:	3312      	adds	r3, #18
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	e00b      	b.n	8007c90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	440b      	add	r3, r1
 8007c8a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8007c8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7f9 f824 	bl	8000d08 <HAL_PCD_SetAddress>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 f8b2 	bl	8007e30 <USBD_Get_USB_Status>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b086      	sub	sp, #24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007cf8:	7af9      	ldrb	r1, [r7, #11]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f7f9 f915 	bl	8000f2c <HAL_PCD_EP_Transmit>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f891 	bl	8007e30 <USBD_Get_USB_Status>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	607a      	str	r2, [r7, #4]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d3a:	7af9      	ldrb	r1, [r7, #11]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	f7f9 f8ab 	bl	8000e9a <HAL_PCD_EP_Receive>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f870 	bl	8007e30 <USBD_Get_USB_Status>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d54:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7f9 f8c1 	bl	8000efc <HAL_PCD_EP_GetRxCount>
 8007d7a:	4603      	mov	r3, r0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_PCDEx_LPM_Callback+0x18>
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d013      	beq.n	8007dc2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007d9a:	e023      	b.n	8007de4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7a5b      	ldrb	r3, [r3, #9]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007da4:	f000 f83c 	bl	8007e20 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007da8:	4b10      	ldr	r3, [pc, #64]	; (8007dec <HAL_PCDEx_LPM_Callback+0x68>)
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	4a0f      	ldr	r2, [pc, #60]	; (8007dec <HAL_PCDEx_LPM_Callback+0x68>)
 8007dae:	f023 0306 	bic.w	r3, r3, #6
 8007db2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fc86 	bl	80066cc <USBD_LL_Resume>
    break;
 8007dc0:	e010      	b.n	8007de4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fc69 	bl	80066a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7a5b      	ldrb	r3, [r3, #9]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_PCDEx_LPM_Callback+0x68>)
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	4a04      	ldr	r2, [pc, #16]	; (8007dec <HAL_PCDEx_LPM_Callback+0x68>)
 8007ddc:	f043 0306 	orr.w	r3, r3, #6
 8007de0:	6113      	str	r3, [r2, #16]
    break;
 8007de2:	bf00      	nop
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	e000ed00 	.word	0xe000ed00

08007df0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <USBD_static_malloc+0x18>)
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20001134 	.word	0x20001134

08007e0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d817      	bhi.n	8007e74 <USBD_Get_USB_Status+0x44>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBD_Get_USB_Status+0x1c>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e63 	.word	0x08007e63
 8007e54:	08007e69 	.word	0x08007e69
 8007e58:	08007e6f 	.word	0x08007e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e60:	e00b      	b.n	8007e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
    break;
 8007e66:	e008      	b.n	8007e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6c:	e005      	b.n	8007e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	73fb      	strb	r3, [r7, #15]
    break;
 8007e72:	e002      	b.n	8007e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	73fb      	strb	r3, [r7, #15]
    break;
 8007e78:	bf00      	nop
  }
  return usb_status;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <__libc_init_array>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	4d0d      	ldr	r5, [pc, #52]	; (8007ec0 <__libc_init_array+0x38>)
 8007e8c:	4c0d      	ldr	r4, [pc, #52]	; (8007ec4 <__libc_init_array+0x3c>)
 8007e8e:	1b64      	subs	r4, r4, r5
 8007e90:	10a4      	asrs	r4, r4, #2
 8007e92:	2600      	movs	r6, #0
 8007e94:	42a6      	cmp	r6, r4
 8007e96:	d109      	bne.n	8007eac <__libc_init_array+0x24>
 8007e98:	4d0b      	ldr	r5, [pc, #44]	; (8007ec8 <__libc_init_array+0x40>)
 8007e9a:	4c0c      	ldr	r4, [pc, #48]	; (8007ecc <__libc_init_array+0x44>)
 8007e9c:	f000 f82e 	bl	8007efc <_init>
 8007ea0:	1b64      	subs	r4, r4, r5
 8007ea2:	10a4      	asrs	r4, r4, #2
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	42a6      	cmp	r6, r4
 8007ea8:	d105      	bne.n	8007eb6 <__libc_init_array+0x2e>
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb0:	4798      	blx	r3
 8007eb2:	3601      	adds	r6, #1
 8007eb4:	e7ee      	b.n	8007e94 <__libc_init_array+0xc>
 8007eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eba:	4798      	blx	r3
 8007ebc:	3601      	adds	r6, #1
 8007ebe:	e7f2      	b.n	8007ea6 <__libc_init_array+0x1e>
 8007ec0:	08007f8c 	.word	0x08007f8c
 8007ec4:	08007f8c 	.word	0x08007f8c
 8007ec8:	08007f8c 	.word	0x08007f8c
 8007ecc:	08007f90 	.word	0x08007f90

08007ed0 <memcpy>:
 8007ed0:	440a      	add	r2, r1
 8007ed2:	4291      	cmp	r1, r2
 8007ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ed8:	d100      	bne.n	8007edc <memcpy+0xc>
 8007eda:	4770      	bx	lr
 8007edc:	b510      	push	{r4, lr}
 8007ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ee6:	4291      	cmp	r1, r2
 8007ee8:	d1f9      	bne.n	8007ede <memcpy+0xe>
 8007eea:	bd10      	pop	{r4, pc}

08007eec <memset>:
 8007eec:	4402      	add	r2, r0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d100      	bne.n	8007ef6 <memset+0xa>
 8007ef4:	4770      	bx	lr
 8007ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8007efa:	e7f9      	b.n	8007ef0 <memset+0x4>

08007efc <_init>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr

08007f08 <_fini>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	bf00      	nop
 8007f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0e:	bc08      	pop	{r3}
 8007f10:	469e      	mov	lr, r3
 8007f12:	4770      	bx	lr
