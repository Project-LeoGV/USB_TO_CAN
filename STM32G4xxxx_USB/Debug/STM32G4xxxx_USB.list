
STM32G4xxxx_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009218  08009218  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009220  08009220  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000184  080093ac  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013d8  080093ac  000213d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162ae  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003427  00000000  00000000  00036462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00039890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  0003a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe30  00000000  00000000  0003b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cef  00000000  00000000  0005b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb529  00000000  00000000  000711e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  0012c760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009168 	.word	0x08009168

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009168 	.word	0x08009168

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fa2c 	bl	800097e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f86b 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f8f7 	bl	800071c <MX_GPIO_Init>
  MX_USB_Device_Init();
 800052e:	f008 f8e5 	bl	80086fc <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f8a7 	bl	8000684 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t txBuffer[8] = "SendDat\n";
 8000536:	4a2e      	ldr	r2, [pc, #184]	; (80005f0 <main+0xd4>)
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000540:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t rxBuffer[8] = "Receive\n";
 8000544:	4a2b      	ldr	r2, [pc, #172]	; (80005f4 <main+0xd8>)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800054c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t last = 'S';
 8000550:	2353      	movs	r3, #83	; 0x53
 8000552:	75fb      	strb	r3, [r7, #23]
	  //CDC_Transmit_FS(txBuffer, 8);
	  //HAL_Delay(500);
	  //CDC_Transmit_FS(rxBuffer, 8);
	  //HAL_Delay(500);

	  CDC_Receive_FS(rxBuffer, (uint32_t *)8);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2108      	movs	r1, #8
 8000558:	4618      	mov	r0, r3
 800055a:	f008 f979 	bl	8008850 <CDC_Receive_FS>

	  if(rxBuffer[0] == 'o' || rxBuffer[0] == 'O'){
 800055e:	793b      	ldrb	r3, [r7, #4]
 8000560:	2b6f      	cmp	r3, #111	; 0x6f
 8000562:	d002      	beq.n	800056a <main+0x4e>
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	2b4f      	cmp	r3, #79	; 0x4f
 8000568:	d106      	bne.n	8000578 <main+0x5c>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, 1);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4821      	ldr	r0, [pc, #132]	; (80005f8 <main+0xdc>)
 8000572:	f000 fd29 	bl	8000fc8 <HAL_GPIO_WritePin>
 8000576:	e00b      	b.n	8000590 <main+0x74>
	  }
	  else if(rxBuffer[0] == 'f' || rxBuffer[0] == 'F'){
 8000578:	793b      	ldrb	r3, [r7, #4]
 800057a:	2b66      	cmp	r3, #102	; 0x66
 800057c:	d002      	beq.n	8000584 <main+0x68>
 800057e:	793b      	ldrb	r3, [r7, #4]
 8000580:	2b46      	cmp	r3, #70	; 0x46
 8000582:	d105      	bne.n	8000590 <main+0x74>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	481b      	ldr	r0, [pc, #108]	; (80005f8 <main+0xdc>)
 800058c:	f000 fd1c 	bl	8000fc8 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(500);
 8000590:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000594:	f000 fa64 	bl	8000a60 <HAL_Delay>
	  for(uint8_t i = 0; i < 7; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	75bb      	strb	r3, [r7, #22]
 800059c:	e00c      	b.n	80005b8 <main+0x9c>
		  txBuffer[i] = rxBuffer[i];
 800059e:	7dba      	ldrb	r2, [r7, #22]
 80005a0:	7dbb      	ldrb	r3, [r7, #22]
 80005a2:	3218      	adds	r2, #24
 80005a4:	443a      	add	r2, r7
 80005a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80005aa:	3318      	adds	r3, #24
 80005ac:	443b      	add	r3, r7
 80005ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  for(uint8_t i = 0; i < 7; i++)
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	3301      	adds	r3, #1
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2b06      	cmp	r3, #6
 80005bc:	d9ef      	bls.n	800059e <main+0x82>
	  if(txBuffer[0] != last)
 80005be:	7b3b      	ldrb	r3, [r7, #12]
 80005c0:	7dfa      	ldrb	r2, [r7, #23]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d005      	beq.n	80005d2 <main+0xb6>
		  CDC_Transmit_FS(txBuffer, 8);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2108      	movs	r1, #8
 80005cc:	4618      	mov	r0, r3
 80005ce:	f008 f953 	bl	8008878 <CDC_Transmit_FS>
	  last = txBuffer[0];
 80005d2:	7b3b      	ldrb	r3, [r7, #12]
 80005d4:	75fb      	strb	r3, [r7, #23]
	  HAL_UART_Transmit(&huart1, txBuffer, 8, 5000);
 80005d6:	f107 010c 	add.w	r1, r7, #12
 80005da:	f241 3388 	movw	r3, #5000	; 0x1388
 80005de:	2208      	movs	r2, #8
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <main+0xe0>)
 80005e2:	f003 fa4f 	bl	8003a84 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f000 fa39 	bl	8000a60 <HAL_Delay>
	  CDC_Receive_FS(rxBuffer, (uint32_t *)8);
 80005ee:	e7b1      	b.n	8000554 <main+0x38>
 80005f0:	08009180 	.word	0x08009180
 80005f4:	08009188 	.word	0x08009188
 80005f8:	48000800 	.word	0x48000800
 80005fc:	200001a0 	.word	0x200001a0

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2238      	movs	r2, #56	; 0x38
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f008 fda2 	bl	8009158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000626:	f002 fa1b 	bl	8002a60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800062a:	2322      	movs	r3, #34	; 0x22
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2340      	movs	r3, #64	; 0x40
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4618      	mov	r0, r3
 8000646:	f002 faaf 	bl	8002ba8 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000650:	f000 f8a4 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2301      	movs	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fdad 	bl	80031cc <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000678:	f000 f890 	bl	800079c <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_USART1_UART_Init+0x90>)
 800068a:	4a23      	ldr	r2, [pc, #140]	; (8000718 <MX_USART1_UART_Init+0x94>)
 800068c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_USART1_UART_Init+0x90>)
 8000690:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_USART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_USART1_UART_Init+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006ce:	f003 f989 	bl	80039e4 <HAL_UART_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006d8:	f000 f860 	bl	800079c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006e0:	f003 ff82 	bl	80045e8 <HAL_UARTEx_SetTxFifoThreshold>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006ea:	f000 f857 	bl	800079c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006f2:	f003 ffb7 	bl	8004664 <HAL_UARTEx_SetRxFifoThreshold>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006fc:	f000 f84e 	bl	800079c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_USART1_UART_Init+0x90>)
 8000702:	f003 ff38 	bl	8004576 <HAL_UARTEx_DisableFifoMode>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800070c:	f000 f846 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001a0 	.word	0x200001a0
 8000718:	40013800 	.word	0x40013800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_GPIO_Init+0x78>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_GPIO_Init+0x78>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_GPIO_Init+0x78>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_GPIO_Init+0x78>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <MX_GPIO_Init+0x78>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_GPIO_Init+0x78>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <MX_GPIO_Init+0x7c>)
 800076a:	f000 fc2d 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0x7c>)
 8000788:	f000 fa9c 	bl	8000cc4 <HAL_GPIO_Init>

}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	48000800 	.word	0x48000800

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09a      	sub	sp, #104	; 0x68
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2244      	movs	r2, #68	; 0x44
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f008 fca1 	bl	8009158 <memset>
  if(huart->Instance==USART1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <HAL_UART_MspInit+0xa8>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d137      	bne.n	8000890 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fee9 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000838:	f7ff ffb0 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_UART_MspInit+0xac>)
 800083e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <HAL_UART_MspInit+0xac>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000846:	6613      	str	r3, [r2, #96]	; 0x60
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_UART_MspInit+0xac>)
 800084a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_MspInit+0xac>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_UART_MspInit+0xac>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_UART_MspInit+0xac>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800086c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800087e:	2307      	movs	r3, #7
 8000880:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fa1a 	bl	8000cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3768      	adds	r7, #104	; 0x68
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013800 	.word	0x40013800
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f89a 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USB_LP_IRQHandler+0x10>)
 80008fa:	f000 fc6d 	bl	80011d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000edc 	.word	0x20000edc

08000908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f008 fbd9 	bl	8009110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095e:	f7ff fddd 	bl	800051c <main>

08000962 <LoopForever>:

LoopForever:
    b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000970:	08009228 	.word	0x08009228
  ldr r2, =_sbss
 8000974:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000978:	200013d8 	.word	0x200013d8

0800097c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_2_IRQHandler>

0800097e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f95b 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f80e 	bl	80009b0 <HAL_InitTick>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	e001      	b.n	80009a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a0:	f7ff ff02 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a4:	79fb      	ldrb	r3, [r7, #7]

}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_InitTick+0x68>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d022      	beq.n	8000a0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_InitTick+0x6c>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_InitTick+0x68>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f966 	bl	8000caa <HAL_SYSTICK_Config>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10f      	bne.n	8000a04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b0f      	cmp	r3, #15
 80009e8:	d809      	bhi.n	80009fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ea:	2200      	movs	r2, #0
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	f04f 30ff 	mov.w	r0, #4294967295
 80009f2:	f000 f932 	bl	8000c5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_InitTick+0x70>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e007      	b.n	8000a0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e004      	b.n	8000a0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	e001      	b.n	8000a0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a34:	6013      	str	r3, [r2, #0]
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	20000234 	.word	0x20000234
 8000a44:	20000008 	.word	0x20000008

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000234 	.word	0x20000234

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d004      	beq.n	8000a84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_Delay+0x40>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a84:	bf00      	nop
 8000a86:	f7ff ffdf 	bl	8000a48 <HAL_GetTick>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d8f7      	bhi.n	8000a86 <HAL_Delay+0x26>
  {
  }
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff29 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff40 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff90 	bl	8000b98 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5f 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff33 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ffa4 	bl	8000c00 <SysTick_Config>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cd2:	e15a      	b.n	8000f8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 814c 	beq.w	8000f84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d005      	beq.n	8000d04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	f003 0201 	and.w	r2, r3, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d017      	beq.n	8000da2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d123      	bne.n	8000df6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	6939      	ldr	r1, [r7, #16]
 8000df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0203 	and.w	r2, r3, #3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 80a6 	beq.w	8000f84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <HAL_GPIO_Init+0x2e4>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3c:	4a5a      	ldr	r2, [pc, #360]	; (8000fa8 <HAL_GPIO_Init+0x2e4>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6613      	str	r3, [r2, #96]	; 0x60
 8000e44:	4b58      	ldr	r3, [pc, #352]	; (8000fa8 <HAL_GPIO_Init+0x2e4>)
 8000e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e50:	4a56      	ldr	r2, [pc, #344]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e7a:	d01f      	beq.n	8000ebc <HAL_GPIO_Init+0x1f8>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_GPIO_Init+0x2ec>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d019      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f4>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_GPIO_Init+0x2f0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d013      	beq.n	8000eb4 <HAL_GPIO_Init+0x1f0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_GPIO_Init+0x2f4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d00d      	beq.n	8000eb0 <HAL_GPIO_Init+0x1ec>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_GPIO_Init+0x2f8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d007      	beq.n	8000eac <HAL_GPIO_Init+0x1e8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2fc>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <HAL_GPIO_Init+0x1e4>
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	e00a      	b.n	8000ebe <HAL_GPIO_Init+0x1fa>
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	e008      	b.n	8000ebe <HAL_GPIO_Init+0x1fa>
 8000eac:	2304      	movs	r3, #4
 8000eae:	e006      	b.n	8000ebe <HAL_GPIO_Init+0x1fa>
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e004      	b.n	8000ebe <HAL_GPIO_Init+0x1fa>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e002      	b.n	8000ebe <HAL_GPIO_Init+0x1fa>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <HAL_GPIO_Init+0x1fa>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	f002 0203 	and.w	r2, r2, #3
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	4093      	lsls	r3, r2
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ece:	4937      	ldr	r1, [pc, #220]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f00:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f2a:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f47f ae9d 	bne.w	8000cd4 <HAL_GPIO_Init+0x10>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	48000c00 	.word	0x48000c00
 8000fbc:	48001000 	.word	0x48001000
 8000fc0:	48001400 	.word	0x48001400
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0c0      	b.n	800118c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d106      	bne.n	8001024 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f007 fd72 	bl	8008b08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2203      	movs	r2, #3
 8001028:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f003 fbba 	bl	80047aa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e03e      	b.n	80010ba <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	3311      	adds	r3, #17
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3310      	adds	r3, #16
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	3313      	adds	r3, #19
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	3320      	adds	r3, #32
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3324      	adds	r3, #36	; 0x24
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	3301      	adds	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3bb      	bcc.n	800103c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e044      	b.n	8001154 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	f203 1351 	addw	r3, r3, #337	; 0x151
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	440b      	add	r3, r1
 8001146:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	3301      	adds	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3b5      	bcc.n	80010ca <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3304      	adds	r3, #4
 8001166:	e893 0006 	ldmia.w	r3, {r1, r2}
 800116a:	f003 fb39 	bl	80047e0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7a9b      	ldrb	r3, [r3, #10]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d102      	bne.n	800118a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f001 fc41 	bl	8002a0c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_PCD_Start+0x16>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e012      	b.n	80011d0 <HAL_PCD_Start+0x3c>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fae0 	bl	800477c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fda0 	bl	8006d06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f005 fda5 	bl	8006d34 <USB_ReadInterrupts>
 80011ea:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fb04 	bl	8001804 <PCD_EP_ISR_Handler>

    return;
 80011fc:	e110      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800121a:	b292      	uxth	r2, r2
 800121c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f007 fd02 	bl	8008c2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001226:	2100      	movs	r1, #0
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f8fc 	bl	8001426 <HAL_PCD_SetAddress>

    return;
 800122e:	e0f7      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00c      	beq.n	8001254 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800124c:	b292      	uxth	r2, r2
 800124e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001252:	e0e5      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001266:	b29a      	uxth	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001270:	b292      	uxth	r2, r2
 8001272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001276:	e0d3      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d034      	beq.n	80012ec <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0204 	bic.w	r2, r2, #4
 8001294:	b292      	uxth	r2, r2
 8001296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0208 	bic.w	r2, r2, #8
 80012ac:	b292      	uxth	r2, r2
 80012ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d107      	bne.n	80012cc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f007 fea2 	bl	8009010 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f007 fce5 	bl	8008c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012e4:	b292      	uxth	r2, r2
 80012e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012ea:	e099      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d027      	beq.n	8001346 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012fe:	b29a      	uxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0208 	orr.w	r2, r2, #8
 8001308:	b292      	uxth	r2, r2
 800130a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001316:	b29a      	uxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001320:	b292      	uxth	r2, r2
 8001322:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800132e:	b29a      	uxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0204 	orr.w	r2, r2, #4
 8001338:	b292      	uxth	r2, r2
 800133a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f007 fc92 	bl	8008c68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001344:	e06c      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134c:	2b00      	cmp	r3, #0
 800134e:	d040      	beq.n	80013d2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001362:	b292      	uxth	r2, r2
 8001364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d12b      	bne.n	80013ca <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0204 	orr.w	r2, r2, #4
 8001384:	b292      	uxth	r2, r2
 8001386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0208 	orr.w	r2, r2, #8
 800139c:	b292      	uxth	r2, r2
 800139e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013c0:	2101      	movs	r1, #1
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f007 fe24 	bl	8009010 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80013c8:	e02a      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f007 fc4c 	bl	8008c68 <HAL_PCD_SuspendCallback>
    return;
 80013d0:	e026      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00f      	beq.n	80013fc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013ee:	b292      	uxth	r2, r2
 80013f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f007 fc0a 	bl	8008c0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013fa:	e011      	b.n	8001420 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001418:	b292      	uxth	r2, r2
 800141a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800141e:	bf00      	nop
  }
}
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_PCD_SetAddress+0x1a>
 800143c:	2302      	movs	r3, #2
 800143e:	e012      	b.n	8001466 <HAL_PCD_SetAddress+0x40>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	78fa      	ldrb	r2, [r7, #3]
 800144c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f005 fc41 	bl	8006cde <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	4608      	mov	r0, r1
 8001478:	4611      	mov	r1, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4603      	mov	r3, r0
 800147e:	70fb      	strb	r3, [r7, #3]
 8001480:	460b      	mov	r3, r1
 8001482:	803b      	strh	r3, [r7, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800148c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da0e      	bge.n	80014b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	f003 0207 	and.w	r2, r3, #7
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3310      	adds	r3, #16
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	705a      	strb	r2, [r3, #1]
 80014b0:	e00e      	b.n	80014d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 0207 	and.w	r2, r3, #7
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014dc:	883a      	ldrh	r2, [r7, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	78ba      	ldrb	r2, [r7, #2]
 80014e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014e8:	78bb      	ldrb	r3, [r7, #2]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d102      	bne.n	80014f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_PCD_EP_Open+0x94>
 80014fe:	2302      	movs	r3, #2
 8001500:	e00e      	b.n	8001520 <HAL_PCD_EP_Open+0xb2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 f983 	bl	800481c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800151e:	7afb      	ldrb	r3, [r7, #11]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001538:	2b00      	cmp	r3, #0
 800153a:	da0e      	bge.n	800155a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	f003 0207 	and.w	r2, r3, #7
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	3310      	adds	r3, #16
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	705a      	strb	r2, [r3, #1]
 8001558:	e00e      	b.n	8001578 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	f003 0207 	and.w	r2, r3, #7
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	b2da      	uxtb	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_PCD_EP_Close+0x6a>
 800158e:	2302      	movs	r3, #2
 8001590:	e00e      	b.n	80015b0 <HAL_PCD_EP_Close+0x88>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68f9      	ldr	r1, [r7, #12]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fcff 	bl	8004fa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	460b      	mov	r3, r1
 80015c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	f003 0207 	and.w	r2, r3, #7
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2200      	movs	r2, #0
 80015f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6979      	ldr	r1, [r7, #20]
 800160a:	4618      	mov	r0, r3
 800160c:	f003 feb7 	bl	800537e <USB_EPStartXfer>

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 0207 	and.w	r2, r3, #7
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800163c:	681b      	ldr	r3, [r3, #0]
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	460b      	mov	r3, r1
 8001658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800165a:	7afb      	ldrb	r3, [r7, #11]
 800165c:	f003 0207 	and.w	r2, r3, #7
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	3310      	adds	r3, #16
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2201      	movs	r2, #1
 8001694:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	b2da      	uxtb	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6979      	ldr	r1, [r7, #20]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fe68 	bl	800537e <USB_EPStartXfer>

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	7912      	ldrb	r2, [r2, #4]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e03e      	b.n	8001754 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da0e      	bge.n	80016fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f003 0207 	and.w	r2, r3, #7
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	3310      	adds	r3, #16
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	705a      	strb	r2, [r3, #1]
 80016fa:	e00c      	b.n	8001716 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	b2da      	uxtb	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_PCD_EP_SetStall+0x7e>
 8001732:	2302      	movs	r3, #2
 8001734:	e00e      	b.n	8001754 <HAL_PCD_EP_SetStall+0x9c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	4618      	mov	r0, r3
 8001746:	f005 f9cb 	bl	8006ae0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	7912      	ldrb	r2, [r2, #4]
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e040      	b.n	80017fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800177a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800177e:	2b00      	cmp	r3, #0
 8001780:	da0e      	bge.n	80017a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 0207 	and.w	r2, r3, #7
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	3310      	adds	r3, #16
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	705a      	strb	r2, [r3, #1]
 800179e:	e00e      	b.n	80017be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	f003 0207 	and.w	r2, r3, #7
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_PCD_EP_ClrStall+0x82>
 80017da:	2302      	movs	r3, #2
 80017dc:	e00e      	b.n	80017fc <HAL_PCD_EP_ClrStall+0xa0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 f9c8 	bl	8006b82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b096      	sub	sp, #88	; 0x58
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800180c:	e3ae      	b.n	8001f6c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001816:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800181a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001828:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 8170 	bne.w	8001b12 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d14d      	bne.n	80018da <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184e:	81fb      	strh	r3, [r7, #14]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800185a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800185e:	b29b      	uxth	r3, r3
 8001860:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3310      	adds	r3, #16
 8001866:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001870:	b29b      	uxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4413      	add	r3, r2
 8001882:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	441a      	add	r2, r3
 800189a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800189e:	2100      	movs	r1, #0
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f007 f99a 	bl	8008bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7b1b      	ldrb	r3, [r3, #12]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 835d 	beq.w	8001f6c <PCD_EP_ISR_Handler+0x768>
 80018b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 8358 	bne.w	8001f6c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b292      	uxth	r2, r2
 80018ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	731a      	strb	r2, [r3, #12]
 80018d8:	e348      	b.n	8001f6c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d032      	beq.n	800195e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001900:	b29b      	uxth	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4413      	add	r3, r2
 8001912:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800192e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001930:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001932:	b29b      	uxth	r3, r3
 8001934:	f005 fa50 	bl	8006dd8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001944:	4013      	ands	r3, r2
 8001946:	823b      	strh	r3, [r7, #16]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	8a3a      	ldrh	r2, [r7, #16]
 800194e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001952:	b292      	uxth	r2, r2
 8001954:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f007 f912 	bl	8008b80 <HAL_PCD_SetupStageCallback>
 800195c:	e306      	b.n	8001f6c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800195e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001962:	2b00      	cmp	r3, #0
 8001964:	f280 8302 	bge.w	8001f6c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29a      	uxth	r2, r3
 8001970:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001974:	4013      	ands	r3, r2
 8001976:	83fb      	strh	r3, [r7, #30]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	8bfa      	ldrh	r2, [r7, #30]
 800197e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001982:	b292      	uxth	r2, r2
 8001984:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <PCD_EP_ISR_Handler+0x1e6>
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d015      	beq.n	80019ea <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c4:	6959      	ldr	r1, [r3, #20]
 80019c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f005 fa02 	bl	8006dd8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	441a      	add	r2, r3
 80019de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019e2:	2100      	movs	r1, #0
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f007 f8dd 	bl	8008ba4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 82b5 	bne.w	8001f6c <PCD_EP_ISR_Handler+0x768>
 8001a02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a0e:	f000 82ad 	beq.w	8001f6c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4413      	add	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b3e      	cmp	r3, #62	; 0x3e
 8001a48:	d91d      	bls.n	8001a86 <PCD_EP_ISR_Handler+0x282>
 8001a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	647b      	str	r3, [r7, #68]	; 0x44
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <PCD_EP_ISR_Handler+0x260>
 8001a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a60:	3b01      	subs	r3, #1
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	801a      	strh	r2, [r3, #0]
 8001a84:	e026      	b.n	8001ad4 <PCD_EP_ISR_Handler+0x2d0>
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <PCD_EP_ISR_Handler+0x2a0>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	e017      	b.n	8001ad4 <PCD_EP_ISR_Handler+0x2d0>
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8001aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <PCD_EP_ISR_Handler+0x2ba>
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aba:	3301      	adds	r3, #1
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	029b      	lsls	r3, r3, #10
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae4:	827b      	strh	r3, [r7, #18]
 8001ae6:	8a7b      	ldrh	r3, [r7, #18]
 8001ae8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001aec:	827b      	strh	r3, [r7, #18]
 8001aee:	8a7b      	ldrh	r3, [r7, #18]
 8001af0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001af4:	827b      	strh	r3, [r7, #18]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	8a7b      	ldrh	r3, [r7, #18]
 8001afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	8013      	strh	r3, [r2, #0]
 8001b10:	e22c      	b.n	8001f6c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b26:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f280 80f6 	bge.w	8001d1c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b46:	4013      	ands	r3, r2
 8001b48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b62:	b292      	uxth	r2, r2
 8001b64:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b66:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	7b1b      	ldrb	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d123      	bne.n	8001bcc <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001bac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 808e 	beq.w	8001cd2 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbc:	6959      	ldr	r1, [r3, #20]
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	88da      	ldrh	r2, [r3, #6]
 8001bc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc6:	f005 f907 	bl	8006dd8 <USB_ReadPMA>
 8001bca:	e082      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d10a      	bne.n	8001bea <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f9d3 	bl	8001f88 <HAL_PCD_EP_DB_Receive>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001be8:	e073      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c04:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	441a      	add	r2, r3
 8001c16:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d022      	beq.n	8001c8e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d02c      	beq.n	8001cd2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	6959      	ldr	r1, [r3, #20]
 8001c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c82:	891a      	ldrh	r2, [r3, #8]
 8001c84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c88:	f005 f8a6 	bl	8006dd8 <USB_ReadPMA>
 8001c8c:	e021      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc4:	6959      	ldr	r1, [r3, #20]
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc8:	895a      	ldrh	r2, [r3, #10]
 8001cca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cce:	f005 f883 	bl	8006dd8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cda:	441a      	add	r2, r3
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ce8:	441a      	add	r2, r3
 8001cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <PCD_EP_ISR_Handler+0x4fe>
 8001cf6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d206      	bcs.n	8001d10 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f006 ff4b 	bl	8008ba4 <HAL_PCD_DataOutStageCallback>
 8001d0e:	e005      	b.n	8001d1c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fb31 	bl	800537e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8121 	beq.w	8001f6c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d2a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	3310      	adds	r3, #16
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7c:	78db      	ldrb	r3, [r3, #3]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 80a2 	bne.w	8001ec8 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8c:	7b1b      	ldrb	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8093 	beq.w	8001eba <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d046      	beq.n	8001e2e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d126      	bne.n	8001df6 <PCD_EP_ISR_Handler+0x5f2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	4413      	add	r3, r2
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	00da      	lsls	r2, r3, #3
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	4413      	add	r3, r2
 8001dca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	e061      	b.n	8001eba <PCD_EP_ISR_Handler+0x6b6>
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d15d      	bne.n	8001eba <PCD_EP_ISR_Handler+0x6b6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	4413      	add	r3, r2
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	00da      	lsls	r2, r3, #3
 8001e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1e:	4413      	add	r3, r2
 8001e20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	e045      	b.n	8001eba <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	785b      	ldrb	r3, [r3, #1]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d126      	bne.n	8001e8a <PCD_EP_ISR_Handler+0x686>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	4413      	add	r3, r2
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	00da      	lsls	r2, r3, #3
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	801a      	strh	r2, [r3, #0]
 8001e88:	e017      	b.n	8001eba <PCD_EP_ISR_Handler+0x6b6>
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d113      	bne.n	8001eba <PCD_EP_ISR_Handler+0x6b6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea0:	4413      	add	r3, r2
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	00da      	lsls	r2, r3, #3
 8001eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eac:	4413      	add	r3, r2
 8001eae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f006 fe8a 	bl	8008bda <HAL_PCD_DataInStageCallback>
 8001ec6:	e051      	b.n	8001f6c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ec8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d144      	bne.n	8001f5e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d907      	bls.n	8001f18 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f10:	1ad2      	subs	r2, r2, r3
 8001f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f14:	619a      	str	r2, [r3, #24]
 8001f16:	e002      	b.n	8001f1e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f006 fe54 	bl	8008bda <HAL_PCD_DataInStageCallback>
 8001f32:	e01b      	b.n	8001f6c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f3c:	441a      	add	r2, r3
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f44:	69da      	ldr	r2, [r3, #28]
 8001f46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f4a:	441a      	add	r2, r3
 8001f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fa11 	bl	800537e <USB_EPStartXfer>
 8001f5c:	e006      	b.n	8001f6c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f62:	461a      	mov	r2, r3
 8001f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f917 	bl	800219a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f6ff ac48 	blt.w	800180e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3758      	adds	r7, #88	; 0x58
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d07c      	beq.n	800209a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	8b7b      	ldrh	r3, [r7, #26]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d306      	bcc.n	8001fde <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	8b7b      	ldrh	r3, [r7, #26]
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	e002      	b.n	8001fe4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d123      	bne.n	8002034 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	833b      	strh	r3, [r7, #24]
 8002008:	8b3b      	ldrh	r3, [r7, #24]
 800200a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800200e:	833b      	strh	r3, [r7, #24]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	441a      	add	r2, r3
 800201e:	8b3b      	ldrh	r3, [r7, #24]
 8002020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	b29b      	uxth	r3, r3
 8002032:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01f      	beq.n	800207e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002058:	82fb      	strh	r3, [r7, #22]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	441a      	add	r2, r3
 8002068:	8afb      	ldrh	r3, [r7, #22]
 800206a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800206e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800207a:	b29b      	uxth	r3, r3
 800207c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800207e:	8b7b      	ldrh	r3, [r7, #26]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8085 	beq.w	8002190 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6959      	ldr	r1, [r3, #20]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	891a      	ldrh	r2, [r3, #8]
 8002092:	8b7b      	ldrh	r3, [r7, #26]
 8002094:	f004 fea0 	bl	8006dd8 <USB_ReadPMA>
 8002098:	e07a      	b.n	8002190 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	8b7b      	ldrh	r3, [r7, #26]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d306      	bcc.n	80020d8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	1ad2      	subs	r2, r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	619a      	str	r2, [r3, #24]
 80020d6:	e002      	b.n	80020de <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d123      	bne.n	800212e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002100:	83fb      	strh	r3, [r7, #30]
 8002102:	8bfb      	ldrh	r3, [r7, #30]
 8002104:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002108:	83fb      	strh	r3, [r7, #30]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	441a      	add	r2, r3
 8002118:	8bfb      	ldrh	r3, [r7, #30]
 800211a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800211e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212a:	b29b      	uxth	r3, r3
 800212c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11f      	bne.n	8002178 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	83bb      	strh	r3, [r7, #28]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	441a      	add	r2, r3
 8002162:	8bbb      	ldrh	r3, [r7, #28]
 8002164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002174:	b29b      	uxth	r3, r3
 8002176:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002178:	8b7b      	ldrh	r3, [r7, #26]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6959      	ldr	r1, [r3, #20]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	895a      	ldrh	r2, [r3, #10]
 800218a:	8b7b      	ldrh	r3, [r7, #26]
 800218c:	f004 fe24 	bl	8006dd8 <USB_ReadPMA>
    }
  }

  return count;
 8002190:	8b7b      	ldrh	r3, [r7, #26]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b0a4      	sub	sp, #144	; 0x90
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	4613      	mov	r3, r2
 80021a6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 81db 	beq.w	800256a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d907      	bls.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021f0:	1ad2      	subs	r2, r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	619a      	str	r2, [r3, #24]
 80021f6:	e002      	b.n	80021fe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 80b9 	bne.w	800237a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d126      	bne.n	800225e <HAL_PCD_EP_DB_Transmit+0xc4>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	4413      	add	r3, r2
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	00da      	lsls	r2, r3, #3
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	4413      	add	r3, r2
 8002232:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002242:	b29a      	uxth	r2, r3
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002256:	b29a      	uxth	r2, r3
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	e01a      	b.n	8002294 <HAL_PCD_EP_DB_Transmit+0xfa>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d116      	bne.n	8002294 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227a:	4413      	add	r3, r2
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	00da      	lsls	r2, r3, #3
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	4413      	add	r3, r2
 8002288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	2200      	movs	r2, #0
 8002292:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d126      	bne.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x156>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	00da      	lsls	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	e017      	b.n	8002320 <HAL_PCD_EP_DB_Transmit+0x186>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d113      	bne.n	8002320 <HAL_PCD_EP_DB_Transmit+0x186>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	4413      	add	r3, r2
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	00da      	lsls	r2, r3, #3
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	4413      	add	r3, r2
 8002314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f006 fc57 	bl	8008bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 82fa 	beq.w	800292c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	82fb      	strh	r3, [r7, #22]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	441a      	add	r2, r3
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002374:	b29b      	uxth	r3, r3
 8002376:	8013      	strh	r3, [r2, #0]
 8002378:	e2d8      	b.n	800292c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d021      	beq.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	441a      	add	r2, r3
 80023b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80023b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	f040 82ac 	bne.w	800292c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023dc:	441a      	add	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023ea:	441a      	add	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d30b      	bcc.n	8002414 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240c:	1ad2      	subs	r2, r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	621a      	str	r2, [r3, #32]
 8002412:	e017      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d108      	bne.n	800242e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800241c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800242c:	e00a      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d165      	bne.n	8002518 <HAL_PCD_EP_DB_Transmit+0x37e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	4413      	add	r3, r2
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	00da      	lsls	r2, r3, #3
 800246a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246c:	4413      	add	r3, r2
 800246e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247e:	b29a      	uxth	r2, r3
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	801a      	strh	r2, [r3, #0]
 8002484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002488:	2b3e      	cmp	r3, #62	; 0x3e
 800248a:	d91d      	bls.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x32e>
 800248c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	64bb      	str	r3, [r7, #72]	; 0x48
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x30c>
 80024a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a2:	3b01      	subs	r3, #1
 80024a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	029b      	lsls	r3, r3, #10
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	e044      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80024c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x34c>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024de:	b29a      	uxth	r2, r3
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	e035      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80024e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_PCD_EP_DB_Transmit+0x366>
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	3301      	adds	r3, #1
 80024fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29a      	uxth	r2, r3
 8002506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002508:	b29b      	uxth	r3, r3
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	b29b      	uxth	r3, r3
 800250e:	4313      	orrs	r3, r2
 8002510:	b29a      	uxth	r2, r3
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	e01c      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d118      	bne.n	8002552 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	647b      	str	r3, [r7, #68]	; 0x44
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002534:	4413      	add	r3, r2
 8002536:	647b      	str	r3, [r7, #68]	; 0x44
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	00da      	lsls	r2, r3, #3
 800253e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002540:	4413      	add	r3, r2
 8002542:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002546:	643b      	str	r3, [r7, #64]	; 0x40
 8002548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254c:	b29a      	uxth	r2, r3
 800254e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002550:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	6959      	ldr	r1, [r3, #20]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	891a      	ldrh	r2, [r3, #8]
 800255e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002562:	b29b      	uxth	r3, r3
 8002564:	f004 fbf6 	bl	8006d54 <USB_WritePMA>
 8002568:	e1e0      	b.n	800292c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800259a:	429a      	cmp	r2, r3
 800259c:	d307      	bcc.n	80025ae <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e002      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 80c0 	bne.w	800273e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d126      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0x47a>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025da:	4413      	add	r3, r2
 80025dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	00da      	lsls	r2, r3, #3
 80025e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025e6:	4413      	add	r3, r2
 80025e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260c:	b29a      	uxth	r2, r3
 800260e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e01a      	b.n	800264a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	785b      	ldrb	r3, [r3, #1]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d116      	bne.n	800264a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	667b      	str	r3, [r7, #100]	; 0x64
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002630:	4413      	add	r3, r2
 8002632:	667b      	str	r3, [r7, #100]	; 0x64
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	00da      	lsls	r2, r3, #3
 800263a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800263c:	4413      	add	r3, r2
 800263e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002642:	663b      	str	r3, [r7, #96]	; 0x60
 8002644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002646:	2200      	movs	r2, #0
 8002648:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	677b      	str	r3, [r7, #116]	; 0x74
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d12b      	bne.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x516>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266c:	4413      	add	r3, r2
 800266e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00da      	lsls	r2, r3, #3
 8002676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002678:	4413      	add	r3, r2
 800267a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800267e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268e:	b29a      	uxth	r2, r3
 8002690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ac:	801a      	strh	r2, [r3, #0]
 80026ae:	e017      	b.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x546>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d113      	bne.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x546>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c6:	4413      	add	r3, r2
 80026c8:	677b      	str	r3, [r7, #116]	; 0x74
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	00da      	lsls	r2, r3, #3
 80026d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d2:	4413      	add	r3, r2
 80026d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026d8:	673b      	str	r3, [r7, #112]	; 0x70
 80026da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026dc:	2200      	movs	r2, #0
 80026de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f006 fa77 	bl	8008bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 811a 	bne.w	800292c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	441a      	add	r2, r3
 8002724:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002738:	b29b      	uxth	r3, r3
 800273a:	8013      	strh	r3, [r2, #0]
 800273c:	e0f6      	b.n	800292c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d121      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	441a      	add	r2, r3
 8002774:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 80ca 	bne.w	800292c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027a0:	441a      	add	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ae:	441a      	add	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d30b      	bcc.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6a1a      	ldr	r2, [r3, #32]
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	1ad2      	subs	r2, r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	621a      	str	r2, [r3, #32]
 80027d6:	e017      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d108      	bne.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80027e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027f0:	e00a      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	657b      	str	r3, [r7, #84]	; 0x54
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d165      	bne.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x748>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282a:	4413      	add	r3, r2
 800282c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	00da      	lsls	r2, r3, #3
 8002834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002836:	4413      	add	r3, r2
 8002838:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800283c:	65bb      	str	r3, [r7, #88]	; 0x58
 800283e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	b29a      	uxth	r2, r3
 800284a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002852:	2b3e      	cmp	r3, #62	; 0x3e
 8002854:	d91d      	bls.n	8002892 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	66bb      	str	r3, [r7, #104]	; 0x68
 800285e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286c:	3b01      	subs	r3, #1
 800286e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29a      	uxth	r2, r3
 8002876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002878:	b29b      	uxth	r3, r3
 800287a:	029b      	lsls	r3, r3, #10
 800287c:	b29b      	uxth	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b29b      	uxth	r3, r3
 8002882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800288a:	b29a      	uxth	r2, r3
 800288c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e041      	b.n	8002916 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x716>
 800289a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	e032      	b.n	8002916 <HAL_PCD_EP_DB_Transmit+0x77c>
 80028b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_PCD_EP_DB_Transmit+0x730>
 80028c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c6:	3301      	adds	r3, #1
 80028c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	029b      	lsls	r3, r3, #10
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b29a      	uxth	r2, r3
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	e019      	b.n	8002916 <HAL_PCD_EP_DB_Transmit+0x77c>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d115      	bne.n	8002916 <HAL_PCD_EP_DB_Transmit+0x77c>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	4413      	add	r3, r2
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	00da      	lsls	r2, r3, #3
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	4413      	add	r3, r2
 8002906:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800290a:	653b      	str	r3, [r7, #80]	; 0x50
 800290c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002910:	b29a      	uxth	r2, r3
 8002912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002914:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	6959      	ldr	r1, [r3, #20]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	895a      	ldrh	r2, [r3, #10]
 8002922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002926:	b29b      	uxth	r3, r3
 8002928:	f004 fa14 	bl	8006d54 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002946:	82bb      	strh	r3, [r7, #20]
 8002948:	8abb      	ldrh	r3, [r7, #20]
 800294a:	f083 0310 	eor.w	r3, r3, #16
 800294e:	82bb      	strh	r3, [r7, #20]
 8002950:	8abb      	ldrh	r3, [r7, #20]
 8002952:	f083 0320 	eor.w	r3, r3, #32
 8002956:	82bb      	strh	r3, [r7, #20]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	8abb      	ldrh	r3, [r7, #20]
 8002968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3790      	adds	r7, #144	; 0x90
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	817b      	strh	r3, [r7, #10]
 8002994:	4613      	mov	r3, r2
 8002996:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002998:	897b      	ldrh	r3, [r7, #10]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	f003 0207 	and.w	r2, r3, #7
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	3310      	adds	r3, #16
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e009      	b.n	80029d0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029bc:	897a      	ldrh	r2, [r7, #10]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	80da      	strh	r2, [r3, #6]
 80029e4:	e00b      	b.n	80029fe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2201      	movs	r2, #1
 80029ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d141      	bne.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a6e:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d131      	bne.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a7c:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	4a46      	ldr	r2, [pc, #280]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a94:	4a41      	ldr	r2, [pc, #260]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a9c:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2232      	movs	r2, #50	; 0x32
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	4a3f      	ldr	r2, [pc, #252]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	0c9b      	lsrs	r3, r3, #18
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab2:	e002      	b.n	8002aba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d102      	bne.n	8002ace <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f2      	bne.n	8002ab4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d158      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e057      	b.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae6:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002af0:	e04d      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af8:	d141      	bne.n	8002b7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b06:	d131      	bne.n	8002b6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b0e:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2232      	movs	r2, #50	; 0x32
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	0c9b      	lsrs	r3, r3, #18
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3e:	e002      	b.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b52:	d102      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f2      	bne.n	8002b40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d112      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e011      	b.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b7c:	e007      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e2fe      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d075      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc6:	4b97      	ldr	r3, [pc, #604]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3e>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_OscConfig+0x44>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d10b      	bne.n	8002c04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	4b8d      	ldr	r3, [pc, #564]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d05b      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x108>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d157      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e2d9      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCC_OscConfig+0x74>
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a84      	ldr	r2, [pc, #528]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xb0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7b      	ldr	r2, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xb0>
 8002c40:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a77      	ldr	r2, [pc, #476]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a74      	ldr	r2, [pc, #464]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fd fef2 	bl	8000a48 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fd feee 	bl	8000a48 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e29e      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xc0>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fd fede 	bl	8000a48 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fd feda 	bl	8000a48 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e28a      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca2:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0xe8>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d075      	beq.n	8002daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cbe:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc8:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b0c      	cmp	r3, #12
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_OscConfig+0x136>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x13c>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d11f      	bne.n	8002d24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x154>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e25d      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	4946      	ldr	r1, [pc, #280]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d10:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fe4b 	bl	80009b0 <HAL_InitTick>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d043      	beq.n	8002da8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e249      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3c      	ldr	r2, [pc, #240]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fd fe86 	bl	8000a48 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fd fe82 	bl	8000a48 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e232      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	492d      	ldr	r1, [pc, #180]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
 8002d72:	e01a      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d74:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fd fe62 	bl	8000a48 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fd fe5e 	bl	8000a48 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e20e      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1e0>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d041      	beq.n	8002e3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01c      	beq.n	8002df8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fd fe3b 	bl	8000a48 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fd fe37 	bl	8000a48 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1e7      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ef      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x22e>
 8002df6:	e020      	b.n	8002e3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fd fe1e 	bl	8000a48 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0e:	e00d      	b.n	8002e2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fd fe1a 	bl	8000a48 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d906      	bls.n	8002e2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e1ca      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e2c:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ea      	bne.n	8002e10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80a6 	beq.w	8002f94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e4c:	4b84      	ldr	r3, [pc, #528]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2b4>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x2b6>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	4a7e      	ldr	r2, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6e:	4b7c      	ldr	r3, [pc, #496]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4b79      	ldr	r3, [pc, #484]	; (8003064 <HAL_RCC_OscConfig+0x4bc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x4bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x4bc>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fd fdd7 	bl	8000a48 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fd fdd3 	bl	8000a48 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e183      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	4b6c      	ldr	r3, [pc, #432]	; (8003064 <HAL_RCC_OscConfig+0x4bc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d108      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x32e>
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed4:	e024      	b.n	8002f20 <HAL_RCC_OscConfig+0x378>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d110      	bne.n	8002f00 <HAL_RCC_OscConfig+0x358>
 8002ede:	4b60      	ldr	r3, [pc, #384]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	4a5e      	ldr	r2, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eee:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efe:	e00f      	b.n	8002f20 <HAL_RCC_OscConfig+0x378>
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	4a56      	ldr	r2, [pc, #344]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f10:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	4a52      	ldr	r2, [pc, #328]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d016      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fd fd8e 	bl	8000a48 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fd fd8a 	bl	8000a48 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e138      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f46:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ed      	beq.n	8002f30 <HAL_RCC_OscConfig+0x388>
 8002f54:	e015      	b.n	8002f82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fd fd77 	bl	8000a48 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fd fd73 	bl	8000a48 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e121      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f74:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ed      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	4a34      	ldr	r2, [pc, #208]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03c      	beq.n	800301a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fae:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fd fd46 	bl	8000a48 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc0:	f7fd fd42 	bl	8000a48 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0f2      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x418>
 8002fe0:	e01b      	b.n	800301a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fd29 	bl	8000a48 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ffa:	f7fd fd25 	bl	8000a48 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0d5      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ef      	bne.n	8002ffa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80c9 	beq.w	80031b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b0c      	cmp	r3, #12
 800302e:	f000 8083 	beq.w	8003138 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d15e      	bne.n	80030f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <HAL_RCC_OscConfig+0x4b8>)
 8003040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fd fcff 	bl	8000a48 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	e00c      	b.n	8003068 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fd fcfb 	bl	8000a48 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d905      	bls.n	8003068 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0ab      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003068:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ec      	bne.n	800304e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003074:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	4b52      	ldr	r3, [pc, #328]	; (80031c4 <HAL_RCC_OscConfig+0x61c>)
 800307a:	4013      	ands	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6a11      	ldr	r1, [r2, #32]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003084:	3a01      	subs	r2, #1
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800308e:	0212      	lsls	r2, r2, #8
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003096:	0852      	lsrs	r2, r2, #1
 8003098:	3a01      	subs	r2, #1
 800309a:	0552      	lsls	r2, r2, #21
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a2:	0852      	lsrs	r2, r2, #1
 80030a4:	3a01      	subs	r2, #1
 80030a6:	0652      	lsls	r2, r2, #25
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030ae:	06d2      	lsls	r2, r2, #27
 80030b0:	430a      	orrs	r2, r1
 80030b2:	4943      	ldr	r1, [pc, #268]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c4:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fd fcba 	bl	8000a48 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fd fcb6 	bl	8000a48 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e066      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x530>
 80030f6:	e05e      	b.n	80031b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 80030fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fd fca0 	bl	8000a48 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fd fc9c 	bl	8000a48 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04c      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311e:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	4924      	ldr	r1, [pc, #144]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_RCC_OscConfig+0x620>)
 8003132:	4013      	ands	r3, r2
 8003134:	60cb      	str	r3, [r1, #12]
 8003136:	e03e      	b.n	80031b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e039      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <HAL_RCC_OscConfig+0x618>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	429a      	cmp	r2, r3
 8003156:	d12c      	bne.n	80031b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d123      	bne.n	80031b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d11b      	bne.n	80031b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d113      	bne.n	80031b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	3b01      	subs	r3, #1
 8003198:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	019f800c 	.word	0x019f800c
 80031c8:	feeefffc 	.word	0xfeeefffc

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e11e      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b8e      	ldr	r3, [pc, #568]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 020f 	bic.w	r2, r3, #15
 80031fa:	498c      	ldr	r1, [pc, #560]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b8a      	ldr	r3, [pc, #552]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e106      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d073      	beq.n	8003308 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d129      	bne.n	800327c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003228:	4b81      	ldr	r3, [pc, #516]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0f4      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003238:	f000 f99e 	bl	8003578 <RCC_GetSysClockFreqFromPLLSource>
 800323c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4a7c      	ldr	r2, [pc, #496]	; (8003434 <HAL_RCC_ClockConfig+0x268>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d93f      	bls.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003246:	4b7a      	ldr	r3, [pc, #488]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d033      	beq.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003262:	2b00      	cmp	r3, #0
 8003264:	d12f      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003266:	4b72      	ldr	r3, [pc, #456]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326e:	4a70      	ldr	r2, [pc, #448]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e024      	b.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d107      	bne.n	8003294 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003284:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0c6      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003294:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0be      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032a4:	f000 f8ce 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4a61      	ldr	r2, [pc, #388]	; (8003434 <HAL_RCC_ClockConfig+0x268>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d909      	bls.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ba:	4a5d      	ldr	r2, [pc, #372]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c6:	4b5a      	ldr	r3, [pc, #360]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 0203 	bic.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4957      	ldr	r1, [pc, #348]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd fbb6 	bl	8000a48 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7fd fbb2 	bl	8000a48 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e095      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 020c 	and.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	429a      	cmp	r2, r3
 8003306:	d1eb      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d023      	beq.n	800335c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a42      	ldr	r2, [pc, #264]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800332a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003338:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003340:	4a3b      	ldr	r2, [pc, #236]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003346:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4936      	ldr	r1, [pc, #216]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
 800335a:	e008      	b.n	800336e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d105      	bne.n	800336e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003362:	4b33      	ldr	r3, [pc, #204]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4a32      	ldr	r2, [pc, #200]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800336e:	4b2f      	ldr	r3, [pc, #188]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d21d      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 020f 	bic.w	r2, r3, #15
 8003384:	4929      	ldr	r1, [pc, #164]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800338c:	f7fd fb5c 	bl	8000a48 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fd fb58 	bl	8000a48 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e03b      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1ed      	bne.n	8003394 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4917      	ldr	r1, [pc, #92]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490f      	ldr	r1, [pc, #60]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f6:	f000 f825 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490c      	ldr	r1, [pc, #48]	; (8003438 <HAL_RCC_ClockConfig+0x26c>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd fac8 	bl	80009b0 <HAL_InitTick>
 8003420:	4603      	mov	r3, r0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40022000 	.word	0x40022000
 8003430:	40021000 	.word	0x40021000
 8003434:	04c4b400 	.word	0x04c4b400
 8003438:	080091d8 	.word	0x080091d8
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d102      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e047      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d102      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e03e      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d136      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3301      	adds	r3, #1
 8003490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d10c      	bne.n	80034b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003498:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	4a16      	ldr	r2, [pc, #88]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a2:	68d2      	ldr	r2, [r2, #12]
 80034a4:	0a12      	lsrs	r2, r2, #8
 80034a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	617b      	str	r3, [r7, #20]
      break;
 80034b0:	e00c      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	0a12      	lsrs	r2, r2, #8
 80034c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
      break;
 80034ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0e5b      	lsrs	r3, r3, #25
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e001      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034ec:	693b      	ldr	r3, [r7, #16]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	00f42400 	.word	0x00f42400
 8003504:	007a1200 	.word	0x007a1200

08003508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_RCC_GetHCLKFreq+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000000 	.word	0x20000000

08003520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003524:	f7ff fff0 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4904      	ldr	r1, [pc, #16]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	080091e8 	.word	0x080091e8

0800354c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003550:	f7ff ffda 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0adb      	lsrs	r3, r3, #11
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4904      	ldr	r1, [pc, #16]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	080091e8 	.word	0x080091e8

08003578 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d10c      	bne.n	80035b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035a6:	68d2      	ldr	r2, [r2, #12]
 80035a8:	0a12      	lsrs	r2, r2, #8
 80035aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
    break;
 80035b4:	e00c      	b.n	80035d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	0a12      	lsrs	r2, r2, #8
 80035c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
    break;
 80035ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0e5b      	lsrs	r3, r3, #25
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035ea:	687b      	ldr	r3, [r7, #4]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40021000 	.word	0x40021000
 80035fc:	007a1200 	.word	0x007a1200
 8003600:	00f42400 	.word	0x00f42400

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800360c:	2300      	movs	r3, #0
 800360e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003610:	2300      	movs	r3, #0
 8003612:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8098 	beq.w	8003752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003626:	4b43      	ldr	r3, [pc, #268]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10d      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	4b40      	ldr	r3, [pc, #256]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	4a3f      	ldr	r2, [pc, #252]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6593      	str	r3, [r2, #88]	; 0x58
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364a:	2301      	movs	r3, #1
 800364c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364e:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a39      	ldr	r2, [pc, #228]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800365a:	f7fd f9f5 	bl	8000a48 <HAL_GetTick>
 800365e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003660:	e009      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fd f9f1 	bl	8000a48 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d902      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	74fb      	strb	r3, [r7, #19]
        break;
 8003674:	e005      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003676:	4b30      	ldr	r3, [pc, #192]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ef      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d159      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01e      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d019      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036a4:	4b23      	ldr	r3, [pc, #140]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036b0:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036c0:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d016      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fd f9b1 	bl	8000a48 <HAL_GetTick>
 80036e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e8:	e00b      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fd f9ad 	bl	8000a48 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d902      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ec      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4903      	ldr	r1, [pc, #12]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800372c:	e008      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	74bb      	strb	r3, [r7, #18]
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003740:	7c7b      	ldrb	r3, [r7, #17]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4ba6      	ldr	r3, [pc, #664]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	4aa5      	ldr	r2, [pc, #660]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003750:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375e:	4ba0      	ldr	r3, [pc, #640]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f023 0203 	bic.w	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	499c      	ldr	r1, [pc, #624]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003780:	4b97      	ldr	r3, [pc, #604]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 020c 	bic.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4994      	ldr	r1, [pc, #592]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a2:	4b8f      	ldr	r3, [pc, #572]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	498b      	ldr	r1, [pc, #556]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c4:	4b86      	ldr	r3, [pc, #536]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4983      	ldr	r1, [pc, #524]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e6:	4b7e      	ldr	r3, [pc, #504]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	497a      	ldr	r1, [pc, #488]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003808:	4b75      	ldr	r3, [pc, #468]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	4972      	ldr	r1, [pc, #456]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800382a:	4b6d      	ldr	r3, [pc, #436]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4969      	ldr	r1, [pc, #420]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800384c:	4b64      	ldr	r3, [pc, #400]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4961      	ldr	r1, [pc, #388]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386e:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	4958      	ldr	r1, [pc, #352]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003890:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	4950      	ldr	r1, [pc, #320]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ae:	d105      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b0:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c8:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	4942      	ldr	r1, [pc, #264]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e6:	d105      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e8:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a3c      	ldr	r2, [pc, #240]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003900:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4934      	ldr	r1, [pc, #208]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003920:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800392a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003938:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	4926      	ldr	r1, [pc, #152]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003956:	d105      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003962:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	4918      	ldr	r1, [pc, #96]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398e:	d105      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	490a      	ldr	r1, [pc, #40]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c6:	d105      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e042      	b.n	8003a7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7fc fef1 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2224      	movs	r2, #36	; 0x24
 8003a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fb82 	bl	8004138 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f8b3 	bl	8003ba0 <UART_SetConfig>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e01b      	b.n	8003a7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fc01 	bl	800427c <UART_CheckIdleState>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d17b      	bne.n	8003b96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_UART_Transmit+0x26>
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e074      	b.n	8003b98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2221      	movs	r2, #33	; 0x21
 8003aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003abe:	f7fc ffc3 	bl	8000a48 <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003adc:	d108      	bne.n	8003af0 <HAL_UART_Transmit+0x6c>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e003      	b.n	8003af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af8:	e030      	b.n	8003b5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2180      	movs	r1, #128	; 0x80
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fc63 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e03d      	b.n	8003b98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3302      	adds	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e007      	b.n	8003b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1c8      	bne.n	8003afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fc2c 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e006      	b.n	8003b98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b08c      	sub	sp, #48	; 0x30
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4bab      	ldr	r3, [pc, #684]	; (8003e7c <UART_SetConfig+0x2dc>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4aa0      	ldr	r2, [pc, #640]	; (8003e80 <UART_SetConfig+0x2e0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f023 010f 	bic.w	r1, r3, #15
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a91      	ldr	r2, [pc, #580]	; (8003e84 <UART_SetConfig+0x2e4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d125      	bne.n	8003c90 <UART_SetConfig+0xf0>
 8003c44:	4b90      	ldr	r3, [pc, #576]	; (8003e88 <UART_SetConfig+0x2e8>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d81a      	bhi.n	8003c88 <UART_SetConfig+0xe8>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0xb8>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c79 	.word	0x08003c79
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e0d6      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003c70:	2302      	movs	r3, #2
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e0d2      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e0ce      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003c80:	2308      	movs	r3, #8
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e0ca      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e0c6      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7d      	ldr	r2, [pc, #500]	; (8003e8c <UART_SetConfig+0x2ec>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d138      	bne.n	8003d0c <UART_SetConfig+0x16c>
 8003c9a:	4b7b      	ldr	r3, [pc, #492]	; (8003e88 <UART_SetConfig+0x2e8>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d82d      	bhi.n	8003d04 <UART_SetConfig+0x164>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <UART_SetConfig+0x110>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003d05 	.word	0x08003d05
 8003cbc:	08003d05 	.word	0x08003d05
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003d05 	.word	0x08003d05
 8003cc8:	08003d05 	.word	0x08003d05
 8003ccc:	08003d05 	.word	0x08003d05
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	08003d05 	.word	0x08003d05
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003cfd 	.word	0x08003cfd
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cea:	e098      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003cec:	2302      	movs	r3, #2
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf2:	e094      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfa:	e090      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d02:	e08c      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d04:	2310      	movs	r3, #16
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e088      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5f      	ldr	r2, [pc, #380]	; (8003e90 <UART_SetConfig+0x2f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d125      	bne.n	8003d62 <UART_SetConfig+0x1c2>
 8003d16:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <UART_SetConfig+0x2e8>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d016      	beq.n	8003d52 <UART_SetConfig+0x1b2>
 8003d24:	2b30      	cmp	r3, #48	; 0x30
 8003d26:	d818      	bhi.n	8003d5a <UART_SetConfig+0x1ba>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d00a      	beq.n	8003d42 <UART_SetConfig+0x1a2>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d814      	bhi.n	8003d5a <UART_SetConfig+0x1ba>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <UART_SetConfig+0x19a>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d008      	beq.n	8003d4a <UART_SetConfig+0x1aa>
 8003d38:	e00f      	b.n	8003d5a <UART_SetConfig+0x1ba>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d40:	e06d      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d42:	2302      	movs	r3, #2
 8003d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d48:	e069      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d50:	e065      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d52:	2308      	movs	r3, #8
 8003d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d58:	e061      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d5a:	2310      	movs	r3, #16
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d60:	e05d      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a4b      	ldr	r2, [pc, #300]	; (8003e94 <UART_SetConfig+0x2f4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d125      	bne.n	8003db8 <UART_SetConfig+0x218>
 8003d6c:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <UART_SetConfig+0x2e8>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d76:	2bc0      	cmp	r3, #192	; 0xc0
 8003d78:	d016      	beq.n	8003da8 <UART_SetConfig+0x208>
 8003d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d7c:	d818      	bhi.n	8003db0 <UART_SetConfig+0x210>
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d00a      	beq.n	8003d98 <UART_SetConfig+0x1f8>
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d814      	bhi.n	8003db0 <UART_SetConfig+0x210>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <UART_SetConfig+0x1f0>
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d008      	beq.n	8003da0 <UART_SetConfig+0x200>
 8003d8e:	e00f      	b.n	8003db0 <UART_SetConfig+0x210>
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d96:	e042      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	e03e      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003da0:	2304      	movs	r3, #4
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e03a      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003da8:	2308      	movs	r3, #8
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e036      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003db0:	2310      	movs	r3, #16
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e032      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <UART_SetConfig+0x2e0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d12a      	bne.n	8003e18 <UART_SetConfig+0x278>
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <UART_SetConfig+0x2e8>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dd0:	d01a      	beq.n	8003e08 <UART_SetConfig+0x268>
 8003dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dd6:	d81b      	bhi.n	8003e10 <UART_SetConfig+0x270>
 8003dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ddc:	d00c      	beq.n	8003df8 <UART_SetConfig+0x258>
 8003dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de2:	d815      	bhi.n	8003e10 <UART_SetConfig+0x270>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <UART_SetConfig+0x250>
 8003de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dec:	d008      	beq.n	8003e00 <UART_SetConfig+0x260>
 8003dee:	e00f      	b.n	8003e10 <UART_SetConfig+0x270>
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df6:	e012      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfe:	e00e      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e06:	e00a      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	e006      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e16:	e002      	b.n	8003e1e <UART_SetConfig+0x27e>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <UART_SetConfig+0x2e0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	f040 80a8 	bne.w	8003f7a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d834      	bhi.n	8003e9c <UART_SetConfig+0x2fc>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x298>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e9d 	.word	0x08003e9d
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003e9d 	.word	0x08003e9d
 8003e48:	08003e6b 	.word	0x08003e6b
 8003e4c:	08003e9d 	.word	0x08003e9d
 8003e50:	08003e9d 	.word	0x08003e9d
 8003e54:	08003e9d 	.word	0x08003e9d
 8003e58:	08003e73 	.word	0x08003e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7ff fb60 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8003e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e62:	e021      	b.n	8003ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <UART_SetConfig+0x2f8>)
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e68:	e01e      	b.n	8003ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7ff faeb 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e70:	e01a      	b.n	8003ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e78:	e016      	b.n	8003ea8 <UART_SetConfig+0x308>
 8003e7a:	bf00      	nop
 8003e7c:	cfff69f3 	.word	0xcfff69f3
 8003e80:	40008000 	.word	0x40008000
 8003e84:	40013800 	.word	0x40013800
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40004400 	.word	0x40004400
 8003e90:	40004800 	.word	0x40004800
 8003e94:	40004c00 	.word	0x40004c00
 8003e98:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ea6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 812a 	beq.w	8004104 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	4a9e      	ldr	r2, [pc, #632]	; (8004130 <UART_SetConfig+0x590>)
 8003eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d305      	bcc.n	8003ee0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d903      	bls.n	8003ee8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ee6:	e10d      	b.n	8004104 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	2200      	movs	r2, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	60fa      	str	r2, [r7, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	4a8e      	ldr	r2, [pc, #568]	; (8004130 <UART_SetConfig+0x590>)
 8003ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2200      	movs	r2, #0
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f0a:	f7fc f985 	bl	8000218 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	020b      	lsls	r3, r1, #8
 8003f20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f24:	0202      	lsls	r2, r0, #8
 8003f26:	6979      	ldr	r1, [r7, #20]
 8003f28:	6849      	ldr	r1, [r1, #4]
 8003f2a:	0849      	lsrs	r1, r1, #1
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	4605      	mov	r5, r0
 8003f32:	eb12 0804 	adds.w	r8, r2, r4
 8003f36:	eb43 0905 	adc.w	r9, r3, r5
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	469a      	mov	sl, r3
 8003f42:	4693      	mov	fp, r2
 8003f44:	4652      	mov	r2, sl
 8003f46:	465b      	mov	r3, fp
 8003f48:	4640      	mov	r0, r8
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	f7fc f964 	bl	8000218 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f5e:	d308      	bcc.n	8003f72 <UART_SetConfig+0x3d2>
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f66:	d204      	bcs.n	8003f72 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a3a      	ldr	r2, [r7, #32]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	e0c8      	b.n	8004104 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f78:	e0c4      	b.n	8004104 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f82:	d167      	bne.n	8004054 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d828      	bhi.n	8003fde <UART_SetConfig+0x43e>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART_SetConfig+0x3f4>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fdf 	.word	0x08003fdf
 8003fa4:	08003fcf 	.word	0x08003fcf
 8003fa8:	08003fdf 	.word	0x08003fdf
 8003fac:	08003fdf 	.word	0x08003fdf
 8003fb0:	08003fdf 	.word	0x08003fdf
 8003fb4:	08003fd7 	.word	0x08003fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7ff fab2 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fbe:	e014      	b.n	8003fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7ff fac4 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 8003fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc6:	e010      	b.n	8003fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc8:	4b5a      	ldr	r3, [pc, #360]	; (8004134 <UART_SetConfig+0x594>)
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fcc:	e00d      	b.n	8003fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fce:	f7ff fa39 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8003fd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fd4:	e009      	b.n	8003fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fdc:	e005      	b.n	8003fea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8089 	beq.w	8004104 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	4a4e      	ldr	r2, [pc, #312]	; (8004130 <UART_SetConfig+0x590>)
 8003ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	fbb3 f3f2 	udiv	r3, r3, r2
 8004004:	005a      	lsls	r2, r3, #1
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	441a      	add	r2, r3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2b0f      	cmp	r3, #15
 800401c:	d916      	bls.n	800404c <UART_SetConfig+0x4ac>
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d212      	bcs.n	800404c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f023 030f 	bic.w	r3, r3, #15
 800402e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	b29b      	uxth	r3, r3
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	b29a      	uxth	r2, r3
 800403c:	8bfb      	ldrh	r3, [r7, #30]
 800403e:	4313      	orrs	r3, r2
 8004040:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	8bfa      	ldrh	r2, [r7, #30]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e05b      	b.n	8004104 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004052:	e057      	b.n	8004104 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004058:	2b08      	cmp	r3, #8
 800405a:	d828      	bhi.n	80040ae <UART_SetConfig+0x50e>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <UART_SetConfig+0x4c4>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004089 	.word	0x08004089
 8004068:	08004091 	.word	0x08004091
 800406c:	08004099 	.word	0x08004099
 8004070:	080040af 	.word	0x080040af
 8004074:	0800409f 	.word	0x0800409f
 8004078:	080040af 	.word	0x080040af
 800407c:	080040af 	.word	0x080040af
 8004080:	080040af 	.word	0x080040af
 8004084:	080040a7 	.word	0x080040a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004088:	f7ff fa4a 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800408e:	e014      	b.n	80040ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004090:	f7ff fa5c 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004096:	e010      	b.n	80040ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <UART_SetConfig+0x594>)
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800409c:	e00d      	b.n	80040ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409e:	f7ff f9d1 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040a4:	e009      	b.n	80040ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040ac:	e005      	b.n	80040ba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040b8:	bf00      	nop
    }

    if (pclk != 0U)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d021      	beq.n	8004104 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <UART_SetConfig+0x590>)
 80040c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ca:	461a      	mov	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	441a      	add	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	d909      	bls.n	80040fe <UART_SetConfig+0x55e>
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d205      	bcs.n	80040fe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	e002      	b.n	8004104 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2201      	movs	r2, #1
 8004108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2201      	movs	r2, #1
 8004110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004120:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004124:	4618      	mov	r0, r3
 8004126:	3730      	adds	r7, #48	; 0x30
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	080091f0 	.word	0x080091f0
 8004134:	00f42400 	.word	0x00f42400

08004138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01a      	beq.n	800424e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004236:	d10a      	bne.n	800424e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
  }
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b098      	sub	sp, #96	; 0x60
 8004280:	af02      	add	r7, sp, #8
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800428c:	f7fc fbdc 	bl	8000a48 <HAL_GetTick>
 8004290:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b08      	cmp	r3, #8
 800429e:	d12f      	bne.n	8004300 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f88e 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d022      	beq.n	8004300 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ce:	653b      	str	r3, [r7, #80]	; 0x50
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	647b      	str	r3, [r7, #68]	; 0x44
 80042da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e6      	bne.n	80042ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e063      	b.n	80043c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d149      	bne.n	80043a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004316:	2200      	movs	r2, #0
 8004318:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f857 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d03c      	beq.n	80043a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	623b      	str	r3, [r7, #32]
   return(result);
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800433c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
 8004348:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800434c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e6      	bne.n	8004328 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	60fb      	str	r3, [r7, #12]
   return(result);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	64bb      	str	r3, [r7, #72]	; 0x48
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3308      	adds	r3, #8
 8004378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800437a:	61fa      	str	r2, [r7, #28]
 800437c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	617b      	str	r3, [r7, #20]
   return(result);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e012      	b.n	80043c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3758      	adds	r7, #88	; 0x58
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e0:	e04f      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d04b      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fc fb2d 	bl	8000a48 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <UART_WaitOnFlagUntilTimeout+0x30>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e04e      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d037      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d034      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d031      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b08      	cmp	r3, #8
 800442a:	d110      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2208      	movs	r2, #8
 8004432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f838 	bl	80044aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2208      	movs	r2, #8
 800443e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e029      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445c:	d111      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f81e 	bl	80044aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e00f      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	429a      	cmp	r2, r3
 800449e:	d0a0      	beq.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b095      	sub	sp, #84	; 0x54
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	643b      	str	r3, [r7, #64]	; 0x40
 80044d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e3      	bne.n	80044e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d118      	bne.n	8004556 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	60bb      	str	r3, [r7, #8]
   return(result);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f023 0310 	bic.w	r3, r3, #16
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	613b      	str	r3, [r7, #16]
   return(result);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e6      	bne.n	8004524 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	675a      	str	r2, [r3, #116]	; 0x74
}
 800456a:	bf00      	nop
 800456c:	3754      	adds	r7, #84	; 0x54
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_UARTEx_DisableFifoMode+0x16>
 8004588:	2302      	movs	r3, #2
 800458a:	e027      	b.n	80045dc <HAL_UARTEx_DisableFifoMode+0x66>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e02d      	b.n	800465c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f84f 	bl	80046e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e02d      	b.n	80046d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	; 0x24
 8004688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f811 	bl	80046e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d108      	bne.n	8004702 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004700:	e031      	b.n	8004766 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004702:	2308      	movs	r3, #8
 8004704:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004706:	2308      	movs	r3, #8
 8004708:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	0e5b      	lsrs	r3, r3, #25
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	0f5b      	lsrs	r3, r3, #29
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800472a:	7bbb      	ldrb	r3, [r7, #14]
 800472c:	7b3a      	ldrb	r2, [r7, #12]
 800472e:	4911      	ldr	r1, [pc, #68]	; (8004774 <UARTEx_SetNbDataToProcess+0x94>)
 8004730:	5c8a      	ldrb	r2, [r1, r2]
 8004732:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004736:	7b3a      	ldrb	r2, [r7, #12]
 8004738:	490f      	ldr	r1, [pc, #60]	; (8004778 <UARTEx_SetNbDataToProcess+0x98>)
 800473a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800473c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	7b7a      	ldrb	r2, [r7, #13]
 800474c:	4909      	ldr	r1, [pc, #36]	; (8004774 <UARTEx_SetNbDataToProcess+0x94>)
 800474e:	5c8a      	ldrb	r2, [r1, r2]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004754:	7b7a      	ldrb	r2, [r7, #13]
 8004756:	4908      	ldr	r1, [pc, #32]	; (8004778 <UARTEx_SetNbDataToProcess+0x98>)
 8004758:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800475a:	fb93 f3f2 	sdiv	r3, r3, r2
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	08009208 	.word	0x08009208
 8004778:	08009210 	.word	0x08009210

0800477c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800478c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004790:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047b2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80047b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4013      	ands	r3, r2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800481c:	b480      	push	{r7}
 800481e:	b09d      	sub	sp, #116	; 0x74
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	78db      	ldrb	r3, [r3, #3]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d81f      	bhi.n	800488e <USB_ActivateEndpoint+0x72>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <USB_ActivateEndpoint+0x38>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004865 	.word	0x08004865
 8004858:	08004881 	.word	0x08004881
 800485c:	08004897 	.word	0x08004897
 8004860:	08004873 	.word	0x08004873
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800486c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004870:	e012      	b.n	8004898 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004872:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004876:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800487a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800487e:	e00b      	b.n	8004898 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004880:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004888:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800488c:	e004      	b.n	8004898 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004894:	e000      	b.n	8004898 <USB_ActivateEndpoint+0x7c>
      break;
 8004896:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	b21a      	sxth	r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b21b      	sxth	r3, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	b21b      	sxth	r3, r3
 80048de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80048f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	b29b      	uxth	r3, r3
 8004902:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	7b1b      	ldrb	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f040 8178 	bne.w	8004bfe <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8084 	beq.w	8004a20 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004922:	b29b      	uxth	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4413      	add	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	00da      	lsls	r2, r3, #3
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	88db      	ldrh	r3, [r3, #6]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	b29b      	uxth	r3, r3
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	827b      	strh	r3, [r7, #18]
 800495a:	8a7b      	ldrh	r3, [r7, #18]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <USB_ActivateEndpoint+0x180>
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497a:	823b      	strh	r3, [r7, #16]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	8a3b      	ldrh	r3, [r7, #16]
 8004988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004994:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004998:	b29b      	uxth	r3, r3
 800499a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	78db      	ldrb	r3, [r3, #3]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d020      	beq.n	80049e6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ba:	81bb      	strh	r3, [r7, #12]
 80049bc:	89bb      	ldrh	r3, [r7, #12]
 80049be:	f083 0320 	eor.w	r3, r3, #32
 80049c2:	81bb      	strh	r3, [r7, #12]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
 80049e4:	e2d5      	b.n	8004f92 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fc:	81fb      	strh	r3, [r7, #14]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	89fb      	ldrh	r3, [r7, #14]
 8004a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8013      	strh	r3, [r2, #0]
 8004a1e:	e2b8      	b.n	8004f92 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	4413      	add	r3, r2
 8004a32:	633b      	str	r3, [r7, #48]	; 0x30
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	00da      	lsls	r2, r3, #3
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	88db      	ldrh	r3, [r3, #6]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	4413      	add	r3, r2
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	00da      	lsls	r2, r3, #3
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	4413      	add	r3, r2
 8004a72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a8e:	d91d      	bls.n	8004acc <USB_ActivateEndpoint+0x2b0>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <USB_ActivateEndpoint+0x28e>
 8004aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	e026      	b.n	8004b1a <USB_ActivateEndpoint+0x2fe>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <USB_ActivateEndpoint+0x2ce>
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	801a      	strh	r2, [r3, #0]
 8004ae8:	e017      	b.n	8004b1a <USB_ActivateEndpoint+0x2fe>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <USB_ActivateEndpoint+0x2e8>
 8004afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b00:	3301      	adds	r3, #1
 8004b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	029b      	lsls	r3, r3, #10
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	4313      	orrs	r3, r2
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01b      	beq.n	8004b6a <USB_ActivateEndpoint+0x34e>
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	843b      	strh	r3, [r7, #32]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	8c3b      	ldrh	r3, [r7, #32]
 8004b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d124      	bne.n	8004bbc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	83bb      	strh	r3, [r7, #28]
 8004b8a:	8bbb      	ldrh	r3, [r7, #28]
 8004b8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b90:	83bb      	strh	r3, [r7, #28]
 8004b92:	8bbb      	ldrh	r3, [r7, #28]
 8004b94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b98:	83bb      	strh	r3, [r7, #28]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	8bbb      	ldrh	r3, [r7, #28]
 8004ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8013      	strh	r3, [r2, #0]
 8004bba:	e1ea      	b.n	8004f92 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	83fb      	strh	r3, [r7, #30]
 8004bd4:	8bfb      	ldrh	r3, [r7, #30]
 8004bd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bda:	83fb      	strh	r3, [r7, #30]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	8bfb      	ldrh	r3, [r7, #30]
 8004be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	8013      	strh	r3, [r2, #0]
 8004bfc:	e1c9      	b.n	8004f92 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	78db      	ldrb	r3, [r3, #3]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d11e      	bne.n	8004c44 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]
 8004c42:	e01d      	b.n	8004c80 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c90:	4413      	add	r3, r2
 8004c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	00da      	lsls	r2, r3, #3
 8004c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	891b      	ldrh	r3, [r3, #8]
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	4413      	add	r3, r2
 8004cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	00da      	lsls	r2, r3, #3
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	895b      	ldrh	r3, [r3, #10]
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 8093 	bne.w	8004e18 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01b      	beq.n	8004d46 <USB_ActivateEndpoint+0x52a>
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01b      	beq.n	8004d96 <USB_ActivateEndpoint+0x57a>
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	873b      	strh	r3, [r7, #56]	; 0x38
 8004dae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004db0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004db4:	873b      	strh	r3, [r7, #56]	; 0x38
 8004db6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dbc:	873b      	strh	r3, [r7, #56]	; 0x38
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	441a      	add	r2, r3
 8004e00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	8013      	strh	r3, [r2, #0]
 8004e16:	e0bc      	b.n	8004f92 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01d      	beq.n	8004e70 <USB_ActivateEndpoint+0x654>
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	441a      	add	r2, r3
 8004e58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01d      	beq.n	8004ec8 <USB_ActivateEndpoint+0x6ac>
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	78db      	ldrb	r3, [r3, #3]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d024      	beq.n	8004f1a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004eee:	f083 0320 	eor.w	r3, r3, #32
 8004ef2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	441a      	add	r2, r3
 8004f00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	8013      	strh	r3, [r2, #0]
 8004f18:	e01d      	b.n	8004f56 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004f92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3774      	adds	r7, #116	; 0x74
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop

08004fa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b08d      	sub	sp, #52	; 0x34
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	7b1b      	ldrb	r3, [r3, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 808e 	bne.w	80050d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d044      	beq.n	800504a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	81bb      	strh	r3, [r7, #12]
 8004fce:	89bb      	ldrh	r3, [r7, #12]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <USB_DeactivateEndpoint+0x6c>
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	817b      	strh	r3, [r7, #10]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800500c:	b29b      	uxth	r3, r3
 800500e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005026:	813b      	strh	r3, [r7, #8]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	893b      	ldrh	r3, [r7, #8]
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
 8005048:	e192      	b.n	8005370 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	827b      	strh	r3, [r7, #18]
 8005058:	8a7b      	ldrh	r3, [r7, #18]
 800505a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01b      	beq.n	800509a <USB_DeactivateEndpoint+0xf6>
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	823b      	strh	r3, [r7, #16]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	8a3b      	ldrh	r3, [r7, #16]
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	81fb      	strh	r3, [r7, #14]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	8013      	strh	r3, [r2, #0]
 80050d2:	e14d      	b.n	8005370 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f040 80a5 	bne.w	8005228 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	843b      	strh	r3, [r7, #32]
 80050ec:	8c3b      	ldrh	r3, [r7, #32]
 80050ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01b      	beq.n	800512e <USB_DeactivateEndpoint+0x18a>
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	83fb      	strh	r3, [r7, #30]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	441a      	add	r2, r3
 8005118:	8bfb      	ldrh	r3, [r7, #30]
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	83bb      	strh	r3, [r7, #28]
 800513c:	8bbb      	ldrh	r3, [r7, #28]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01b      	beq.n	800517e <USB_DeactivateEndpoint+0x1da>
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515c:	837b      	strh	r3, [r7, #26]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	8b7b      	ldrh	r3, [r7, #26]
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	833b      	strh	r3, [r7, #24]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	8b3b      	ldrh	r3, [r7, #24]
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	82fb      	strh	r3, [r7, #22]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	441a      	add	r2, r3
 80051d8:	8afb      	ldrh	r3, [r7, #22]
 80051da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005204:	82bb      	strh	r3, [r7, #20]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	441a      	add	r2, r3
 8005210:	8abb      	ldrh	r3, [r7, #20]
 8005212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005222:	b29b      	uxth	r3, r3
 8005224:	8013      	strh	r3, [r2, #0]
 8005226:	e0a3      	b.n	8005370 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005236:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <USB_DeactivateEndpoint+0x2d4>
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <USB_DeactivateEndpoint+0x324>
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	441a      	add	r2, r3
 80052ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005316:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800535c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536c:	b29b      	uxth	r3, r3
 800536e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3734      	adds	r7, #52	; 0x34
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b0c2      	sub	sp, #264	; 0x108
 8005382:	af00      	add	r7, sp, #0
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538c:	6018      	str	r0, [r3, #0]
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f040 86b7 	bne.w	8006118 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d908      	bls.n	80053d8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80053c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053d6:	e007      	b.n	80053e8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80053d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80053e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	7b1b      	ldrb	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d13a      	bne.n	800546e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6959      	ldr	r1, [r3, #20]
 8005404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	88da      	ldrh	r2, [r3, #6]
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005414:	b29b      	uxth	r3, r3
 8005416:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800541a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	f001 fc98 	bl	8006d54 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	00da      	lsls	r2, r3, #3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4413      	add	r3, r2
 800545a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	f000 be1f 	b.w	80060ac <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800546e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	78db      	ldrb	r3, [r3, #3]
 800547a:	2b02      	cmp	r3, #2
 800547c:	f040 8462 	bne.w	8005d44 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	f240 83df 	bls.w	8005c5c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800549e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80054c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a1a      	ldr	r2, [r3, #32]
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 81c7 	beq.w	80058ce <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	633b      	str	r3, [r7, #48]	; 0x30
 800554c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d177      	bne.n	800564c <USB_EPStartXfer+0x2ce>
 800555c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	4413      	add	r3, r2
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	00da      	lsls	r2, r3, #3
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	4413      	add	r3, r2
 8005592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ac:	2b3e      	cmp	r3, #62	; 0x3e
 80055ae:	d921      	bls.n	80055f4 <USB_EPStartXfer+0x276>
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <USB_EPStartXfer+0x252>
 80055c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055ca:	3b01      	subs	r3, #1
 80055cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e050      	b.n	8005696 <USB_EPStartXfer+0x318>
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <USB_EPStartXfer+0x294>
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800560a:	b29a      	uxth	r2, r3
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	e041      	b.n	8005696 <USB_EPStartXfer+0x318>
 8005612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <USB_EPStartXfer+0x2b4>
 8005628:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800562c:	3301      	adds	r3, #1
 800562e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29a      	uxth	r2, r3
 8005638:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800563c:	b29b      	uxth	r3, r3
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	b29b      	uxth	r3, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	b29a      	uxth	r2, r3
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e024      	b.n	8005696 <USB_EPStartXfer+0x318>
 800564c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d11c      	bne.n	8005696 <USB_EPStartXfer+0x318>
 800565c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566a:	b29b      	uxth	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	4413      	add	r3, r2
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
 8005674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00da      	lsls	r2, r3, #3
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	4413      	add	r3, r2
 8005686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005690:	b29a      	uxth	r2, r3
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	895b      	ldrh	r3, [r3, #10]
 80056a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6959      	ldr	r1, [r3, #20]
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056c4:	6800      	ldr	r0, [r0, #0]
 80056c6:	f001 fb45 	bl	8006d54 <USB_WritePMA>
            ep->xfer_buff += len;
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056da:	441a      	add	r2, r3
 80056dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6a1a      	ldr	r2, [r3, #32]
 80056f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	429a      	cmp	r2, r3
 8005702:	d90f      	bls.n	8005724 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005714:	1ad2      	subs	r2, r2, r3
 8005716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	621a      	str	r2, [r3, #32]
 8005722:	e00e      	b.n	8005742 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d177      	bne.n	8005842 <USB_EPStartXfer+0x4c4>
 8005752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4413      	add	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	00da      	lsls	r2, r3, #3
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	4413      	add	r3, r2
 8005788:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005798:	b29a      	uxth	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a2:	2b3e      	cmp	r3, #62	; 0x3e
 80057a4:	d921      	bls.n	80057ea <USB_EPStartXfer+0x46c>
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <USB_EPStartXfer+0x448>
 80057bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c0:	3b01      	subs	r3, #1
 80057c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b29b      	uxth	r3, r3
 80057da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e056      	b.n	8005898 <USB_EPStartXfer+0x51a>
 80057ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <USB_EPStartXfer+0x48a>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005800:	b29a      	uxth	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e047      	b.n	8005898 <USB_EPStartXfer+0x51a>
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <USB_EPStartXfer+0x4aa>
 800581e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005822:	3301      	adds	r3, #1
 8005824:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005832:	b29b      	uxth	r3, r3
 8005834:	029b      	lsls	r3, r3, #10
 8005836:	b29b      	uxth	r3, r3
 8005838:	4313      	orrs	r3, r2
 800583a:	b29a      	uxth	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	e02a      	b.n	8005898 <USB_EPStartXfer+0x51a>
 8005842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d122      	bne.n	8005898 <USB_EPStartXfer+0x51a>
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	4413      	add	r3, r2
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	00da      	lsls	r2, r3, #3
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	4413      	add	r3, r2
 8005888:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005892:	b29a      	uxth	r2, r3
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	891b      	ldrh	r3, [r3, #8]
 80058a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6959      	ldr	r1, [r3, #20]
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	f001 fa44 	bl	8006d54 <USB_WritePMA>
 80058cc:	e3ee      	b.n	80060ac <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d177      	bne.n	80059ce <USB_EPStartXfer+0x650>
 80058de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fe:	4413      	add	r3, r2
 8005900:	64bb      	str	r3, [r7, #72]	; 0x48
 8005902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	00da      	lsls	r2, r3, #3
 8005910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005912:	4413      	add	r3, r2
 8005914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005918:	647b      	str	r3, [r7, #68]	; 0x44
 800591a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005924:	b29a      	uxth	r2, r3
 8005926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592e:	2b3e      	cmp	r3, #62	; 0x3e
 8005930:	d921      	bls.n	8005976 <USB_EPStartXfer+0x5f8>
 8005932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800593c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <USB_EPStartXfer+0x5d4>
 8005948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800594c:	3b01      	subs	r3, #1
 800594e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29a      	uxth	r2, r3
 8005958:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800595c:	b29b      	uxth	r3, r3
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	b29b      	uxth	r3, r3
 8005962:	4313      	orrs	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596e:	b29a      	uxth	r2, r3
 8005970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e056      	b.n	8005a24 <USB_EPStartXfer+0x6a6>
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <USB_EPStartXfer+0x616>
 800597e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598c:	b29a      	uxth	r2, r3
 800598e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	e047      	b.n	8005a24 <USB_EPStartXfer+0x6a6>
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800599e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <USB_EPStartXfer+0x636>
 80059aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ae:	3301      	adds	r3, #1
 80059b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059be:	b29b      	uxth	r3, r3
 80059c0:	029b      	lsls	r3, r3, #10
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	4313      	orrs	r3, r2
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	e02a      	b.n	8005a24 <USB_EPStartXfer+0x6a6>
 80059ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d122      	bne.n	8005a24 <USB_EPStartXfer+0x6a6>
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	653b      	str	r3, [r7, #80]	; 0x50
 80059ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fe:	4413      	add	r3, r2
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50
 8005a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	00da      	lsls	r2, r3, #3
 8005a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	891b      	ldrh	r3, [r3, #8]
 8005a30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6959      	ldr	r1, [r3, #20]
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	f001 f97e 	bl	8006d54 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a68:	441a      	add	r2, r3
 8005a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a1a      	ldr	r2, [r3, #32]
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d90f      	bls.n	8005ab2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	621a      	str	r2, [r3, #32]
 8005ab0:	e00e      	b.n	8005ad0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2200      	movs	r2, #0
 8005ace:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	643b      	str	r3, [r7, #64]	; 0x40
 8005adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d177      	bne.n	8005bdc <USB_EPStartXfer+0x85e>
 8005aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	4413      	add	r3, r2
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00da      	lsls	r2, r3, #3
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3e:	d921      	bls.n	8005b84 <USB_EPStartXfer+0x806>
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <USB_EPStartXfer+0x7e2>
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	029b      	lsls	r3, r3, #10
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	e050      	b.n	8005c26 <USB_EPStartXfer+0x8a8>
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <USB_EPStartXfer+0x824>
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	e041      	b.n	8005c26 <USB_EPStartXfer+0x8a8>
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d004      	beq.n	8005bc2 <USB_EPStartXfer+0x844>
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e024      	b.n	8005c26 <USB_EPStartXfer+0x8a8>
 8005bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d11c      	bne.n	8005c26 <USB_EPStartXfer+0x8a8>
 8005bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	4413      	add	r3, r2
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
 8005c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	895b      	ldrh	r3, [r3, #10]
 8005c32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c54:	6800      	ldr	r0, [r0, #0]
 8005c56:	f001 f87d 	bl	8006d54 <USB_WritePMA>
 8005c5a:	e227      	b.n	80060ac <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce8:	4413      	add	r3, r2
 8005cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	00da      	lsls	r2, r3, #3
 8005cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	891b      	ldrh	r3, [r3, #8]
 8005d1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6959      	ldr	r1, [r3, #20]
 8005d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d3c:	6800      	ldr	r0, [r0, #0]
 8005d3e:	f001 f809 	bl	8006d54 <USB_WritePMA>
 8005d42:	e1b3      	b.n	80060ac <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80c6 	beq.w	8005f16 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	673b      	str	r3, [r7, #112]	; 0x70
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d177      	bne.n	8005e96 <USB_EPStartXfer+0xb18>
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc6:	4413      	add	r3, r2
 8005dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	00da      	lsls	r2, r3, #3
 8005dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005de0:	667b      	str	r3, [r7, #100]	; 0x64
 8005de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	2b3e      	cmp	r3, #62	; 0x3e
 8005df8:	d921      	bls.n	8005e3e <USB_EPStartXfer+0xac0>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <USB_EPStartXfer+0xa9c>
 8005e10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e14:	3b01      	subs	r3, #1
 8005e16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e050      	b.n	8005ee0 <USB_EPStartXfer+0xb62>
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USB_EPStartXfer+0xade>
 8005e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e041      	b.n	8005ee0 <USB_EPStartXfer+0xb62>
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <USB_EPStartXfer+0xafe>
 8005e72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e024      	b.n	8005ee0 <USB_EPStartXfer+0xb62>
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d11c      	bne.n	8005ee0 <USB_EPStartXfer+0xb62>
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eba:	4413      	add	r3, r2
 8005ebc:	673b      	str	r3, [r7, #112]	; 0x70
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	00da      	lsls	r2, r3, #3
 8005ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ece:	4413      	add	r3, r2
 8005ed0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ede:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	895b      	ldrh	r3, [r3, #10]
 8005eec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6959      	ldr	r1, [r3, #20]
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	f000 ff20 	bl	8006d54 <USB_WritePMA>
 8005f14:	e0ca      	b.n	80060ac <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d177      	bne.n	8006016 <USB_EPStartXfer+0xc98>
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f46:	4413      	add	r3, r2
 8005f48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	00da      	lsls	r2, r3, #3
 8005f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f76:	2b3e      	cmp	r3, #62	; 0x3e
 8005f78:	d921      	bls.n	8005fbe <USB_EPStartXfer+0xc40>
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_EPStartXfer+0xc1c>
 8005f90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f94:	3b01      	subs	r3, #1
 8005f96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	029b      	lsls	r3, r3, #10
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e05c      	b.n	8006078 <USB_EPStartXfer+0xcfa>
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <USB_EPStartXfer+0xc5e>
 8005fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e04d      	b.n	8006078 <USB_EPStartXfer+0xcfa>
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <USB_EPStartXfer+0xc7e>
 8005ff2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006006:	b29b      	uxth	r3, r3
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	b29b      	uxth	r3, r3
 800600c:	4313      	orrs	r3, r2
 800600e:	b29a      	uxth	r2, r3
 8006010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e030      	b.n	8006078 <USB_EPStartXfer+0xcfa>
 8006016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d128      	bne.n	8006078 <USB_EPStartXfer+0xcfa>
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800604a:	4413      	add	r3, r2
 800604c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	00da      	lsls	r2, r3, #3
 800605e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006062:	4413      	add	r3, r2
 8006064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	b29a      	uxth	r2, r3
 8006072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006076:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	891b      	ldrh	r3, [r3, #8]
 8006084:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6959      	ldr	r1, [r3, #20]
 8006094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006098:	b29b      	uxth	r3, r3
 800609a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800609e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060a6:	6800      	ldr	r0, [r0, #0]
 80060a8:	f000 fe54 	bl	8006d54 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d2:	817b      	strh	r3, [r7, #10]
 80060d4:	897b      	ldrh	r3, [r7, #10]
 80060d6:	f083 0310 	eor.w	r3, r3, #16
 80060da:	817b      	strh	r3, [r7, #10]
 80060dc:	897b      	ldrh	r3, [r7, #10]
 80060de:	f083 0320 	eor.w	r3, r3, #32
 80060e2:	817b      	strh	r3, [r7, #10]
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	441a      	add	r2, r3
 80060fe:	897b      	ldrh	r3, [r7, #10]
 8006100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006110:	b29b      	uxth	r3, r3
 8006112:	8013      	strh	r3, [r2, #0]
 8006114:	f000 bcde 	b.w	8006ad4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	7b1b      	ldrb	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 80bb 	bne.w	80062a0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800612a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	d917      	bls.n	8006176 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	1ad2      	subs	r2, r2, r3
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	619a      	str	r2, [r3, #24]
 8006174:	e00e      	b.n	8006194 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2200      	movs	r2, #0
 8006192:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061b8:	4413      	add	r3, r2
 80061ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	00da      	lsls	r2, r3, #3
 80061cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f2:	2b3e      	cmp	r3, #62	; 0x3e
 80061f4:	d924      	bls.n	8006240 <USB_EPStartXfer+0xec2>
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USB_EPStartXfer+0xe98>
 800620c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006210:	3b01      	subs	r3, #1
 8006212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29a      	uxth	r2, r3
 800621e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006222:	b29b      	uxth	r3, r3
 8006224:	029b      	lsls	r3, r3, #10
 8006226:	b29b      	uxth	r3, r3
 8006228:	4313      	orrs	r3, r2
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	f000 bc10 	b.w	8006a60 <USB_EPStartXfer+0x16e2>
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10c      	bne.n	8006262 <USB_EPStartXfer+0xee4>
 8006248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006258:	b29a      	uxth	r2, r3
 800625a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e3fe      	b.n	8006a60 <USB_EPStartXfer+0x16e2>
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <USB_EPStartXfer+0xf04>
 8006278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800627c:	3301      	adds	r3, #1
 800627e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800628e:	b29b      	uxth	r3, r3
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	b29b      	uxth	r3, r3
 8006294:	4313      	orrs	r3, r2
 8006296:	b29a      	uxth	r2, r3
 8006298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e3df      	b.n	8006a60 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	78db      	ldrb	r3, [r3, #3]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	f040 8218 	bne.w	80066e2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 809d 	bne.w	80063fe <USB_EPStartXfer+0x1080>
 80062c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062e8:	4413      	add	r3, r2
 80062ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	00da      	lsls	r2, r3, #3
 80062fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006300:	4413      	add	r3, r2
 8006302:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800630a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006316:	b29a      	uxth	r2, r3
 8006318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b3e      	cmp	r3, #62	; 0x3e
 800632c:	d92b      	bls.n	8006386 <USB_EPStartXfer+0x1008>
 800632e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <USB_EPStartXfer+0xfe0>
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006358:	3b01      	subs	r3, #1
 800635a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800635e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	4313      	orrs	r3, r2
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e070      	b.n	8006468 <USB_EPStartXfer+0x10ea>
 8006386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10c      	bne.n	80063b0 <USB_EPStartXfer+0x1032>
 8006396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	e05b      	b.n	8006468 <USB_EPStartXfer+0x10ea>
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <USB_EPStartXfer+0x1062>
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063da:	3301      	adds	r3, #1
 80063dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	029b      	lsls	r3, r3, #10
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	4313      	orrs	r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	e034      	b.n	8006468 <USB_EPStartXfer+0x10ea>
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d12c      	bne.n	8006468 <USB_EPStartXfer+0x10ea>
 800640e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006432:	4413      	add	r3, r2
 8006434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	00da      	lsls	r2, r3, #3
 8006446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800644a:	4413      	add	r3, r2
 800644c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	b29a      	uxth	r2, r3
 8006462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 809d 	bne.w	80065c2 <USB_EPStartXfer+0x1244>
 8006488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ac:	4413      	add	r3, r2
 80064ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00da      	lsls	r2, r3, #3
 80064c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064c4:	4413      	add	r3, r2
 80064c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b3e      	cmp	r3, #62	; 0x3e
 80064f0:	d92b      	bls.n	800654a <USB_EPStartXfer+0x11cc>
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <USB_EPStartXfer+0x11a4>
 8006518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651c:	3b01      	subs	r3, #1
 800651e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006522:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29a      	uxth	r2, r3
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	b29b      	uxth	r3, r3
 8006530:	029b      	lsls	r3, r3, #10
 8006532:	b29b      	uxth	r3, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	b29b      	uxth	r3, r3
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e069      	b.n	800661e <USB_EPStartXfer+0x12a0>
 800654a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10c      	bne.n	8006574 <USB_EPStartXfer+0x11f6>
 800655a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e054      	b.n	800661e <USB_EPStartXfer+0x12a0>
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <USB_EPStartXfer+0x1226>
 800659a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659e:	3301      	adds	r3, #1
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	029b      	lsls	r3, r3, #10
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4313      	orrs	r3, r2
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	e02d      	b.n	800661e <USB_EPStartXfer+0x12a0>
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d125      	bne.n	800661e <USB_EPStartXfer+0x12a0>
 80065d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065e8:	4413      	add	r3, r2
 80065ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	00da      	lsls	r2, r3, #3
 80065fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006600:	4413      	add	r3, r2
 8006602:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800660a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800661c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8218 	beq.w	8006a60 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006650:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <USB_EPStartXfer+0x12ea>
 800665c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10d      	bne.n	8006684 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006668:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800666c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 81f5 	bne.w	8006a60 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006676:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 81ee 	bne.w	8006a60 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80066ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]
 80066e0:	e1be      	b.n	8006a60 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	78db      	ldrb	r3, [r3, #3]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	f040 81b4 	bne.w	8006a5c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699a      	ldr	r2, [r3, #24]
 8006700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d917      	bls.n	8006740 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	619a      	str	r2, [r3, #24]
 800673e:	e00e      	b.n	800675e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 8085 	bne.w	800687a <USB_EPStartXfer+0x14fc>
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006794:	4413      	add	r3, r2
 8006796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	00da      	lsls	r2, r3, #3
 80067a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ce:	2b3e      	cmp	r3, #62	; 0x3e
 80067d0:	d923      	bls.n	800681a <USB_EPStartXfer+0x149c>
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <USB_EPStartXfer+0x1474>
 80067e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ec:	3b01      	subs	r3, #1
 80067ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	b29b      	uxth	r3, r3
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	b29b      	uxth	r3, r3
 8006804:	4313      	orrs	r3, r2
 8006806:	b29b      	uxth	r3, r3
 8006808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e060      	b.n	80068dc <USB_EPStartXfer+0x155e>
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10c      	bne.n	800683c <USB_EPStartXfer+0x14be>
 8006822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e04f      	b.n	80068dc <USB_EPStartXfer+0x155e>
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <USB_EPStartXfer+0x14de>
 8006852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006856:	3301      	adds	r3, #1
 8006858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800685c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006868:	b29b      	uxth	r3, r3
 800686a:	029b      	lsls	r3, r3, #10
 800686c:	b29b      	uxth	r3, r3
 800686e:	4313      	orrs	r3, r2
 8006870:	b29a      	uxth	r2, r3
 8006872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e030      	b.n	80068dc <USB_EPStartXfer+0x155e>
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d128      	bne.n	80068dc <USB_EPStartXfer+0x155e>
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ae:	4413      	add	r3, r2
 80068b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	00da      	lsls	r2, r3, #3
 80068c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 8085 	bne.w	8006a06 <USB_EPStartXfer+0x1688>
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800690a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006918:	b29b      	uxth	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006920:	4413      	add	r3, r2
 8006922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	00da      	lsls	r2, r3, #3
 8006934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006938:	4413      	add	r3, r2
 800693a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800693e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800694e:	b29a      	uxth	r2, r3
 8006950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006954:	801a      	strh	r2, [r3, #0]
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695a:	2b3e      	cmp	r3, #62	; 0x3e
 800695c:	d923      	bls.n	80069a6 <USB_EPStartXfer+0x1628>
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <USB_EPStartXfer+0x1600>
 8006974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006978:	3b01      	subs	r3, #1
 800697a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800697e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29a      	uxth	r2, r3
 8006986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800698a:	b29b      	uxth	r3, r3
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	b29b      	uxth	r3, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	b29b      	uxth	r3, r3
 8006994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699c:	b29a      	uxth	r2, r3
 800699e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e05c      	b.n	8006a60 <USB_EPStartXfer+0x16e2>
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10c      	bne.n	80069c8 <USB_EPStartXfer+0x164a>
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	e04b      	b.n	8006a60 <USB_EPStartXfer+0x16e2>
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <USB_EPStartXfer+0x166a>
 80069de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e2:	3301      	adds	r3, #1
 80069e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	e02c      	b.n	8006a60 <USB_EPStartXfer+0x16e2>
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d124      	bne.n	8006a60 <USB_EPStartXfer+0x16e2>
 8006a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	00da      	lsls	r2, r3, #3
 8006a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a44:	4413      	add	r3, r2
 8006a46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e001      	b.n	8006a60 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e03a      	b.n	8006ad6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a86:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006a8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006a96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d020      	beq.n	8006b34 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	81bb      	strh	r3, [r7, #12]
 8006b0a:	89bb      	ldrh	r3, [r7, #12]
 8006b0c:	f083 0310 	eor.w	r3, r3, #16
 8006b10:	81bb      	strh	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	89bb      	ldrh	r3, [r7, #12]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	e01f      	b.n	8006b74 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	81fb      	strh	r3, [r7, #14]
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
 8006b4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b52:	81fb      	strh	r3, [r7, #14]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	89fb      	ldrh	r3, [r7, #14]
 8006b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b087      	sub	sp, #28
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	7b1b      	ldrb	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 809d 	bne.w	8006cd0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d04c      	beq.n	8006c38 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	823b      	strh	r3, [r7, #16]
 8006bac:	8a3b      	ldrh	r3, [r7, #16]
 8006bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01b      	beq.n	8006bee <USB_EPClearStall+0x6c>
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bcc:	81fb      	strh	r3, [r7, #14]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	89fb      	ldrh	r3, [r7, #14]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	78db      	ldrb	r3, [r3, #3]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d06c      	beq.n	8006cd0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0c:	81bb      	strh	r3, [r7, #12]
 8006c0e:	89bb      	ldrh	r3, [r7, #12]
 8006c10:	f083 0320 	eor.w	r3, r3, #32
 8006c14:	81bb      	strh	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	441a      	add	r2, r3
 8006c20:	89bb      	ldrh	r3, [r7, #12]
 8006c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]
 8006c36:	e04b      	b.n	8006cd0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	82fb      	strh	r3, [r7, #22]
 8006c46:	8afb      	ldrh	r3, [r7, #22]
 8006c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01b      	beq.n	8006c88 <USB_EPClearStall+0x106>
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c66:	82bb      	strh	r3, [r7, #20]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	441a      	add	r2, r3
 8006c72:	8abb      	ldrh	r3, [r7, #20]
 8006c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9e:	827b      	strh	r3, [r7, #18]
 8006ca0:	8a7b      	ldrh	r3, [r7, #18]
 8006ca2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ca6:	827b      	strh	r3, [r7, #18]
 8006ca8:	8a7b      	ldrh	r3, [r7, #18]
 8006caa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cae:	827b      	strh	r3, [r7, #18]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	441a      	add	r2, r3
 8006cba:	8a7b      	ldrh	r3, [r7, #18]
 8006cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006d46:	68fb      	ldr	r3, [r7, #12]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b08b      	sub	sp, #44	; 0x2c
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	460b      	mov	r3, r1
 8006d64:	80fb      	strh	r3, [r7, #6]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d6a:	88bb      	ldrh	r3, [r7, #4]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d84:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8a:	e01b      	b.n	8006dc4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3301      	adds	r3, #1
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	b21a      	sxth	r2, r3
 8006d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b21b      	sxth	r3, r3
 8006da4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	8a7a      	ldrh	r2, [r7, #18]
 8006daa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	3302      	adds	r3, #2
 8006db0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	3301      	adds	r3, #1
 8006db6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e0      	bne.n	8006d8c <USB_WritePMA+0x38>
  }
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	372c      	adds	r7, #44	; 0x2c
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b08b      	sub	sp, #44	; 0x2c
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4611      	mov	r1, r2
 8006de4:	461a      	mov	r2, r3
 8006de6:	460b      	mov	r3, r1
 8006de8:	80fb      	strh	r3, [r7, #6]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006dee:	88bb      	ldrh	r3, [r7, #4]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0e:	e018      	b.n	8006e42 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e3      	bne.n	8006e10 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006e48:	88bb      	ldrh	r3, [r7, #4]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	701a      	strb	r2, [r3, #0]
  }
}
 8006e64:	bf00      	nop
 8006e66:	372c      	adds	r7, #44	; 0x2c
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e80:	f002 f8fc 	bl	800907c <USBD_static_malloc>
 8006e84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d105      	bne.n	8006e98 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006e94:	2302      	movs	r3, #2
 8006e96:	e066      	b.n	8006f66 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7c1b      	ldrb	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d119      	bne.n	8006edc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eac:	2202      	movs	r2, #2
 8006eae:	2181      	movs	r1, #129	; 0x81
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 ff8a 	bl	8008dca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 ff80 	bl	8008dca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006eda:	e016      	b.n	8006f0a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006edc:	2340      	movs	r3, #64	; 0x40
 8006ede:	2202      	movs	r2, #2
 8006ee0:	2181      	movs	r1, #129	; 0x81
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 ff71 	bl	8008dca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 ff68 	bl	8008dca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2210      	movs	r2, #16
 8006f06:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	2182      	movs	r1, #130	; 0x82
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 ff5a 	bl	8008dca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7c1b      	ldrb	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 f82b 	bl	8008fa8 <USBD_LL_PrepareReceive>
 8006f52:	e007      	b.n	8006f64 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f5a:	2340      	movs	r3, #64	; 0x40
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 f822 	bl	8008fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f7a:	2181      	movs	r1, #129	; 0x81
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 ff4a 	bl	8008e16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f88:	2101      	movs	r1, #1
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 ff43 	bl	8008e16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f98:	2182      	movs	r1, #130	; 0x82
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 ff3b 	bl	8008e16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00e      	beq.n	8006fd8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f002 f864 	bl	8009098 <USBD_static_free>
    pdev->pClassData = NULL;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007008:	2303      	movs	r3, #3
 800700a:	e0af      	b.n	800716c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007014:	2b00      	cmp	r3, #0
 8007016:	d03f      	beq.n	8007098 <USBD_CDC_Setup+0xb4>
 8007018:	2b20      	cmp	r3, #32
 800701a:	f040 809f 	bne.w	800715c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	88db      	ldrh	r3, [r3, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02e      	beq.n	8007084 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	b25b      	sxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	da16      	bge.n	800705e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800703c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	88d2      	ldrh	r2, [r2, #6]
 8007042:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	88db      	ldrh	r3, [r3, #6]
 8007048:	2b07      	cmp	r3, #7
 800704a:	bf28      	it	cs
 800704c:	2307      	movcs	r3, #7
 800704e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	89fa      	ldrh	r2, [r7, #14]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 facf 	bl	80085fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800705c:	e085      	b.n	800716a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785a      	ldrb	r2, [r3, #1]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	88db      	ldrh	r3, [r3, #6]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007074:	6939      	ldr	r1, [r7, #16]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	88db      	ldrh	r3, [r3, #6]
 800707a:	461a      	mov	r2, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fae8 	bl	8008652 <USBD_CtlPrepareRx>
      break;
 8007082:	e072      	b.n	800716a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	7850      	ldrb	r0, [r2, #1]
 8007090:	2200      	movs	r2, #0
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	4798      	blx	r3
      break;
 8007096:	e068      	b.n	800716a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b0b      	cmp	r3, #11
 800709e:	d852      	bhi.n	8007146 <USBD_CDC_Setup+0x162>
 80070a0:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <USBD_CDC_Setup+0xc4>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	08007155 	.word	0x08007155
 80070b0:	08007147 	.word	0x08007147
 80070b4:	08007147 	.word	0x08007147
 80070b8:	08007147 	.word	0x08007147
 80070bc:	08007147 	.word	0x08007147
 80070c0:	08007147 	.word	0x08007147
 80070c4:	08007147 	.word	0x08007147
 80070c8:	08007147 	.word	0x08007147
 80070cc:	08007147 	.word	0x08007147
 80070d0:	08007103 	.word	0x08007103
 80070d4:	0800712d 	.word	0x0800712d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d107      	bne.n	80070f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070e4:	f107 030a 	add.w	r3, r7, #10
 80070e8:	2202      	movs	r2, #2
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fa84 	bl	80085fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070f2:	e032      	b.n	800715a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fa0e 	bl	8008518 <USBD_CtlError>
            ret = USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007100:	e02b      	b.n	800715a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b03      	cmp	r3, #3
 800710c:	d107      	bne.n	800711e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800710e:	f107 030d 	add.w	r3, r7, #13
 8007112:	2201      	movs	r2, #1
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fa6f 	bl	80085fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800711c:	e01d      	b.n	800715a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f9f9 	bl	8008518 <USBD_CtlError>
            ret = USBD_FAIL;
 8007126:	2303      	movs	r3, #3
 8007128:	75fb      	strb	r3, [r7, #23]
          break;
 800712a:	e016      	b.n	800715a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b03      	cmp	r3, #3
 8007136:	d00f      	beq.n	8007158 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 f9ec 	bl	8008518 <USBD_CtlError>
            ret = USBD_FAIL;
 8007140:	2303      	movs	r3, #3
 8007142:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007144:	e008      	b.n	8007158 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 f9e5 	bl	8008518 <USBD_CtlError>
          ret = USBD_FAIL;
 800714e:	2303      	movs	r3, #3
 8007150:	75fb      	strb	r3, [r7, #23]
          break;
 8007152:	e002      	b.n	800715a <USBD_CDC_Setup+0x176>
          break;
 8007154:	bf00      	nop
 8007156:	e008      	b.n	800716a <USBD_CDC_Setup+0x186>
          break;
 8007158:	bf00      	nop
      }
      break;
 800715a:	e006      	b.n	800716a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 f9da 	bl	8008518 <USBD_CtlError>
      ret = USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	75fb      	strb	r3, [r7, #23]
      break;
 8007168:	bf00      	nop
  }

  return (uint8_t)ret;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007186:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007192:	2303      	movs	r3, #3
 8007194:	e04f      	b.n	8007236 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800719c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	440b      	add	r3, r1
 80071ac:	3318      	adds	r3, #24
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d029      	beq.n	8007208 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071b4:	78fa      	ldrb	r2, [r7, #3]
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	3318      	adds	r3, #24
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	78f9      	ldrb	r1, [r7, #3]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	460b      	mov	r3, r1
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4403      	add	r3, r0
 80071d4:	3320      	adds	r3, #32
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d110      	bne.n	8007208 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	440b      	add	r3, r1
 80071f4:	3318      	adds	r3, #24
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80071fa:	78f9      	ldrb	r1, [r7, #3]
 80071fc:	2300      	movs	r3, #0
 80071fe:	2200      	movs	r2, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 feb0 	bl	8008f66 <USBD_LL_Transmit>
 8007206:	e015      	b.n	8007234 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007250:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	e015      	b.n	800728c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 fec0 	bl	8008fea <USBD_LL_GetRxDataSize>
 800726a:	4602      	mov	r2, r0
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007286:	4611      	mov	r1, r2
 8007288:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e01b      	b.n	80072e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d015      	beq.n	80072e4 <USBD_CDC_EP0_RxReady+0x50>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072be:	2bff      	cmp	r3, #255	; 0xff
 80072c0:	d010      	beq.n	80072e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80072d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072d8:	b292      	uxth	r2, r2
 80072da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2243      	movs	r2, #67	; 0x43
 80072fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80072fe:	4b03      	ldr	r3, [pc, #12]	; (800730c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20000094 	.word	0x20000094

08007310 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2243      	movs	r2, #67	; 0x43
 800731c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800731e:	4b03      	ldr	r3, [pc, #12]	; (800732c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20000050 	.word	0x20000050

08007330 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2243      	movs	r2, #67	; 0x43
 800733c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800733e:	4b03      	ldr	r3, [pc, #12]	; (800734c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	200000d8 	.word	0x200000d8

08007350 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	220a      	movs	r2, #10
 800735c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800735e:	4b03      	ldr	r3, [pc, #12]	; (800736c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	2000000c 	.word	0x2000000c

08007370 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e004      	b.n	800738e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800739a:	b480      	push	{r7}
 800739c:	b087      	sub	sp, #28
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e008      	b.n	80073ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e004      	b.n	80073fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007416:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007418:	2301      	movs	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007426:	2303      	movs	r3, #3
 8007428:	e01a      	b.n	8007460 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007430:	2b00      	cmp	r3, #0
 8007432:	d114      	bne.n	800745e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2201      	movs	r2, #1
 8007438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007452:	2181      	movs	r1, #129	; 0x81
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 fd86 	bl	8008f66 <USBD_LL_Transmit>

    ret = USBD_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007476:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007482:	2303      	movs	r3, #3
 8007484:	e016      	b.n	80074b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7c1b      	ldrb	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007498:	2101      	movs	r1, #1
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 fd84 	bl	8008fa8 <USBD_LL_PrepareReceive>
 80074a0:	e007      	b.n	80074b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	2101      	movs	r1, #1
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fd7b 	bl	8008fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e01f      	b.n	8007514 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	79fa      	ldrb	r2, [r7, #7]
 8007506:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 fbe3 	bl	8008cd4 <USBD_LL_Init>
 800750e:	4603      	mov	r3, r0
 8007510:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007512:	7dfb      	ldrb	r3, [r7, #23]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	e016      	b.n	8007562 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	f107 020e 	add.w	r2, r7, #14
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	4602      	mov	r2, r0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fc0e 	bl	8008d94 <USBD_LL_Start>
 8007578:	4603      	mov	r3, r0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d009      	beq.n	80075c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	4611      	mov	r1, r2
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	78fa      	ldrb	r2, [r7, #3]
 80075f0:	4611      	mov	r1, r2
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
  }

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 ff46 	bl	80084a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2b02      	cmp	r3, #2
 800763a:	d01a      	beq.n	8007672 <USBD_LL_SetupStage+0x72>
 800763c:	2b02      	cmp	r3, #2
 800763e:	d822      	bhi.n	8007686 <USBD_LL_SetupStage+0x86>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <USBD_LL_SetupStage+0x4a>
 8007644:	2b01      	cmp	r3, #1
 8007646:	d00a      	beq.n	800765e <USBD_LL_SetupStage+0x5e>
 8007648:	e01d      	b.n	8007686 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f9ee 	bl	8007a34 <USBD_StdDevReq>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
      break;
 800765c:	e020      	b.n	80076a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa52 	bl	8007b10 <USBD_StdItfReq>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
      break;
 8007670:	e016      	b.n	80076a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa91 	bl	8007ba2 <USBD_StdEPReq>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
      break;
 8007684:	e00c      	b.n	80076a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800768c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007690:	b2db      	uxtb	r3, r3
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fbdd 	bl	8008e54 <USBD_LL_StallEP>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
      break;
 800769e:	bf00      	nop
  }

  return ret;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b086      	sub	sp, #24
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	460b      	mov	r3, r1
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d138      	bne.n	8007730 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d14a      	bne.n	8007766 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d913      	bls.n	8007704 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	1ad2      	subs	r2, r2, r3
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	4293      	cmp	r3, r2
 80076f4:	bf28      	it	cs
 80076f6:	4613      	movcs	r3, r2
 80076f8:	461a      	mov	r2, r3
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 ffc5 	bl	800868c <USBD_CtlContinueRx>
 8007702:	e030      	b.n	8007766 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b03      	cmp	r3, #3
 800770e:	d10b      	bne.n	8007728 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 ffc0 	bl	80086ae <USBD_CtlSendStatus>
 800772e:	e01a      	b.n	8007766 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b03      	cmp	r3, #3
 800773a:	d114      	bne.n	8007766 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	7afa      	ldrb	r2, [r7, #11]
 8007752:	4611      	mov	r1, r2
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	4798      	blx	r3
 8007758:	4603      	mov	r3, r0
 800775a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	e000      	b.n	8007768 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	460b      	mov	r3, r1
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d16b      	bne.n	800785c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3314      	adds	r3, #20
 8007788:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007790:	2b02      	cmp	r3, #2
 8007792:	d156      	bne.n	8007842 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	429a      	cmp	r2, r3
 800779e:	d914      	bls.n	80077ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	1ad2      	subs	r2, r2, r3
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 ff3a 	bl	8008630 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077bc:	2300      	movs	r3, #0
 80077be:	2200      	movs	r2, #0
 80077c0:	2100      	movs	r1, #0
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f001 fbf0 	bl	8008fa8 <USBD_LL_PrepareReceive>
 80077c8:	e03b      	b.n	8007842 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d11c      	bne.n	8007810 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077de:	429a      	cmp	r2, r3
 80077e0:	d316      	bcc.n	8007810 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d20f      	bcs.n	8007810 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077f0:	2200      	movs	r2, #0
 80077f2:	2100      	movs	r1, #0
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 ff1b 	bl	8008630 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007802:	2300      	movs	r3, #0
 8007804:	2200      	movs	r2, #0
 8007806:	2100      	movs	r1, #0
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f001 fbcd 	bl	8008fa8 <USBD_LL_PrepareReceive>
 800780e:	e018      	b.n	8007842 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d10b      	bne.n	8007834 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007834:	2180      	movs	r1, #128	; 0x80
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f001 fb0c 	bl	8008e54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 ff49 	bl	80086d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d122      	bne.n	8007892 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7ff fe98 	bl	8007582 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800785a:	e01a      	b.n	8007892 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b03      	cmp	r3, #3
 8007866:	d114      	bne.n	8007892 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00e      	beq.n	8007892 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	7afa      	ldrb	r2, [r7, #11]
 800787e:	4611      	mov	r1, r2
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	4798      	blx	r3
 8007884:	4603      	mov	r3, r0
 8007886:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	e000      	b.n	8007894 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e02f      	b.n	8007930 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00f      	beq.n	80078fa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6852      	ldr	r2, [r2, #4]
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	4611      	mov	r1, r2
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078fa:	2340      	movs	r3, #64	; 0x40
 80078fc:	2200      	movs	r2, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fa62 	bl	8008dca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2240      	movs	r2, #64	; 0x40
 8007912:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007916:	2340      	movs	r3, #64	; 0x40
 8007918:	2200      	movs	r2, #0
 800791a:	2180      	movs	r1, #128	; 0x80
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fa54 	bl	8008dca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2240      	movs	r2, #64	; 0x40
 800792c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007966:	b2da      	uxtb	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2204      	movs	r2, #4
 8007972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b04      	cmp	r3, #4
 8007996:	d106      	bne.n	80079a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e012      	b.n	80079f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d10b      	bne.n	80079ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a16:	8a3b      	ldrh	r3, [r7, #16]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	b21a      	sxth	r2, r3
 8007a1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	b21b      	sxth	r3, r3
 8007a24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a26:	89fb      	ldrh	r3, [r7, #14]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d005      	beq.n	8007a5a <USBD_StdDevReq+0x26>
 8007a4e:	2b40      	cmp	r3, #64	; 0x40
 8007a50:	d853      	bhi.n	8007afa <USBD_StdDevReq+0xc6>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <USBD_StdDevReq+0x3a>
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d14f      	bne.n	8007afa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	e04a      	b.n	8007b04 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	785b      	ldrb	r3, [r3, #1]
 8007a72:	2b09      	cmp	r3, #9
 8007a74:	d83b      	bhi.n	8007aee <USBD_StdDevReq+0xba>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <USBD_StdDevReq+0x48>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007ae5 	.word	0x08007ae5
 8007a84:	08007aef 	.word	0x08007aef
 8007a88:	08007adb 	.word	0x08007adb
 8007a8c:	08007aef 	.word	0x08007aef
 8007a90:	08007aaf 	.word	0x08007aaf
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007aef 	.word	0x08007aef
 8007a9c:	08007ac7 	.word	0x08007ac7
 8007aa0:	08007ab9 	.word	0x08007ab9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f9de 	bl	8007e68 <USBD_GetDescriptor>
          break;
 8007aac:	e024      	b.n	8007af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fb6d 	bl	8008190 <USBD_SetAddress>
          break;
 8007ab6:	e01f      	b.n	8007af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fbac 	bl	8008218 <USBD_SetConfig>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]
          break;
 8007ac4:	e018      	b.n	8007af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc4b 	bl	8008364 <USBD_GetConfig>
          break;
 8007ace:	e013      	b.n	8007af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fc7c 	bl	80083d0 <USBD_GetStatus>
          break;
 8007ad8:	e00e      	b.n	8007af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fcab 	bl	8008438 <USBD_SetFeature>
          break;
 8007ae2:	e009      	b.n	8007af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fcba 	bl	8008460 <USBD_ClrFeature>
          break;
 8007aec:	e004      	b.n	8007af8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fd11 	bl	8008518 <USBD_CtlError>
          break;
 8007af6:	bf00      	nop
      }
      break;
 8007af8:	e004      	b.n	8007b04 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fd0b 	bl	8008518 <USBD_CtlError>
      break;
 8007b02:	bf00      	nop
  }

  return ret;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d005      	beq.n	8007b36 <USBD_StdItfReq+0x26>
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d82f      	bhi.n	8007b8e <USBD_StdItfReq+0x7e>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <USBD_StdItfReq+0x26>
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d12b      	bne.n	8007b8e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d81d      	bhi.n	8007b80 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	889b      	ldrh	r3, [r3, #4]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d813      	bhi.n	8007b76 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	88db      	ldrh	r3, [r3, #6]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d110      	bne.n	8007b8a <USBD_StdItfReq+0x7a>
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fd9d 	bl	80086ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b74:	e009      	b.n	8007b8a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fccd 	bl	8008518 <USBD_CtlError>
          break;
 8007b7e:	e004      	b.n	8007b8a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fcc8 	bl	8008518 <USBD_CtlError>
          break;
 8007b88:	e000      	b.n	8007b8c <USBD_StdItfReq+0x7c>
          break;
 8007b8a:	bf00      	nop
      }
      break;
 8007b8c:	e004      	b.n	8007b98 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fcc1 	bl	8008518 <USBD_CtlError>
      break;
 8007b96:	bf00      	nop
  }

  return ret;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	889b      	ldrh	r3, [r3, #4]
 8007bb4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d007      	beq.n	8007bd2 <USBD_StdEPReq+0x30>
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	f200 8145 	bhi.w	8007e52 <USBD_StdEPReq+0x2b0>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <USBD_StdEPReq+0x44>
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	f040 8140 	bne.w	8007e52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	4798      	blx	r3
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
      break;
 8007be4:	e13a      	b.n	8007e5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d007      	beq.n	8007bfe <USBD_StdEPReq+0x5c>
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	f300 8129 	bgt.w	8007e46 <USBD_StdEPReq+0x2a4>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d07f      	beq.n	8007cf8 <USBD_StdEPReq+0x156>
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d03c      	beq.n	8007c76 <USBD_StdEPReq+0xd4>
 8007bfc:	e123      	b.n	8007e46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d002      	beq.n	8007c10 <USBD_StdEPReq+0x6e>
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d016      	beq.n	8007c3c <USBD_StdEPReq+0x9a>
 8007c0e:	e02c      	b.n	8007c6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00d      	beq.n	8007c32 <USBD_StdEPReq+0x90>
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b80      	cmp	r3, #128	; 0x80
 8007c1a:	d00a      	beq.n	8007c32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f917 	bl	8008e54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c26:	2180      	movs	r1, #128	; 0x80
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f913 	bl	8008e54 <USBD_LL_StallEP>
 8007c2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c30:	e020      	b.n	8007c74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fc6f 	bl	8008518 <USBD_CtlError>
              break;
 8007c3a:	e01b      	b.n	8007c74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	885b      	ldrh	r3, [r3, #2]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10e      	bne.n	8007c62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00b      	beq.n	8007c62 <USBD_StdEPReq+0xc0>
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b80      	cmp	r3, #128	; 0x80
 8007c4e:	d008      	beq.n	8007c62 <USBD_StdEPReq+0xc0>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	88db      	ldrh	r3, [r3, #6]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 f8f9 	bl	8008e54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fd23 	bl	80086ae <USBD_CtlSendStatus>

              break;
 8007c68:	e004      	b.n	8007c74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fc53 	bl	8008518 <USBD_CtlError>
              break;
 8007c72:	bf00      	nop
          }
          break;
 8007c74:	e0ec      	b.n	8007e50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d002      	beq.n	8007c88 <USBD_StdEPReq+0xe6>
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d016      	beq.n	8007cb4 <USBD_StdEPReq+0x112>
 8007c86:	e030      	b.n	8007cea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00d      	beq.n	8007caa <USBD_StdEPReq+0x108>
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b80      	cmp	r3, #128	; 0x80
 8007c92:	d00a      	beq.n	8007caa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 f8db 	bl	8008e54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c9e:	2180      	movs	r1, #128	; 0x80
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f8d7 	bl	8008e54 <USBD_LL_StallEP>
 8007ca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ca8:	e025      	b.n	8007cf6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc33 	bl	8008518 <USBD_CtlError>
              break;
 8007cb2:	e020      	b.n	8007cf6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	885b      	ldrh	r3, [r3, #2]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11b      	bne.n	8007cf4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d004      	beq.n	8007cd0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f8e1 	bl	8008e92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fcec 	bl	80086ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007ce8:	e004      	b.n	8007cf4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc13 	bl	8008518 <USBD_CtlError>
              break;
 8007cf2:	e000      	b.n	8007cf6 <USBD_StdEPReq+0x154>
              break;
 8007cf4:	bf00      	nop
          }
          break;
 8007cf6:	e0ab      	b.n	8007e50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d002      	beq.n	8007d0a <USBD_StdEPReq+0x168>
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d032      	beq.n	8007d6e <USBD_StdEPReq+0x1cc>
 8007d08:	e097      	b.n	8007e3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <USBD_StdEPReq+0x17e>
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	d004      	beq.n	8007d20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fbfd 	bl	8008518 <USBD_CtlError>
                break;
 8007d1e:	e091      	b.n	8007e44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	da0b      	bge.n	8007d40 <USBD_StdEPReq+0x19e>
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	3310      	adds	r3, #16
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	e00b      	b.n	8007d58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	4413      	add	r3, r2
 8007d56:	3304      	adds	r3, #4
 8007d58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2202      	movs	r2, #2
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fc47 	bl	80085fa <USBD_CtlSendData>
              break;
 8007d6c:	e06a      	b.n	8007e44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	da11      	bge.n	8007d9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3324      	adds	r3, #36	; 0x24
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d117      	bne.n	8007dc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fbc0 	bl	8008518 <USBD_CtlError>
                  break;
 8007d98:	e054      	b.n	8007e44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	f003 020f 	and.w	r2, r3, #15
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fbad 	bl	8008518 <USBD_CtlError>
                  break;
 8007dbe:	e041      	b.n	8007e44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da0b      	bge.n	8007de0 <USBD_StdEPReq+0x23e>
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	3310      	adds	r3, #16
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	3304      	adds	r3, #4
 8007dde:	e00b      	b.n	8007df8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	3304      	adds	r3, #4
 8007df8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <USBD_StdEPReq+0x264>
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	2b80      	cmp	r3, #128	; 0x80
 8007e04:	d103      	bne.n	8007e0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	e00e      	b.n	8007e2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 f85c 	bl	8008ed0 <USBD_LL_IsStallEP>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e002      	b.n	8007e2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fbe1 	bl	80085fa <USBD_CtlSendData>
              break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fb6b 	bl	8008518 <USBD_CtlError>
              break;
 8007e42:	bf00      	nop
          }
          break;
 8007e44:	e004      	b.n	8007e50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fb65 	bl	8008518 <USBD_CtlError>
          break;
 8007e4e:	bf00      	nop
      }
      break;
 8007e50:	e004      	b.n	8007e5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fb5f 	bl	8008518 <USBD_CtlError>
      break;
 8007e5a:	bf00      	nop
  }

  return ret;
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	0a1b      	lsrs	r3, r3, #8
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	2b0e      	cmp	r3, #14
 8007e8a:	f200 8152 	bhi.w	8008132 <USBD_GetDescriptor+0x2ca>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <USBD_GetDescriptor+0x2c>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007f05 	.word	0x08007f05
 8007e98:	08007f1d 	.word	0x08007f1d
 8007e9c:	08007f5d 	.word	0x08007f5d
 8007ea0:	08008133 	.word	0x08008133
 8007ea4:	08008133 	.word	0x08008133
 8007ea8:	080080d3 	.word	0x080080d3
 8007eac:	080080ff 	.word	0x080080ff
 8007eb0:	08008133 	.word	0x08008133
 8007eb4:	08008133 	.word	0x08008133
 8007eb8:	08008133 	.word	0x08008133
 8007ebc:	08008133 	.word	0x08008133
 8007ec0:	08008133 	.word	0x08008133
 8007ec4:	08008133 	.word	0x08008133
 8007ec8:	08008133 	.word	0x08008133
 8007ecc:	08007ed1 	.word	0x08007ed1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c12      	ldrb	r2, [r2, #16]
 8007ee8:	f107 0108 	add.w	r1, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ef2:	e126      	b.n	8008142 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fb0e 	bl	8008518 <USBD_CtlError>
        err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
      break;
 8007f02:	e11e      	b.n	8008142 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	7c12      	ldrb	r2, [r2, #16]
 8007f10:	f107 0108 	add.w	r1, r7, #8
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	60f8      	str	r0, [r7, #12]
      break;
 8007f1a:	e112      	b.n	8008142 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	7c1b      	ldrb	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	f107 0208 	add.w	r2, r7, #8
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f3e:	e100      	b.n	8008142 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	f107 0208 	add.w	r2, r7, #8
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3301      	adds	r3, #1
 8007f56:	2202      	movs	r2, #2
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0f2      	b.n	8008142 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	885b      	ldrh	r3, [r3, #2]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	f200 80ac 	bhi.w	80080c0 <USBD_GetDescriptor+0x258>
 8007f68:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <USBD_GetDescriptor+0x108>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007f89 	.word	0x08007f89
 8007f74:	08007fbd 	.word	0x08007fbd
 8007f78:	08007ff1 	.word	0x08007ff1
 8007f7c:	08008025 	.word	0x08008025
 8007f80:	08008059 	.word	0x08008059
 8007f84:	0800808d 	.word	0x0800808d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	7c12      	ldrb	r2, [r2, #16]
 8007fa0:	f107 0108 	add.w	r1, r7, #8
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007faa:	e091      	b.n	80080d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fab2 	bl	8008518 <USBD_CtlError>
            err++;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fba:	e089      	b.n	80080d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	7c12      	ldrb	r2, [r2, #16]
 8007fd4:	f107 0108 	add.w	r1, r7, #8
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
 8007fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fde:	e077      	b.n	80080d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa98 	bl	8008518 <USBD_CtlError>
            err++;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	3301      	adds	r3, #1
 8007fec:	72fb      	strb	r3, [r7, #11]
          break;
 8007fee:	e06f      	b.n	80080d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	7c12      	ldrb	r2, [r2, #16]
 8008008:	f107 0108 	add.w	r1, r7, #8
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008012:	e05d      	b.n	80080d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa7e 	bl	8008518 <USBD_CtlError>
            err++;
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	3301      	adds	r3, #1
 8008020:	72fb      	strb	r3, [r7, #11]
          break;
 8008022:	e055      	b.n	80080d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 0108 	add.w	r1, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008046:	e043      	b.n	80080d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa64 	bl	8008518 <USBD_CtlError>
            err++;
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	3301      	adds	r3, #1
 8008054:	72fb      	strb	r3, [r7, #11]
          break;
 8008056:	e03b      	b.n	80080d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	7c12      	ldrb	r2, [r2, #16]
 8008070:	f107 0108 	add.w	r1, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807a:	e029      	b.n	80080d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa4a 	bl	8008518 <USBD_CtlError>
            err++;
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	3301      	adds	r3, #1
 8008088:	72fb      	strb	r3, [r7, #11]
          break;
 800808a:	e021      	b.n	80080d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ae:	e00f      	b.n	80080d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa30 	bl	8008518 <USBD_CtlError>
            err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
          break;
 80080be:	e007      	b.n	80080d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa28 	bl	8008518 <USBD_CtlError>
          err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80080ce:	bf00      	nop
      }
      break;
 80080d0:	e037      	b.n	8008142 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7c1b      	ldrb	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	f107 0208 	add.w	r2, r7, #8
 80080e6:	4610      	mov	r0, r2
 80080e8:	4798      	blx	r3
 80080ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080ec:	e029      	b.n	8008142 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fa11 	bl	8008518 <USBD_CtlError>
        err++;
 80080f6:	7afb      	ldrb	r3, [r7, #11]
 80080f8:	3301      	adds	r3, #1
 80080fa:	72fb      	strb	r3, [r7, #11]
      break;
 80080fc:	e021      	b.n	8008142 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7c1b      	ldrb	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10d      	bne.n	8008122 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	f107 0208 	add.w	r2, r7, #8
 8008112:	4610      	mov	r0, r2
 8008114:	4798      	blx	r3
 8008116:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	2207      	movs	r2, #7
 800811e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008120:	e00f      	b.n	8008142 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f9f7 	bl	8008518 <USBD_CtlError>
        err++;
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	3301      	adds	r3, #1
 800812e:	72fb      	strb	r3, [r7, #11]
      break;
 8008130:	e007      	b.n	8008142 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f9ef 	bl	8008518 <USBD_CtlError>
      err++;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	3301      	adds	r3, #1
 800813e:	72fb      	strb	r3, [r7, #11]
      break;
 8008140:	bf00      	nop
  }

  if (err != 0U)
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d11e      	bne.n	8008186 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d016      	beq.n	800817e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008150:	893b      	ldrh	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00e      	beq.n	8008174 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	88da      	ldrh	r2, [r3, #6]
 800815a:	893b      	ldrh	r3, [r7, #8]
 800815c:	4293      	cmp	r3, r2
 800815e:	bf28      	it	cs
 8008160:	4613      	movcs	r3, r2
 8008162:	b29b      	uxth	r3, r3
 8008164:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008166:	893b      	ldrh	r3, [r7, #8]
 8008168:	461a      	mov	r2, r3
 800816a:	68f9      	ldr	r1, [r7, #12]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fa44 	bl	80085fa <USBD_CtlSendData>
 8008172:	e009      	b.n	8008188 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9ce 	bl	8008518 <USBD_CtlError>
 800817c:	e004      	b.n	8008188 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa95 	bl	80086ae <USBD_CtlSendStatus>
 8008184:	e000      	b.n	8008188 <USBD_GetDescriptor+0x320>
    return;
 8008186:	bf00      	nop
  }
}
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop

08008190 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	889b      	ldrh	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d131      	bne.n	8008206 <USBD_SetAddress+0x76>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	88db      	ldrh	r3, [r3, #6]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d12d      	bne.n	8008206 <USBD_SetAddress+0x76>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	885b      	ldrh	r3, [r3, #2]
 80081ae:	2b7f      	cmp	r3, #127	; 0x7f
 80081b0:	d829      	bhi.n	8008206 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	885b      	ldrh	r3, [r3, #2]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d104      	bne.n	80081d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f9a3 	bl	8008518 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d2:	e01d      	b.n	8008210 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7bfa      	ldrb	r2, [r7, #15]
 80081d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fea1 	bl	8008f28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa61 	bl	80086ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fa:	e009      	b.n	8008210 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008204:	e004      	b.n	8008210 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f985 	bl	8008518 <USBD_CtlError>
  }
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	4b4c      	ldr	r3, [pc, #304]	; (8008360 <USBD_SetConfig+0x148>)
 800822e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008230:	4b4b      	ldr	r3, [pc, #300]	; (8008360 <USBD_SetConfig+0x148>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d905      	bls.n	8008244 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f96c 	bl	8008518 <USBD_CtlError>
    return USBD_FAIL;
 8008240:	2303      	movs	r3, #3
 8008242:	e088      	b.n	8008356 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d002      	beq.n	8008256 <USBD_SetConfig+0x3e>
 8008250:	2b03      	cmp	r3, #3
 8008252:	d025      	beq.n	80082a0 <USBD_SetConfig+0x88>
 8008254:	e071      	b.n	800833a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008256:	4b42      	ldr	r3, [pc, #264]	; (8008360 <USBD_SetConfig+0x148>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01c      	beq.n	8008298 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800825e:	4b40      	ldr	r3, [pc, #256]	; (8008360 <USBD_SetConfig+0x148>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008268:	4b3d      	ldr	r3, [pc, #244]	; (8008360 <USBD_SetConfig+0x148>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff f992 	bl	8007598 <USBD_SetClassConfig>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d004      	beq.n	8008288 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f949 	bl	8008518 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008286:	e065      	b.n	8008354 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fa10 	bl	80086ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2203      	movs	r2, #3
 8008292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008296:	e05d      	b.n	8008354 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa08 	bl	80086ae <USBD_CtlSendStatus>
      break;
 800829e:	e059      	b.n	8008354 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082a0:	4b2f      	ldr	r3, [pc, #188]	; (8008360 <USBD_SetConfig+0x148>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d112      	bne.n	80082ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082b0:	4b2b      	ldr	r3, [pc, #172]	; (8008360 <USBD_SetConfig+0x148>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082ba:	4b29      	ldr	r3, [pc, #164]	; (8008360 <USBD_SetConfig+0x148>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff f985 	bl	80075d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f9f1 	bl	80086ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082cc:	e042      	b.n	8008354 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80082ce:	4b24      	ldr	r3, [pc, #144]	; (8008360 <USBD_SetConfig+0x148>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d02a      	beq.n	8008332 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff f973 	bl	80075d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80082ea:	4b1d      	ldr	r3, [pc, #116]	; (8008360 <USBD_SetConfig+0x148>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082f4:	4b1a      	ldr	r3, [pc, #104]	; (8008360 <USBD_SetConfig+0x148>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff f94c 	bl	8007598 <USBD_SetClassConfig>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00f      	beq.n	800832a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f903 	bl	8008518 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff f958 	bl	80075d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008328:	e014      	b.n	8008354 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f9bf 	bl	80086ae <USBD_CtlSendStatus>
      break;
 8008330:	e010      	b.n	8008354 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9bb 	bl	80086ae <USBD_CtlSendStatus>
      break;
 8008338:	e00c      	b.n	8008354 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f8eb 	bl	8008518 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <USBD_SetConfig+0x148>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff f941 	bl	80075d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800834e:	2303      	movs	r3, #3
 8008350:	73fb      	strb	r3, [r7, #15]
      break;
 8008352:	bf00      	nop
  }

  return ret;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20000238 	.word	0x20000238

08008364 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	88db      	ldrh	r3, [r3, #6]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d004      	beq.n	8008380 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f8cd 	bl	8008518 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800837e:	e023      	b.n	80083c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	dc02      	bgt.n	8008392 <USBD_GetConfig+0x2e>
 800838c:	2b00      	cmp	r3, #0
 800838e:	dc03      	bgt.n	8008398 <USBD_GetConfig+0x34>
 8008390:	e015      	b.n	80083be <USBD_GetConfig+0x5a>
 8008392:	2b03      	cmp	r3, #3
 8008394:	d00b      	beq.n	80083ae <USBD_GetConfig+0x4a>
 8008396:	e012      	b.n	80083be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3308      	adds	r3, #8
 80083a2:	2201      	movs	r2, #1
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f927 	bl	80085fa <USBD_CtlSendData>
        break;
 80083ac:	e00c      	b.n	80083c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3304      	adds	r3, #4
 80083b2:	2201      	movs	r2, #1
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f91f 	bl	80085fa <USBD_CtlSendData>
        break;
 80083bc:	e004      	b.n	80083c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f8a9 	bl	8008518 <USBD_CtlError>
        break;
 80083c6:	bf00      	nop
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d81e      	bhi.n	8008426 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	88db      	ldrh	r3, [r3, #6]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d004      	beq.n	80083fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f890 	bl	8008518 <USBD_CtlError>
        break;
 80083f8:	e01a      	b.n	8008430 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f043 0202 	orr.w	r2, r3, #2
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	330c      	adds	r3, #12
 800841a:	2202      	movs	r2, #2
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8eb 	bl	80085fa <USBD_CtlSendData>
      break;
 8008424:	e004      	b.n	8008430 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f875 	bl	8008518 <USBD_CtlError>
      break;
 800842e:	bf00      	nop
  }
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	885b      	ldrh	r3, [r3, #2]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d106      	bne.n	8008458 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f92b 	bl	80086ae <USBD_CtlSendStatus>
  }
}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008470:	b2db      	uxtb	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	2b02      	cmp	r3, #2
 8008476:	d80b      	bhi.n	8008490 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	885b      	ldrh	r3, [r3, #2]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d10c      	bne.n	800849a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f910 	bl	80086ae <USBD_CtlSendStatus>
      }
      break;
 800848e:	e004      	b.n	800849a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f840 	bl	8008518 <USBD_CtlError>
      break;
 8008498:	e000      	b.n	800849c <USBD_ClrFeature+0x3c>
      break;
 800849a:	bf00      	nop
  }
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3301      	adds	r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	781a      	ldrb	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3301      	adds	r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7ff fa92 	bl	80079f8 <SWAPBYTE>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3301      	adds	r3, #1
 80084e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff fa85 	bl	80079f8 <SWAPBYTE>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3301      	adds	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3301      	adds	r3, #1
 8008500:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7ff fa78 	bl	80079f8 <SWAPBYTE>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	80da      	strh	r2, [r3, #6]
}
 8008510:	bf00      	nop
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fc95 	bl	8008e54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800852a:	2100      	movs	r1, #0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fc91 	bl	8008e54 <USBD_LL_StallEP>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b086      	sub	sp, #24
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d036      	beq.n	80085be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008554:	6938      	ldr	r0, [r7, #16]
 8008556:	f000 f836 	bl	80085c6 <USBD_GetLen>
 800855a:	4603      	mov	r3, r0
 800855c:	3301      	adds	r3, #1
 800855e:	b29b      	uxth	r3, r3
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	701a      	strb	r2, [r3, #0]
  idx++;
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	3301      	adds	r3, #1
 8008578:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	4413      	add	r3, r2
 8008580:	2203      	movs	r2, #3
 8008582:	701a      	strb	r2, [r3, #0]
  idx++;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	3301      	adds	r3, #1
 8008588:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800858a:	e013      	b.n	80085b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800858c:	7dfb      	ldrb	r3, [r7, #23]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	4413      	add	r3, r2
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3301      	adds	r3, #1
 800859c:	613b      	str	r3, [r7, #16]
    idx++;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	3301      	adds	r3, #1
 80085a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	4413      	add	r3, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	3301      	adds	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e7      	bne.n	800858c <USBD_GetString+0x52>
 80085bc:	e000      	b.n	80085c0 <USBD_GetString+0x86>
    return;
 80085be:	bf00      	nop
  }
}
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b085      	sub	sp, #20
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085d6:	e005      	b.n	80085e4 <USBD_GetLen+0x1e>
  {
    len++;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	3301      	adds	r3, #1
 80085dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f5      	bne.n	80085d8 <USBD_GetLen+0x12>
  }

  return len;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2202      	movs	r2, #2
 800860a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	2100      	movs	r1, #0
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 fca0 	bl	8008f66 <USBD_LL_Transmit>

  return USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	2100      	movs	r1, #0
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 fc8f 	bl	8008f66 <USBD_LL_Transmit>

  return USBD_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2203      	movs	r2, #3
 8008662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	2100      	movs	r1, #0
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fc93 	bl	8008fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	2100      	movs	r1, #0
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fc82 	bl	8008fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2204      	movs	r2, #4
 80086ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086be:	2300      	movs	r3, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	2100      	movs	r1, #0
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fc4e 	bl	8008f66 <USBD_LL_Transmit>

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2205      	movs	r2, #5
 80086e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc5c 	bl	8008fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008700:	2200      	movs	r2, #0
 8008702:	4912      	ldr	r1, [pc, #72]	; (800874c <MX_USB_Device_Init+0x50>)
 8008704:	4812      	ldr	r0, [pc, #72]	; (8008750 <MX_USB_Device_Init+0x54>)
 8008706:	f7fe fed9 	bl	80074bc <USBD_Init>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008710:	f7f8 f844 	bl	800079c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008714:	490f      	ldr	r1, [pc, #60]	; (8008754 <MX_USB_Device_Init+0x58>)
 8008716:	480e      	ldr	r0, [pc, #56]	; (8008750 <MX_USB_Device_Init+0x54>)
 8008718:	f7fe ff00 	bl	800751c <USBD_RegisterClass>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008722:	f7f8 f83b 	bl	800079c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008726:	490c      	ldr	r1, [pc, #48]	; (8008758 <MX_USB_Device_Init+0x5c>)
 8008728:	4809      	ldr	r0, [pc, #36]	; (8008750 <MX_USB_Device_Init+0x54>)
 800872a:	f7fe fe21 	bl	8007370 <USBD_CDC_RegisterInterface>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008734:	f7f8 f832 	bl	800079c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008738:	4805      	ldr	r0, [pc, #20]	; (8008750 <MX_USB_Device_Init+0x54>)
 800873a:	f7fe ff16 	bl	800756a <USBD_Start>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008744:	f7f8 f82a 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008748:	bf00      	nop
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20000130 	.word	0x20000130
 8008750:	2000023c 	.word	0x2000023c
 8008754:	20000018 	.word	0x20000018
 8008758:	2000011c 	.word	0x2000011c

0800875c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008760:	2200      	movs	r2, #0
 8008762:	4905      	ldr	r1, [pc, #20]	; (8008778 <CDC_Init_FS+0x1c>)
 8008764:	4805      	ldr	r0, [pc, #20]	; (800877c <CDC_Init_FS+0x20>)
 8008766:	f7fe fe18 	bl	800739a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800876a:	4905      	ldr	r1, [pc, #20]	; (8008780 <CDC_Init_FS+0x24>)
 800876c:	4803      	ldr	r0, [pc, #12]	; (800877c <CDC_Init_FS+0x20>)
 800876e:	f7fe fe32 	bl	80073d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008772:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008774:	4618      	mov	r0, r3
 8008776:	bd80      	pop	{r7, pc}
 8008778:	200008f4 	.word	0x200008f4
 800877c:	2000023c 	.word	0x2000023c
 8008780:	2000050c 	.word	0x2000050c

08008784 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008788:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800878a:	4618      	mov	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	6039      	str	r1, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
 80087a0:	4613      	mov	r3, r2
 80087a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	2b23      	cmp	r3, #35	; 0x23
 80087a8:	d84a      	bhi.n	8008840 <CDC_Control_FS+0xac>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <CDC_Control_FS+0x1c>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	08008841 	.word	0x08008841
 80087b4:	08008841 	.word	0x08008841
 80087b8:	08008841 	.word	0x08008841
 80087bc:	08008841 	.word	0x08008841
 80087c0:	08008841 	.word	0x08008841
 80087c4:	08008841 	.word	0x08008841
 80087c8:	08008841 	.word	0x08008841
 80087cc:	08008841 	.word	0x08008841
 80087d0:	08008841 	.word	0x08008841
 80087d4:	08008841 	.word	0x08008841
 80087d8:	08008841 	.word	0x08008841
 80087dc:	08008841 	.word	0x08008841
 80087e0:	08008841 	.word	0x08008841
 80087e4:	08008841 	.word	0x08008841
 80087e8:	08008841 	.word	0x08008841
 80087ec:	08008841 	.word	0x08008841
 80087f0:	08008841 	.word	0x08008841
 80087f4:	08008841 	.word	0x08008841
 80087f8:	08008841 	.word	0x08008841
 80087fc:	08008841 	.word	0x08008841
 8008800:	08008841 	.word	0x08008841
 8008804:	08008841 	.word	0x08008841
 8008808:	08008841 	.word	0x08008841
 800880c:	08008841 	.word	0x08008841
 8008810:	08008841 	.word	0x08008841
 8008814:	08008841 	.word	0x08008841
 8008818:	08008841 	.word	0x08008841
 800881c:	08008841 	.word	0x08008841
 8008820:	08008841 	.word	0x08008841
 8008824:	08008841 	.word	0x08008841
 8008828:	08008841 	.word	0x08008841
 800882c:	08008841 	.word	0x08008841
 8008830:	08008841 	.word	0x08008841
 8008834:	08008841 	.word	0x08008841
 8008838:	08008841 	.word	0x08008841
 800883c:	08008841 	.word	0x08008841
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008840:	bf00      	nop
  }

  return (USBD_OK);
 8008842:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4805      	ldr	r0, [pc, #20]	; (8008874 <CDC_Receive_FS+0x24>)
 800885e:	f7fe fdba 	bl	80073d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008862:	4804      	ldr	r0, [pc, #16]	; (8008874 <CDC_Receive_FS+0x24>)
 8008864:	f7fe fe00 	bl	8007468 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008868:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	2000023c 	.word	0x2000023c

08008878 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008888:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <CDC_Transmit_FS+0x48>)
 800888a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800888e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800889a:	2301      	movs	r3, #1
 800889c:	e00b      	b.n	80088b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800889e:	887b      	ldrh	r3, [r7, #2]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	4806      	ldr	r0, [pc, #24]	; (80088c0 <CDC_Transmit_FS+0x48>)
 80088a6:	f7fe fd78 	bl	800739a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80088aa:	4805      	ldr	r0, [pc, #20]	; (80088c0 <CDC_Transmit_FS+0x48>)
 80088ac:	f7fe fdac 	bl	8007408 <USBD_CDC_TransmitPacket>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	2000023c 	.word	0x2000023c

080088c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80088d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	6039      	str	r1, [r7, #0]
 80088f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2212      	movs	r2, #18
 80088f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80088fa:	4b03      	ldr	r3, [pc, #12]	; (8008908 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	20000150 	.word	0x20000150

0800890c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	6039      	str	r1, [r7, #0]
 8008916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2204      	movs	r2, #4
 800891c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800891e:	4b03      	ldr	r3, [pc, #12]	; (800892c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	20000164 	.word	0x20000164

08008930 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	6039      	str	r1, [r7, #0]
 800893a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d105      	bne.n	800894e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	4907      	ldr	r1, [pc, #28]	; (8008964 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008946:	4808      	ldr	r0, [pc, #32]	; (8008968 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008948:	f7ff fdf7 	bl	800853a <USBD_GetString>
 800894c:	e004      	b.n	8008958 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	4904      	ldr	r1, [pc, #16]	; (8008964 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008952:	4805      	ldr	r0, [pc, #20]	; (8008968 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008954:	f7ff fdf1 	bl	800853a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000cdc 	.word	0x20000cdc
 8008968:	08009190 	.word	0x08009190

0800896c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	6039      	str	r1, [r7, #0]
 8008976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	4904      	ldr	r1, [pc, #16]	; (800898c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800897c:	4804      	ldr	r0, [pc, #16]	; (8008990 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800897e:	f7ff fddc 	bl	800853a <USBD_GetString>
  return USBD_StrDesc;
 8008982:	4b02      	ldr	r3, [pc, #8]	; (800898c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000cdc 	.word	0x20000cdc
 8008990:	080091a8 	.word	0x080091a8

08008994 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	221a      	movs	r2, #26
 80089a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089a6:	f000 f843 	bl	8008a30 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80089aa:	4b02      	ldr	r3, [pc, #8]	; (80089b4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20000168 	.word	0x20000168

080089b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	6039      	str	r1, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d105      	bne.n	80089d6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	4907      	ldr	r1, [pc, #28]	; (80089ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80089ce:	4808      	ldr	r0, [pc, #32]	; (80089f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80089d0:	f7ff fdb3 	bl	800853a <USBD_GetString>
 80089d4:	e004      	b.n	80089e0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	4904      	ldr	r1, [pc, #16]	; (80089ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80089da:	4805      	ldr	r0, [pc, #20]	; (80089f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80089dc:	f7ff fdad 	bl	800853a <USBD_GetString>
  }
  return USBD_StrDesc;
 80089e0:	4b02      	ldr	r3, [pc, #8]	; (80089ec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20000cdc 	.word	0x20000cdc
 80089f0:	080091bc 	.word	0x080091bc

080089f4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	4603      	mov	r3, r0
 80089fc:	6039      	str	r1, [r7, #0]
 80089fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d105      	bne.n	8008a12 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4907      	ldr	r1, [pc, #28]	; (8008a28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008a0a:	4808      	ldr	r0, [pc, #32]	; (8008a2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008a0c:	f7ff fd95 	bl	800853a <USBD_GetString>
 8008a10:	e004      	b.n	8008a1c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	4904      	ldr	r1, [pc, #16]	; (8008a28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008a16:	4805      	ldr	r0, [pc, #20]	; (8008a2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008a18:	f7ff fd8f 	bl	800853a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a1c:	4b02      	ldr	r3, [pc, #8]	; (8008a28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20000cdc 	.word	0x20000cdc
 8008a2c:	080091c8 	.word	0x080091c8

08008a30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <Get_SerialNum+0x44>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a3c:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <Get_SerialNum+0x48>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a42:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <Get_SerialNum+0x4c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a56:	2208      	movs	r2, #8
 8008a58:	4909      	ldr	r1, [pc, #36]	; (8008a80 <Get_SerialNum+0x50>)
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f814 	bl	8008a88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a60:	2204      	movs	r2, #4
 8008a62:	4908      	ldr	r1, [pc, #32]	; (8008a84 <Get_SerialNum+0x54>)
 8008a64:	68b8      	ldr	r0, [r7, #8]
 8008a66:	f000 f80f 	bl	8008a88 <IntToUnicode>
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	1fff7590 	.word	0x1fff7590
 8008a78:	1fff7594 	.word	0x1fff7594
 8008a7c:	1fff7598 	.word	0x1fff7598
 8008a80:	2000016a 	.word	0x2000016a
 8008a84:	2000017a 	.word	0x2000017a

08008a88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]
 8008a9e:	e027      	b.n	8008af0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	0f1b      	lsrs	r3, r3, #28
 8008aa4:	2b09      	cmp	r3, #9
 8008aa6:	d80b      	bhi.n	8008ac0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	0f1b      	lsrs	r3, r3, #28
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	440b      	add	r3, r1
 8008ab8:	3230      	adds	r2, #48	; 0x30
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	e00a      	b.n	8008ad6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	0f1b      	lsrs	r3, r3, #28
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4619      	mov	r1, r3
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	440b      	add	r3, r1
 8008ad0:	3237      	adds	r2, #55	; 0x37
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	3301      	adds	r3, #1
 8008aee:	75fb      	strb	r3, [r7, #23]
 8008af0:	7dfa      	ldrb	r2, [r7, #23]
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d3d3      	bcc.n	8008aa0 <IntToUnicode+0x18>
  }
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
	...

08008b08 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b094      	sub	sp, #80	; 0x50
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b10:	f107 030c 	add.w	r3, r7, #12
 8008b14:	2244      	movs	r2, #68	; 0x44
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fb1d 	bl	8009158 <memset>
  if(pcdHandle->Instance==USB)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a15      	ldr	r2, [pc, #84]	; (8008b78 <HAL_PCD_MspInit+0x70>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d122      	bne.n	8008b6e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b2c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b32:	f107 030c 	add.w	r3, r7, #12
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fa fd64 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008b42:	f7f7 fe2b 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008b46:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <HAL_PCD_MspInit+0x74>)
 8008b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4a:	4a0c      	ldr	r2, [pc, #48]	; (8008b7c <HAL_PCD_MspInit+0x74>)
 8008b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b50:	6593      	str	r3, [r2, #88]	; 0x58
 8008b52:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <HAL_PCD_MspInit+0x74>)
 8008b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b5a:	60bb      	str	r3, [r7, #8]
 8008b5c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	2014      	movs	r0, #20
 8008b64:	f7f8 f879 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008b68:	2014      	movs	r0, #20
 8008b6a:	f7f8 f890 	bl	8000c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008b6e:	bf00      	nop
 8008b70:	3750      	adds	r7, #80	; 0x50
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40005c00 	.word	0x40005c00
 8008b7c:	40021000 	.word	0x40021000

08008b80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8008b94:	4619      	mov	r1, r3
 8008b96:	4610      	mov	r0, r2
 8008b98:	f7fe fd32 	bl	8007600 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8008bb6:	78fa      	ldrb	r2, [r7, #3]
 8008bb8:	6879      	ldr	r1, [r7, #4]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	440b      	add	r3, r1
 8008bc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	f7fe fd6c 	bl	80076aa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	440b      	add	r3, r1
 8008bfa:	3324      	adds	r3, #36	; 0x24
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	4619      	mov	r1, r3
 8008c02:	f7fe fdb5 	bl	8007770 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fec9 	bl	80079b4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c32:	2301      	movs	r3, #1
 8008c34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	795b      	ldrb	r3, [r3, #5]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d001      	beq.n	8008c42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c3e:	f7f7 fdad 	bl	800079c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c48:	7bfa      	ldrb	r2, [r7, #15]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fe fe73 	bl	8007938 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fe1f 	bl	800789c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fe6e 	bl	8007958 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7a5b      	ldrb	r3, [r3, #9]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c84:	4b04      	ldr	r3, [pc, #16]	; (8008c98 <HAL_PCD_SuspendCallback+0x30>)
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	4a03      	ldr	r2, [pc, #12]	; (8008c98 <HAL_PCD_SuspendCallback+0x30>)
 8008c8a:	f043 0306 	orr.w	r3, r3, #6
 8008c8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	e000ed00 	.word	0xe000ed00

08008c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7a5b      	ldrb	r3, [r3, #9]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cac:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <HAL_PCD_ResumeCallback+0x34>)
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	4a07      	ldr	r2, [pc, #28]	; (8008cd0 <HAL_PCD_ResumeCallback+0x34>)
 8008cb2:	f023 0306 	bic.w	r3, r3, #6
 8008cb6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008cb8:	f000 f9f8 	bl	80090ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe fe5e 	bl	8007984 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	e000ed00 	.word	0xe000ed00

08008cd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008cdc:	4a2b      	ldr	r2, [pc, #172]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a29      	ldr	r2, [pc, #164]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008ce8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008cec:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008cee:	4a28      	ldr	r2, [pc, #160]	; (8008d90 <USBD_LL_Init+0xbc>)
 8008cf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008cf2:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008cf8:	4b24      	ldr	r3, [pc, #144]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cfe:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008d00:	2202      	movs	r2, #2
 8008d02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008d04:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008d0a:	4b20      	ldr	r3, [pc, #128]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008d10:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008d16:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008d1c:	481b      	ldr	r0, [pc, #108]	; (8008d8c <USBD_LL_Init+0xb8>)
 8008d1e:	f7f8 f96b 	bl	8000ff8 <HAL_PCD_Init>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008d28:	f7f7 fd38 	bl	800079c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d32:	2318      	movs	r3, #24
 8008d34:	2200      	movs	r2, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	f7f9 fe25 	bl	8002986 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d42:	2358      	movs	r3, #88	; 0x58
 8008d44:	2200      	movs	r2, #0
 8008d46:	2180      	movs	r1, #128	; 0x80
 8008d48:	f7f9 fe1d 	bl	8002986 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d52:	23c0      	movs	r3, #192	; 0xc0
 8008d54:	2200      	movs	r2, #0
 8008d56:	2181      	movs	r1, #129	; 0x81
 8008d58:	f7f9 fe15 	bl	8002986 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008d66:	2200      	movs	r2, #0
 8008d68:	2101      	movs	r1, #1
 8008d6a:	f7f9 fe0c 	bl	8002986 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2182      	movs	r1, #130	; 0x82
 8008d7c:	f7f9 fe03 	bl	8002986 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000edc 	.word	0x20000edc
 8008d90:	40005c00 	.word	0x40005c00

08008d94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7f8 f9f2 	bl	8001194 <HAL_PCD_Start>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 f97e 	bl	80090b8 <USBD_Get_USB_Status>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4603      	mov	r3, r0
 8008dda:	70fb      	strb	r3, [r7, #3]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70bb      	strb	r3, [r7, #2]
 8008de0:	4613      	mov	r3, r2
 8008de2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008df2:	78bb      	ldrb	r3, [r7, #2]
 8008df4:	883a      	ldrh	r2, [r7, #0]
 8008df6:	78f9      	ldrb	r1, [r7, #3]
 8008df8:	f7f8 fb39 	bl	800146e <HAL_PCD_EP_Open>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f958 	bl	80090b8 <USBD_Get_USB_Status>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4611      	mov	r1, r2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7f8 fb77 	bl	8001528 <HAL_PCD_EP_Close>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f939 	bl	80090b8 <USBD_Get_USB_Status>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	4611      	mov	r1, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7f8 fc20 	bl	80016b8 <HAL_PCD_EP_SetStall>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 f91a 	bl	80090b8 <USBD_Get_USB_Status>
 8008e84:	4603      	mov	r3, r0
 8008e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008eac:	78fa      	ldrb	r2, [r7, #3]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7f8 fc53 	bl	800175c <HAL_PCD_EP_ClrStall>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f8fb 	bl	80090b8 <USBD_Get_USB_Status>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ee2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	da0b      	bge.n	8008f04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	440b      	add	r3, r1
 8008efe:	3312      	adds	r3, #18
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	e00b      	b.n	8008f1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	440b      	add	r3, r1
 8008f16:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8008f1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f8 fa6d 	bl	8001426 <HAL_PCD_SetAddress>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f8b0 	bl	80090b8 <USBD_Get_USB_Status>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	460b      	mov	r3, r1
 8008f74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f84:	7af9      	ldrb	r1, [r7, #11]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	f7f8 fb5e 	bl	800164a <HAL_PCD_EP_Transmit>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 f88f 	bl	80090b8 <USBD_Get_USB_Status>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	607a      	str	r2, [r7, #4]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fc6:	7af9      	ldrb	r1, [r7, #11]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	f7f8 faf4 	bl	80015b8 <HAL_PCD_EP_Receive>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f86e 	bl	80090b8 <USBD_Get_USB_Status>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fe0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f7f8 fb0a 	bl	800161a <HAL_PCD_EP_GetRxCount>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <HAL_PCDEx_LPM_Callback+0x18>
 8009022:	2b01      	cmp	r3, #1
 8009024:	d013      	beq.n	800904e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009026:	e023      	b.n	8009070 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	7a5b      	ldrb	r3, [r3, #9]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d007      	beq.n	8009040 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009030:	f000 f83c 	bl	80090ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009034:	4b10      	ldr	r3, [pc, #64]	; (8009078 <HAL_PCDEx_LPM_Callback+0x68>)
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	4a0f      	ldr	r2, [pc, #60]	; (8009078 <HAL_PCDEx_LPM_Callback+0x68>)
 800903a:	f023 0306 	bic.w	r3, r3, #6
 800903e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fc9c 	bl	8007984 <USBD_LL_Resume>
    break;
 800904c:	e010      	b.n	8009070 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fc7f 	bl	8007958 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7a5b      	ldrb	r3, [r3, #9]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <HAL_PCDEx_LPM_Callback+0x68>)
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	4a04      	ldr	r2, [pc, #16]	; (8009078 <HAL_PCDEx_LPM_Callback+0x68>)
 8009068:	f043 0306 	orr.w	r3, r3, #6
 800906c:	6113      	str	r3, [r2, #16]
    break;
 800906e:	bf00      	nop
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	e000ed00 	.word	0xe000ed00

0800907c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009084:	4b03      	ldr	r3, [pc, #12]	; (8009094 <USBD_static_malloc+0x18>)
}
 8009086:	4618      	mov	r0, r3
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	200011b8 	.word	0x200011b8

08009098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80090b0:	f7f7 faa6 	bl	8000600 <SystemClock_Config>
}
 80090b4:	bf00      	nop
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d817      	bhi.n	80090fc <USBD_Get_USB_Status+0x44>
 80090cc:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <USBD_Get_USB_Status+0x1c>)
 80090ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d2:	bf00      	nop
 80090d4:	080090e5 	.word	0x080090e5
 80090d8:	080090eb 	.word	0x080090eb
 80090dc:	080090f1 	.word	0x080090f1
 80090e0:	080090f7 	.word	0x080090f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
    break;
 80090e8:	e00b      	b.n	8009102 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090ea:	2303      	movs	r3, #3
 80090ec:	73fb      	strb	r3, [r7, #15]
    break;
 80090ee:	e008      	b.n	8009102 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
    break;
 80090f4:	e005      	b.n	8009102 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	73fb      	strb	r3, [r7, #15]
    break;
 80090fa:	e002      	b.n	8009102 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090fc:	2303      	movs	r3, #3
 80090fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009100:	bf00      	nop
  }
  return usb_status;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <__libc_init_array>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4d0d      	ldr	r5, [pc, #52]	; (8009148 <__libc_init_array+0x38>)
 8009114:	4c0d      	ldr	r4, [pc, #52]	; (800914c <__libc_init_array+0x3c>)
 8009116:	1b64      	subs	r4, r4, r5
 8009118:	10a4      	asrs	r4, r4, #2
 800911a:	2600      	movs	r6, #0
 800911c:	42a6      	cmp	r6, r4
 800911e:	d109      	bne.n	8009134 <__libc_init_array+0x24>
 8009120:	4d0b      	ldr	r5, [pc, #44]	; (8009150 <__libc_init_array+0x40>)
 8009122:	4c0c      	ldr	r4, [pc, #48]	; (8009154 <__libc_init_array+0x44>)
 8009124:	f000 f820 	bl	8009168 <_init>
 8009128:	1b64      	subs	r4, r4, r5
 800912a:	10a4      	asrs	r4, r4, #2
 800912c:	2600      	movs	r6, #0
 800912e:	42a6      	cmp	r6, r4
 8009130:	d105      	bne.n	800913e <__libc_init_array+0x2e>
 8009132:	bd70      	pop	{r4, r5, r6, pc}
 8009134:	f855 3b04 	ldr.w	r3, [r5], #4
 8009138:	4798      	blx	r3
 800913a:	3601      	adds	r6, #1
 800913c:	e7ee      	b.n	800911c <__libc_init_array+0xc>
 800913e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009142:	4798      	blx	r3
 8009144:	3601      	adds	r6, #1
 8009146:	e7f2      	b.n	800912e <__libc_init_array+0x1e>
 8009148:	08009220 	.word	0x08009220
 800914c:	08009220 	.word	0x08009220
 8009150:	08009220 	.word	0x08009220
 8009154:	08009224 	.word	0x08009224

08009158 <memset>:
 8009158:	4402      	add	r2, r0
 800915a:	4603      	mov	r3, r0
 800915c:	4293      	cmp	r3, r2
 800915e:	d100      	bne.n	8009162 <memset+0xa>
 8009160:	4770      	bx	lr
 8009162:	f803 1b01 	strb.w	r1, [r3], #1
 8009166:	e7f9      	b.n	800915c <memset+0x4>

08009168 <_init>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr

08009174 <_fini>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr
