
HAL_CAN1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f2c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800212c  0800212c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800212c  0800212c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800212c  0800212c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002140  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002140  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d60  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158f  00000000  00000000  00027d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  00029330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be0e  00000000  00000000  0002a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086f5  00000000  00000000  00046156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b16e5  00000000  00000000  0004e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fff30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000214c  00000000  00000000  000fff80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080020ec 	.word	0x080020ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080020ec 	.word	0x080020ec

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 f9ec 	bl	80005fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f839 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f8bd 	bl	80003a4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f875 	bl	8000318 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  	const uint8_t data[5] = "Hello";
 800022e:	4a17      	ldr	r2, [pc, #92]	; (800028c <main+0x74>)
 8000230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000238:	6018      	str	r0, [r3, #0]
 800023a:	3304      	adds	r3, #4
 800023c:	7019      	strb	r1, [r3, #0]
	FDCAN_TxHeaderTypeDef Hframe;
	Hframe.Identifier = 0x09;
 800023e:	2309      	movs	r3, #9
 8000240:	607b      	str	r3, [r7, #4]
	Hframe.IdType = FDCAN_STANDARD_ID;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
	Hframe.TxFrameType = FDCAN_DATA_FRAME;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
	Hframe.DataLength = 5;
 800024a:	2305      	movs	r3, #5
 800024c:	613b      	str	r3, [r7, #16]
	Hframe.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800024e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000252:	617b      	str	r3, [r7, #20]
	Hframe.BitRateSwitch = FDCAN_BRS_OFF;
 8000254:	2300      	movs	r3, #0
 8000256:	61bb      	str	r3, [r7, #24]
	Hframe.FDFormat = FDCAN_CLASSIC_CAN;
 8000258:	2300      	movs	r3, #0
 800025a:	61fb      	str	r3, [r7, #28]
	Hframe.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]
	Hframe.MessageMarker = 0x11;
 8000260:	2311      	movs	r3, #17
 8000262:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_FDCAN_Start(&hfdcan1);
 8000264:	480a      	ldr	r0, [pc, #40]	; (8000290 <main+0x78>)
 8000266:	f000 fc99 	bl	8000b9c <HAL_FDCAN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Hframe, data);
 800026a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4619      	mov	r1, r3
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x78>)
 8000274:	f000 fcba 	bl	8000bec <HAL_FDCAN_AddMessageToTxFifoQ>

	  HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027c:	4805      	ldr	r0, [pc, #20]	; (8000294 <main+0x7c>)
 800027e:	f000 ff65 	bl	800114c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000286:	f000 fa29 	bl	80006dc <HAL_Delay>
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Hframe, data);
 800028a:	e7ee      	b.n	800026a <main+0x52>
 800028c:	08002104 	.word	0x08002104
 8000290:	20000028 	.word	0x20000028
 8000294:	48000800 	.word	0x48000800

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b094      	sub	sp, #80	; 0x50
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2238      	movs	r2, #56	; 0x38
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 ff18 	bl	80020dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002be:	f000 ff5f 	bl	8001180 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	2340      	movs	r3, #64	; 0x40
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fff5 	bl	80012c8 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002e4:	f000 f89e 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ec:	2301      	movs	r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f001 faf3 	bl	80018ec <HAL_RCC_ClockConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800030c:	f000 f88a 	bl	8000424 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3750      	adds	r7, #80	; 0x50
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800031c:	4b1f      	ldr	r3, [pc, #124]	; (800039c <MX_FDCAN1_Init+0x84>)
 800031e:	4a20      	ldr	r2, [pc, #128]	; (80003a0 <MX_FDCAN1_Init+0x88>)
 8000320:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000328:	4b1c      	ldr	r3, [pc, #112]	; (800039c <MX_FDCAN1_Init+0x84>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000336:	2200      	movs	r2, #0
 8000338:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_FDCAN1_Init+0x84>)
 800033c:	2200      	movs	r2, #0
 800033e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000342:	2200      	movs	r2, #0
 8000344:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000348:	2210      	movs	r2, #16
 800034a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_FDCAN1_Init+0x84>)
 800034e:	2201      	movs	r2, #1
 8000350:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000354:	2202      	movs	r2, #2
 8000356:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_FDCAN1_Init+0x84>)
 800035a:	2202      	movs	r2, #2
 800035c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000360:	2201      	movs	r2, #1
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000366:	2201      	movs	r2, #1
 8000368:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_FDCAN1_Init+0x84>)
 800036c:	2201      	movs	r2, #1
 800036e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000372:	2201      	movs	r2, #1
 8000374:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000378:	2200      	movs	r2, #0
 800037a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <MX_FDCAN1_Init+0x84>)
 800037e:	2200      	movs	r2, #0
 8000380:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_FDCAN1_Init+0x84>)
 8000384:	2200      	movs	r2, #0
 8000386:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_FDCAN1_Init+0x84>)
 800038a:	f000 faad 	bl	80008e8 <HAL_FDCAN_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000394:	f000 f846 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028
 80003a0:	40006400 	.word	0x40006400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_GPIO_Init+0x78>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4a17      	ldr	r2, [pc, #92]	; (800041c <MX_GPIO_Init+0x78>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_GPIO_Init+0x78>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_GPIO_Init+0x78>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a11      	ldr	r2, [pc, #68]	; (800041c <MX_GPIO_Init+0x78>)
 80003d8:	f043 0302 	orr.w	r3, r3, #2
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_GPIO_Init+0x78>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0302 	and.w	r3, r3, #2
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <MX_GPIO_Init+0x7c>)
 80003f2:	f000 fe93 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80003f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 030c 	add.w	r3, r7, #12
 800040c:	4619      	mov	r1, r3
 800040e:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_GPIO_Init+0x7c>)
 8000410:	f000 fd02 	bl	8000e18 <HAL_GPIO_Init>

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	48000800 	.word	0x48000800

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x44>)
 8000438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x44>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6613      	str	r3, [r2, #96]	; 0x60
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x44>)
 8000444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_MspInit+0x44>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <HAL_MspInit+0x44>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000458:	6593      	str	r3, [r2, #88]	; 0x58
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_MspInit+0x44>)
 800045c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09a      	sub	sp, #104	; 0x68
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2244      	movs	r2, #68	; 0x44
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f001 fe1f 	bl	80020dc <memset>
  if(hfdcan->Instance==FDCAN1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a20      	ldr	r2, [pc, #128]	; (8000524 <HAL_FDCAN_MspInit+0xac>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d138      	bne.n	800051a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004b2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 fbfb 	bl	8001cb4 <HAL_RCCEx_PeriphCLKConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80004c4:	f7ff ffae 	bl	8000424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <HAL_FDCAN_MspInit+0xb0>)
 80004ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004cc:	4a16      	ldr	r2, [pc, #88]	; (8000528 <HAL_FDCAN_MspInit+0xb0>)
 80004ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d2:	6593      	str	r3, [r2, #88]	; 0x58
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <HAL_FDCAN_MspInit+0xb0>)
 80004d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <HAL_FDCAN_MspInit+0xb0>)
 80004e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e4:	4a10      	ldr	r2, [pc, #64]	; (8000528 <HAL_FDCAN_MspInit+0xb0>)
 80004e6:	f043 0302 	orr.w	r3, r3, #2
 80004ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_FDCAN_MspInit+0xb0>)
 80004ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800050a:	2309      	movs	r3, #9
 800050c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <HAL_FDCAN_MspInit+0xb4>)
 8000516:	f000 fc7f 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800051a:	bf00      	nop
 800051c:	3768      	adds	r7, #104	; 0x68
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40006400 	.word	0x40006400
 8000528:	40021000 	.word	0x40021000
 800052c:	48000400 	.word	0x48000400

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f890 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <SystemInit+0x20>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <SystemInit+0x20>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ac:	f7ff ffea 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	; (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80005d6:	f001 fd5d 	bl	8002094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005da:	f7ff fe1d 	bl	8000218 <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   r0, =_estack
 80005e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ec:	08002134 	.word	0x08002134
  ldr r2, =_sbss
 80005f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f4:	20000090 	.word	0x20000090

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>

080005fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f93d 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060a:	200f      	movs	r0, #15
 800060c:	f000 f80e 	bl	800062c <HAL_InitTick>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e001      	b.n	8000620 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800061c:	f7ff ff08 	bl	8000430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000620:	79fb      	ldrb	r3, [r7, #7]

}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <HAL_InitTick+0x68>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d022      	beq.n	8000686 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_InitTick+0x6c>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <HAL_InitTick+0x68>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800064c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f93a 	bl	80008ce <HAL_SYSTICK_Config>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10f      	bne.n	8000680 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b0f      	cmp	r3, #15
 8000664:	d809      	bhi.n	800067a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000666:	2200      	movs	r2, #0
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	f04f 30ff 	mov.w	r0, #4294967295
 800066e:	f000 f914 	bl	800089a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <HAL_InitTick+0x70>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	e007      	b.n	800068a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	e004      	b.n	800068a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000680:	2301      	movs	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e001      	b.n	800068a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800068a:	7bfb      	ldrb	r3, [r7, #15]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000008 	.word	0x20000008
 8000698:	20000000 	.word	0x20000000
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4413      	add	r3, r2
 80006ae:	4a03      	ldr	r2, [pc, #12]	; (80006bc <HAL_IncTick+0x1c>)
 80006b0:	6013      	str	r3, [r2, #0]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	20000008 	.word	0x20000008

080006c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_GetTick+0x14>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c

080006dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e4:	f7ff ffee 	bl	80006c4 <HAL_GetTick>
 80006e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f4:	d004      	beq.n	8000700 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_Delay+0x40>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000700:	bf00      	nop
 8000702:	f7ff ffdf 	bl	80006c4 <HAL_GetTick>
 8000706:	4602      	mov	r2, r0
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	429a      	cmp	r2, r3
 8000710:	d8f7      	bhi.n	8000702 <HAL_Delay+0x26>
  {
  }
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000008 	.word	0x20000008

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff47 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5e 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff90 	bl	80007d8 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5f 	bl	8000784 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb2 	bl	8000840 <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e147      	b.n	8000b8a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d106      	bne.n	8000914 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fdb2 	bl	8000478 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	699a      	ldr	r2, [r3, #24]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f022 0210 	bic.w	r2, r2, #16
 8000922:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000924:	f7ff fece 	bl	80006c4 <HAL_GetTick>
 8000928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800092a:	e012      	b.n	8000952 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800092c:	f7ff feca 	bl	80006c4 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	2b0a      	cmp	r3, #10
 8000938:	d90b      	bls.n	8000952 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f043 0201 	orr.w	r2, r3, #1
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2203      	movs	r2, #3
 800094a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e11b      	b.n	8000b8a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	2b08      	cmp	r3, #8
 800095e:	d0e5      	beq.n	800092c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	699a      	ldr	r2, [r3, #24]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0201 	orr.w	r2, r2, #1
 800096e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000970:	f7ff fea8 	bl	80006c4 <HAL_GetTick>
 8000974:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000976:	e012      	b.n	800099e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000978:	f7ff fea4 	bl	80006c4 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b0a      	cmp	r3, #10
 8000984:	d90b      	bls.n	800099e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f043 0201 	orr.w	r2, r3, #1
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2203      	movs	r2, #3
 8000996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e0f5      	b.n	8000b8a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0e5      	beq.n	8000978 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0202 	orr.w	r2, r2, #2
 80009ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a74      	ldr	r2, [pc, #464]	; (8000b94 <HAL_FDCAN_Init+0x2ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d103      	bne.n	80009ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80009c6:	4a74      	ldr	r2, [pc, #464]	; (8000b98 <HAL_FDCAN_Init+0x2b0>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7c1b      	ldrb	r3, [r3, #16]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d108      	bne.n	80009e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	699a      	ldr	r2, [r3, #24]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	e007      	b.n	80009f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7c5b      	ldrb	r3, [r3, #17]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a0e:	619a      	str	r2, [r3, #24]
 8000a10:	e007      	b.n	8000a22 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	699a      	ldr	r2, [r3, #24]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a20:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7c9b      	ldrb	r3, [r3, #18]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d108      	bne.n	8000a3c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	699a      	ldr	r2, [r3, #24]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a38:	619a      	str	r2, [r3, #24]
 8000a3a:	e007      	b.n	8000a4c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	699a      	ldr	r2, [r3, #24]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a4a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000a70:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	691a      	ldr	r2, [r3, #16]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0210 	bic.w	r2, r2, #16
 8000a80:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d108      	bne.n	8000a9c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	699a      	ldr	r2, [r3, #24]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0204 	orr.w	r2, r2, #4
 8000a98:	619a      	str	r2, [r3, #24]
 8000a9a:	e02c      	b.n	8000af6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d028      	beq.n	8000af6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d01c      	beq.n	8000ae6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	699a      	ldr	r2, [r3, #24]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000aba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0210 	orr.w	r2, r2, #16
 8000aca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d110      	bne.n	8000af6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0220 	orr.w	r2, r2, #32
 8000ae2:	619a      	str	r2, [r3, #24]
 8000ae4:	e007      	b.n	8000af6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 0220 	orr.w	r2, r2, #32
 8000af4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b06:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b0e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b1e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b20:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b2a:	d115      	bne.n	8000b58 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b36:	3b01      	subs	r3, #1
 8000b38:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b3a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	3b01      	subs	r3, #1
 8000b42:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b44:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b54:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b56:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f880 	bl	8000c74 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40006400 	.word	0x40006400
 8000b98:	40006500 	.word	0x40006500

08000b9c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d110      	bne.n	8000bd2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	699a      	ldr	r2, [r3, #24]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f022 0201 	bic.w	r2, r2, #1
 8000bc6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e006      	b.n	8000be0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd6:	f043 0204 	orr.w	r2, r3, #4
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
  }
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d12c      	bne.n	8000c5e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e023      	b.n	8000c6c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f000 f870 	bl	8000d20 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000c50:	2201      	movs	r2, #1
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	409a      	lsls	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e006      	b.n	8000c6c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	f043 0208 	orr.w	r2, r3, #8
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
  }
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8000c7e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c8e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c96:	041a      	lsls	r2, r3, #16
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cb4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbc:	061a      	lsls	r2, r3, #24
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e005      	b.n	8000d02 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3f3      	bcc.n	8000cf6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	4000a400 	.word	0x4000a400

08000d20 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10a      	bne.n	8000d4c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8000d3e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e00a      	b.n	8000d62 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8000d54:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8000d5a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d60:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d6c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8000d72:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8000d78:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	440b      	add	r3, r1
 8000d94:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	3304      	adds	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e020      	b.n	8000df6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3303      	adds	r3, #3
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	440b      	add	r3, r1
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000dcc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	440b      	add	r3, r1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000dda:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	440a      	add	r2, r1
 8000de2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8000de4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	3304      	adds	r3, #4
 8000dee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3304      	adds	r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <FDCAN_CopyMessageToRAM+0xf4>)
 8000dfc:	5cd3      	ldrb	r3, [r2, r3]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d3d6      	bcc.n	8000db4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	3724      	adds	r7, #36	; 0x24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	0800211c 	.word	0x0800211c

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e26:	e15a      	b.n	80010de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 814c 	beq.w	80010d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0203 	and.w	r2, r3, #3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80a6 	beq.w	80010d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6613      	str	r3, [r2, #96]	; 0x60
 8000f98:	4b58      	ldr	r3, [pc, #352]	; (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa4:	4a56      	ldr	r2, [pc, #344]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fce:	d01f      	beq.n	8001010 <HAL_GPIO_Init+0x1f8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_GPIO_Init+0x2ec>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d019      	beq.n	800100c <HAL_GPIO_Init+0x1f4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a4b      	ldr	r2, [pc, #300]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_GPIO_Init+0x1f0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a4a      	ldr	r2, [pc, #296]	; (800110c <HAL_GPIO_Init+0x2f4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1ec>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a49      	ldr	r2, [pc, #292]	; (8001110 <HAL_GPIO_Init+0x2f8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1e8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a48      	ldr	r2, [pc, #288]	; (8001114 <HAL_GPIO_Init+0x2fc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	e00a      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001000:	2304      	movs	r3, #4
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001004:	2303      	movs	r3, #3
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001010:	2300      	movs	r3, #0
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001022:	4937      	ldr	r1, [pc, #220]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001054:	4a30      	ldr	r2, [pc, #192]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x300>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107e:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_GPIO_Init+0x300>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x300>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_GPIO_Init+0x300>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f ae9d 	bne.w	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	48001400 	.word	0x48001400
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d141      	bne.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800118e:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119a:	d131      	bne.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a2:	4a46      	ldr	r2, [pc, #280]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b4:	4a41      	ldr	r2, [pc, #260]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011bc:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2232      	movs	r2, #50	; 0x32
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	4a3f      	ldr	r2, [pc, #252]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9b      	lsrs	r3, r3, #18
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d2:	e002      	b.n	80011da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e6:	d102      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f2      	bne.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d158      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e057      	b.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001206:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800120c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001210:	e04d      	b.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001218:	d141      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001226:	d131      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001240:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001246:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2232      	movs	r2, #50	; 0x32
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9b      	lsrs	r3, r3, #18
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800125e:	e002      	b.n	8001266 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3b01      	subs	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001272:	d102      	bne.n	800127a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f2      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001286:	d112      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e011      	b.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800129c:	e007      	b.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40007000 	.word	0x40007000
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e2fe      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e6:	4b97      	ldr	r3, [pc, #604]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f0:	4b94      	ldr	r3, [pc, #592]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d102      	bne.n	8001306 <HAL_RCC_OscConfig+0x3e>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d002      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b08      	cmp	r3, #8
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b8d      	ldr	r3, [pc, #564]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d157      	bne.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e2d9      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x74>
 800132e:	4b85      	ldr	r3, [pc, #532]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a84      	ldr	r2, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7e      	ldr	r2, [pc, #504]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a7b      	ldr	r2, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a77      	ldr	r2, [pc, #476]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b75      	ldr	r3, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a74      	ldr	r2, [pc, #464]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff f9a0 	bl	80006c4 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff f99c 	bl	80006c4 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e29e      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff f98c 	bl	80006c4 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff f988 	bl	80006c4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e28a      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c2:	4b60      	ldr	r3, [pc, #384]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d075      	beq.n	80014ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e8:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	d102      	bne.n	80013fe <HAL_RCC_OscConfig+0x136>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d002      	beq.n	8001404 <HAL_RCC_OscConfig+0x13c>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b04      	cmp	r3, #4
 8001402:	d11f      	bne.n	8001444 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x154>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e25d      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	4946      	ldr	r1, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_RCC_OscConfig+0x280>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f8f9 	bl	800062c <HAL_InitTick>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d043      	beq.n	80014c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e249      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff f934 	bl	80006c4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff f930 	bl	80006c4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e232      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	061b      	lsls	r3, r3, #24
 800148c:	492d      	ldr	r1, [pc, #180]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
 8001492:	e01a      	b.n	80014ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800149a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff f910 	bl	80006c4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff f90c 	bl	80006c4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e20e      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1e0>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d041      	beq.n	800155a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01c      	beq.n	8001518 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80014e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff f8e9 	bl	80006c4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff f8e5 	bl	80006c4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1e7      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800150a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0ef      	beq.n	80014f6 <HAL_RCC_OscConfig+0x22e>
 8001516:	e020      	b.n	800155a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800151a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff f8cc 	bl	80006c4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800152e:	e00d      	b.n	800154c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff f8c8 	bl	80006c4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d906      	bls.n	800154c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1ca      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800154c:	4b8c      	ldr	r3, [pc, #560]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ea      	bne.n	8001530 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80a6 	beq.w	80016b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800156c:	4b84      	ldr	r3, [pc, #528]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_OscConfig+0x2b4>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x2b6>
 800157c:	2300      	movs	r3, #0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	4a7e      	ldr	r2, [pc, #504]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6593      	str	r3, [r2, #88]	; 0x58
 800158e:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159e:	4b79      	ldr	r3, [pc, #484]	; (8001784 <HAL_RCC_OscConfig+0x4bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015aa:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0x4bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a75      	ldr	r2, [pc, #468]	; (8001784 <HAL_RCC_OscConfig+0x4bc>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7ff f885 	bl	80006c4 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff f881 	bl	80006c4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e183      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d0:	4b6c      	ldr	r3, [pc, #432]	; (8001784 <HAL_RCC_OscConfig+0x4bc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_RCC_OscConfig+0x32e>
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f4:	e024      	b.n	8001640 <HAL_RCC_OscConfig+0x378>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d110      	bne.n	8001620 <HAL_RCC_OscConfig+0x358>
 80015fe:	4b60      	ldr	r3, [pc, #384]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	4a5e      	ldr	r2, [pc, #376]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001614:	4a5a      	ldr	r2, [pc, #360]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161e:	e00f      	b.n	8001640 <HAL_RCC_OscConfig+0x378>
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001626:	4a56      	ldr	r2, [pc, #344]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001636:	4a52      	ldr	r2, [pc, #328]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d016      	beq.n	8001676 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff f83c 	bl	80006c4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff f838 	bl	80006c4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e138      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ed      	beq.n	8001650 <HAL_RCC_OscConfig+0x388>
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff f825 	bl	80006c4 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff f821 	bl	80006c4 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e121      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001694:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ed      	bne.n	800167e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	4a34      	ldr	r2, [pc, #208]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 80016ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d03c      	beq.n	800173a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01c      	beq.n	8001702 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 80016ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ce:	4a2c      	ldr	r2, [pc, #176]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7fe fff4 	bl	80006c4 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e0:	f7fe fff0 	bl	80006c4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0f2      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 80016f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ef      	beq.n	80016e0 <HAL_RCC_OscConfig+0x418>
 8001700:	e01b      	b.n	800173a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7fe ffd7 	bl	80006c4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800171a:	f7fe ffd3 	bl	80006c4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0d5      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 800172e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ef      	bne.n	800171a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80c9 	beq.w	80018d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b0c      	cmp	r3, #12
 800174e:	f000 8083 	beq.w	8001858 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d15e      	bne.n	8001818 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7fe ffad 	bl	80006c4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176c:	e00c      	b.n	8001788 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7fe ffa9 	bl	80006c4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d905      	bls.n	8001788 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0ab      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
 8001780:	40021000 	.word	0x40021000
 8001784:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ec      	bne.n	800176e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001794:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <HAL_RCC_OscConfig+0x61c>)
 800179a:	4013      	ands	r3, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6a11      	ldr	r1, [r2, #32]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a4:	3a01      	subs	r2, #1
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	4311      	orrs	r1, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017ae:	0212      	lsls	r2, r2, #8
 80017b0:	4311      	orrs	r1, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017b6:	0852      	lsrs	r2, r2, #1
 80017b8:	3a01      	subs	r2, #1
 80017ba:	0552      	lsls	r2, r2, #21
 80017bc:	4311      	orrs	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c2:	0852      	lsrs	r2, r2, #1
 80017c4:	3a01      	subs	r2, #1
 80017c6:	0652      	lsls	r2, r2, #25
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017ce:	06d2      	lsls	r2, r2, #27
 80017d0:	430a      	orrs	r2, r1
 80017d2:	4943      	ldr	r1, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a40      	ldr	r2, [pc, #256]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e4:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7fe ff68 	bl	80006c4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7fe ff64 	bl	80006c4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e066      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x530>
 8001816:	e05e      	b.n	80018d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 800181e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7fe ff4e 	bl	80006c4 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7fe ff4a 	bl	80006c4 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04c      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	4924      	ldr	r1, [pc, #144]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_OscConfig+0x620>)
 8001852:	4013      	ands	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
 8001856:	e03e      	b.n	80018d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e039      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_OscConfig+0x618>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	429a      	cmp	r2, r3
 8001876:	d12c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	3b01      	subs	r3, #1
 8001884:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d123      	bne.n	80018d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d11b      	bne.n	80018d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d113      	bne.n	80018d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000
 80018e4:	019f800c 	.word	0x019f800c
 80018e8:	feeefffc 	.word	0xfeeefffc

080018ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e11e      	b.n	8001b42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001904:	4b91      	ldr	r3, [pc, #580]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d910      	bls.n	8001934 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b8e      	ldr	r3, [pc, #568]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 020f 	bic.w	r2, r3, #15
 800191a:	498c      	ldr	r1, [pc, #560]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b8a      	ldr	r3, [pc, #552]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e106      	b.n	8001b42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d073      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d129      	bne.n	800199c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001948:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0f4      	b.n	8001b42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001958:	f000 f966 	bl	8001c28 <RCC_GetSysClockFreqFromPLLSource>
 800195c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4a7c      	ldr	r2, [pc, #496]	; (8001b54 <HAL_RCC_ClockConfig+0x268>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d93f      	bls.n	80019e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001966:	4b7a      	ldr	r3, [pc, #488]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800197a:	2b00      	cmp	r3, #0
 800197c:	d033      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d12f      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001986:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800198e:	4a70      	ldr	r2, [pc, #448]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e024      	b.n	80019e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0c6      	b.n	8001b42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0be      	b.n	8001b42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019c4:	f000 f8ce 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4a61      	ldr	r2, [pc, #388]	; (8001b54 <HAL_RCC_ClockConfig+0x268>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d909      	bls.n	80019e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019da:	4a5d      	ldr	r2, [pc, #372]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4957      	ldr	r1, [pc, #348]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f8:	f7fe fe64 	bl	80006c4 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7fe fe60 	bl	80006c4 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e095      	b.n	8001b42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d023      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a40:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a42      	ldr	r2, [pc, #264]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4936      	ldr	r1, [pc, #216]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b80      	cmp	r3, #128	; 0x80
 8001a80:	d105      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4a32      	ldr	r2, [pc, #200]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d21d      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 020f 	bic.w	r2, r3, #15
 8001aa4:	4929      	ldr	r1, [pc, #164]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aac:	f7fe fe0a 	bl	80006c4 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7fe fe06 	bl	80006c4 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e03b      	b.n	8001b42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x260>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1ed      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4917      	ldr	r1, [pc, #92]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490f      	ldr	r1, [pc, #60]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b16:	f000 f825 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490c      	ldr	r1, [pc, #48]	; (8001b58 <HAL_RCC_ClockConfig+0x26c>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x270>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd76 	bl	800062c <HAL_InitTick>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	04c4b400 	.word	0x04c4b400
 8001b58:	0800210c 	.word	0x0800210c
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d102      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e047      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d102      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	e03e      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d136      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc2:	68d2      	ldr	r2, [r2, #12]
 8001bc4:	0a12      	lsrs	r2, r2, #8
 8001bc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
      break;
 8001bd0:	e00c      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	0a12      	lsrs	r2, r2, #8
 8001be0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001be4:	fb02 f303 	mul.w	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
      break;
 8001bea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0e5b      	lsrs	r3, r3, #25
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	e001      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c0c:	693b      	ldr	r3, [r7, #16]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	007a1200 	.word	0x007a1200

08001c28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d10c      	bne.n	8001c66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c4c:	4a17      	ldr	r2, [pc, #92]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c56:	68d2      	ldr	r2, [r2, #12]
 8001c58:	0a12      	lsrs	r2, r2, #8
 8001c5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
    break;
 8001c64:	e00c      	b.n	8001c80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c70:	68d2      	ldr	r2, [r2, #12]
 8001c72:	0a12      	lsrs	r2, r2, #8
 8001c74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
    break;
 8001c7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0e5b      	lsrs	r3, r3, #25
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	00f42400 	.word	0x00f42400

08001cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8098 	beq.w	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10d      	bne.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a39      	ldr	r2, [pc, #228]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d0a:	f7fe fcdb 	bl	80006c4 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d10:	e009      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7fe fcd7 	bl	80006c4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d902      	bls.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	74fb      	strb	r3, [r7, #19]
        break;
 8001d24:	e005      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d26:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ef      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d159      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01e      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d019      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d016      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7fe fc97 	bl	80006c4 <HAL_GetTick>
 8001d96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d98:	e00b      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7fe fc93 	bl	80006c4 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d902      	bls.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	74fb      	strb	r3, [r7, #19]
            break;
 8001db0:	e006      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ec      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001dc0:	7cfb      	ldrb	r3, [r7, #19]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10b      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4903      	ldr	r1, [pc, #12]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ddc:	e008      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dde:	7cfb      	ldrb	r3, [r7, #19]
 8001de0:	74bb      	strb	r3, [r7, #18]
 8001de2:	e005      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dec:	7cfb      	ldrb	r3, [r7, #19]
 8001dee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df0:	7c7b      	ldrb	r3, [r7, #17]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d105      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4ba6      	ldr	r3, [pc, #664]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4aa5      	ldr	r2, [pc, #660]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e0e:	4ba0      	ldr	r3, [pc, #640]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e14:	f023 0203 	bic.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	499c      	ldr	r1, [pc, #624]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e30:	4b97      	ldr	r3, [pc, #604]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	f023 020c 	bic.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4994      	ldr	r1, [pc, #592]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e52:	4b8f      	ldr	r3, [pc, #572]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	498b      	ldr	r1, [pc, #556]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e74:	4b86      	ldr	r3, [pc, #536]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	4983      	ldr	r1, [pc, #524]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e96:	4b7e      	ldr	r3, [pc, #504]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	497a      	ldr	r1, [pc, #488]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb8:	4b75      	ldr	r3, [pc, #468]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	4972      	ldr	r1, [pc, #456]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4969      	ldr	r1, [pc, #420]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001efc:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4961      	ldr	r1, [pc, #388]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f1e:	4b5c      	ldr	r3, [pc, #368]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	4958      	ldr	r1, [pc, #352]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d015      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	4950      	ldr	r1, [pc, #320]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a4a      	ldr	r2, [pc, #296]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d015      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	4942      	ldr	r1, [pc, #264]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4934      	ldr	r1, [pc, #208]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fce:	d105      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	4926      	ldr	r1, [pc, #152]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002012:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	4918      	ldr	r1, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800203e:	d105      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800204a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002076:	d105      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002084:	7cbb      	ldrb	r3, [r7, #18]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000

08002094 <__libc_init_array>:
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	4d0d      	ldr	r5, [pc, #52]	; (80020cc <__libc_init_array+0x38>)
 8002098:	4c0d      	ldr	r4, [pc, #52]	; (80020d0 <__libc_init_array+0x3c>)
 800209a:	1b64      	subs	r4, r4, r5
 800209c:	10a4      	asrs	r4, r4, #2
 800209e:	2600      	movs	r6, #0
 80020a0:	42a6      	cmp	r6, r4
 80020a2:	d109      	bne.n	80020b8 <__libc_init_array+0x24>
 80020a4:	4d0b      	ldr	r5, [pc, #44]	; (80020d4 <__libc_init_array+0x40>)
 80020a6:	4c0c      	ldr	r4, [pc, #48]	; (80020d8 <__libc_init_array+0x44>)
 80020a8:	f000 f820 	bl	80020ec <_init>
 80020ac:	1b64      	subs	r4, r4, r5
 80020ae:	10a4      	asrs	r4, r4, #2
 80020b0:	2600      	movs	r6, #0
 80020b2:	42a6      	cmp	r6, r4
 80020b4:	d105      	bne.n	80020c2 <__libc_init_array+0x2e>
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
 80020b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020bc:	4798      	blx	r3
 80020be:	3601      	adds	r6, #1
 80020c0:	e7ee      	b.n	80020a0 <__libc_init_array+0xc>
 80020c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c6:	4798      	blx	r3
 80020c8:	3601      	adds	r6, #1
 80020ca:	e7f2      	b.n	80020b2 <__libc_init_array+0x1e>
 80020cc:	0800212c 	.word	0x0800212c
 80020d0:	0800212c 	.word	0x0800212c
 80020d4:	0800212c 	.word	0x0800212c
 80020d8:	08002130 	.word	0x08002130

080020dc <memset>:
 80020dc:	4402      	add	r2, r0
 80020de:	4603      	mov	r3, r0
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d100      	bne.n	80020e6 <memset+0xa>
 80020e4:	4770      	bx	lr
 80020e6:	f803 1b01 	strb.w	r1, [r3], #1
 80020ea:	e7f9      	b.n	80020e0 <memset+0x4>

080020ec <_init>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr

080020f8 <_fini>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr
