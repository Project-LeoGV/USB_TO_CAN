
FDCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001144  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800131c  0800131c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800132c  0800132c  00011334  2**0
                  CONTENTS
  4 .ARM          00000000  0800132c  0800132c  00011334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800132c  08001334  00011334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800132c  0800132c  0001132c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001330  08001330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00011334  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ec8  00000000  00000000  00011364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b6  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  000137e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  00013960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010a2  00000000  00000000  00013a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fb1  00000000  00000000  00014b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000048e1  00000000  00000000  00015ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a3c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000500  00000000  00000000  0001a414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001304 	.word	0x08001304

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08001304 	.word	0x08001304

08000218 <CAN_voidInit>:
 */

#include "CAN_Interface.h"

void CAN_voidInit(CAN_RegMap_t* A_canx, CAN_RxConfig_t* A_rxConfig, CAN_TxConfig_t* A_txConfig)
{
 8000218:	b480      	push	{r7}
 800021a:	b08b      	sub	sp, #44	; 0x2c
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	4aa0      	ldr	r2, [pc, #640]	; (80004a8 <CAN_voidInit+0x290>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d102      	bne.n	8000232 <CAN_voidInit+0x1a>
		L_msg = CAN1_MESSAGES;
 800022c:	4b9f      	ldr	r3, [pc, #636]	; (80004ac <CAN_voidInit+0x294>)
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
 8000230:	e00c      	b.n	800024c <CAN_voidInit+0x34>
	else if(A_canx == CAN2)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	4a9e      	ldr	r2, [pc, #632]	; (80004b0 <CAN_voidInit+0x298>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d102      	bne.n	8000240 <CAN_voidInit+0x28>
		L_msg = CAN2_MESSAGES;
 800023a:	4b9e      	ldr	r3, [pc, #632]	; (80004b4 <CAN_voidInit+0x29c>)
 800023c:	627b      	str	r3, [r7, #36]	; 0x24
 800023e:	e005      	b.n	800024c <CAN_voidInit+0x34>
	else if(A_canx == CAN3)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a9d      	ldr	r2, [pc, #628]	; (80004b8 <CAN_voidInit+0x2a0>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d101      	bne.n	800024c <CAN_voidInit+0x34>
			L_msg = CAN3_MESSAGES;
 8000248:	4b9c      	ldr	r3, [pc, #624]	; (80004bc <CAN_voidInit+0x2a4>)
 800024a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enter Initialization mode */
	A_canx->CCCR |= (1 << 0);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f043 0201 	orr.w	r2, r3, #1
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	619a      	str	r2, [r3, #24]
	while(! ((A_canx->CCCR >> 0) & 1));  // Wait to make sure INIT bit has been written (Recommendation from reference manual)
 8000258:	bf00      	nop
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0301 	and.w	r3, r3, #1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <CAN_voidInit+0x42>

	// might configure Timeout value here
	A_canx->CCCR |= (1 << 1);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f043 0202 	orr.w	r2, r3, #2
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	619a      	str	r2, [r3, #24]

/* Setup General Configuration */
#if CAN_FDCAN_OPERATION == CAN_FDCAN_DISABLE
		A_canx->CCCR &= ~(1 << 8);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 8);
#endif

#if CAN_BIT_RATE_SWITCHING == CAN_BIT_RATE_SWITCHING_DISABLE
		A_canx->CCCR &= ~(1 << 9);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 9);
#endif

#if CAN_EDGE_FILTERING == CAN_FILTERING_DISABLE
		A_canx->CCCR &= ~(1 << 13);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 13);
#endif

#if CAN_EXCEPTION_HANDLING == CAN_EXCEPTION_ENABLE
		A_canx->CCCR &= ~(1 << 12);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 12);
#endif

#if CAN_BUS_MONITORING == CAN_BUS_MONITORING_DISABLE
		A_canx->CCCR &= ~(1 << 5);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f023 0220 	bic.w	r2, r3, #32
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 5);
#endif

#if CAN_OPERATION_MODE == CAN_MODE_NORMAL_OPERATION
		A_canx->CCCR &= ~(1 << 2);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	f023 0204 	bic.w	r2, r3, #4
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 2);
#endif

	/* Timing Configuration */
	u32 L_timing = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 25);		// 3 is default value for NSJW (Nominal (re)synchronization jump width)
 80002be:	69bb      	ldr	r3, [r7, #24]
 80002c0:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80002c4:	61bb      	str	r3, [r7, #24]
	// L_timing |= (0 << 16);		// 0 is the default value for NBRP (Bit rate prescaler)
	L_timing |= (10 << 8);		// 10 is the default value for NTSEG1
 80002c6:	69bb      	ldr	r3, [r7, #24]
 80002c8:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80002cc:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 0);		// 3 is the default value for NTSEG2
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	f043 0303 	orr.w	r3, r3, #3
 80002d4:	61bb      	str	r3, [r7, #24]
	 * for 125kb  (8us)	 BRB = 8
	 * for 250kb  (4us)  BRB = 4
	 * for 500kb  (2us)  BRB = 2
	 * for 1000kb (1us)  BRB = 1
	 * */
	L_timing |= (CAN_BAUD_RATE << 16);
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002dc:	61bb      	str	r3, [r7, #24]

	A_canx->NBTP = L_timing;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	61da      	str	r2, [r3, #28]

	/* Receiver Configuration */
	if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO0){
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d108      	bne.n	80002fe <CAN_voidInit+0xe6>
		A_canx->RXGFC &= ~(0b11 << 4);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80002fc:	e01c      	b.n	8000338 <CAN_voidInit+0x120>
	}
	else if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO1){
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d110      	bne.n	8000328 <CAN_voidInit+0x110>
		A_canx->RXGFC &= ~(0b11 << 4);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800030c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		A_canx->RXGFC |= (1 << 4);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800031c:	f043 0210 	orr.w	r2, r3, #16
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000326:	e007      	b.n	8000338 <CAN_voidInit+0x120>
	}
	else{	// Reject
		A_canx->RXGFC |= (0b11 << 4);
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800032e:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	if(A_rxConfig->FIFO0_Mode == CAN_RX_FIFO_BLOCKING)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	785b      	ldrb	r3, [r3, #1]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d108      	bne.n	8000352 <CAN_voidInit+0x13a>
		A_canx->RXGFC &= ~(1 << 9);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000346:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000350:	e007      	b.n	8000362 <CAN_voidInit+0x14a>
	else	// Overwrite
		A_canx->RXGFC |= (1 << 9);
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000358:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	if(A_rxConfig->FIFO1_Mode == CAN_RX_FIFO_BLOCKING)
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	789b      	ldrb	r3, [r3, #2]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d108      	bne.n	800037c <CAN_voidInit+0x164>
			A_canx->RXGFC &= ~(1 << 8);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800037a:	e007      	b.n	800038c <CAN_voidInit+0x174>
		else
			A_canx->RXGFC |= (1 << 8);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	A_canx->RXGFC &= ~(0b11111 << 16);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000392:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	A_canx->RXGFC |= ((A_rxConfig->FIFO0_numberOfIDs + A_rxConfig->FIFO1_numberOfIDs) << 16);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	78d2      	ldrb	r2, [r2, #3]
 80003a6:	4611      	mov	r1, r2
 80003a8:	68ba      	ldr	r2, [r7, #8]
 80003aa:	7912      	ldrb	r2, [r2, #4]
 80003ac:	440a      	add	r2, r1
 80003ae:	0412      	lsls	r2, r2, #16
 80003b0:	431a      	orrs	r2, r3
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Flush SRAM */
	u32 pointer;
	pointer = (u32)L_msg;
 80003b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ba:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 80003bc:	2300      	movs	r3, #0
 80003be:	77fb      	strb	r3, [r7, #31]
 80003c0:	e008      	b.n	80003d4 <CAN_voidInit+0x1bc>
		*(u32 *)(pointer) = 0x00000000U;
 80003c2:	6a3b      	ldr	r3, [r7, #32]
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
		pointer += 4;
 80003c8:	6a3b      	ldr	r3, [r7, #32]
 80003ca:	3304      	adds	r3, #4
 80003cc:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 80003ce:	7ffb      	ldrb	r3, [r7, #31]
 80003d0:	3301      	adds	r3, #1
 80003d2:	77fb      	strb	r3, [r7, #31]
 80003d4:	7ffb      	ldrb	r3, [r7, #31]
 80003d6:	2bd3      	cmp	r3, #211	; 0xd3
 80003d8:	d9f3      	bls.n	80003c2 <CAN_voidInit+0x1aa>
	}

	/* Store The IDs */
	u32 L_temp;
	u8 L_idIndex = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	77bb      	strb	r3, [r7, #30]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 80003de:	2300      	movs	r3, #0
 80003e0:	777b      	strb	r3, [r7, #29]
 80003e2:	e023      	b.n	800042c <CAN_voidInit+0x214>
		L_temp = A_rxConfig->FIFO0_IDs[i];			// SID1
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	7f7b      	ldrb	r3, [r7, #29]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO0_IDs[i] << 16);	// SID2
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	7f7b      	ldrb	r3, [r7, #29]
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	041b      	lsls	r3, r3, #16
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	4313      	orrs	r3, r2
 8000404:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 27);				// Store in FIFO0 (if filter matches)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800040c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000414:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 8000416:	7fbb      	ldrb	r3, [r7, #30]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	77ba      	strb	r2, [r7, #30]
 800041c:	4619      	mov	r1, r3
 800041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 8000426:	7f7b      	ldrb	r3, [r7, #29]
 8000428:	3301      	adds	r3, #1
 800042a:	777b      	strb	r3, [r7, #29]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	7f7a      	ldrb	r2, [r7, #29]
 8000432:	429a      	cmp	r2, r3
 8000434:	d3d6      	bcc.n	80003e4 <CAN_voidInit+0x1cc>
	}

	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 8000436:	2300      	movs	r3, #0
 8000438:	773b      	strb	r3, [r7, #28]
 800043a:	e023      	b.n	8000484 <CAN_voidInit+0x26c>
		L_temp = A_rxConfig->FIFO1_IDs[i];			// SID1
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	68da      	ldr	r2, [r3, #12]
 8000440:	7f3b      	ldrb	r3, [r7, #28]
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO1_IDs[i] << 16);	// SID2
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	68da      	ldr	r2, [r3, #12]
 800044e:	7f3b      	ldrb	r3, [r7, #28]
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	041b      	lsls	r3, r3, #16
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	4313      	orrs	r3, r2
 800045c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 28);				// Store in FIFO1 (if filter matches)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800046c:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 800046e:	7fbb      	ldrb	r3, [r7, #30]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	77ba      	strb	r2, [r7, #30]
 8000474:	4619      	mov	r1, r3
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 800047e:	7f3b      	ldrb	r3, [r7, #28]
 8000480:	3301      	adds	r3, #1
 8000482:	773b      	strb	r3, [r7, #28]
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	7f3a      	ldrb	r2, [r7, #28]
 800048a:	429a      	cmp	r2, r3
 800048c:	d3d6      	bcc.n	800043c <CAN_voidInit+0x224>
	}

	/* Transmitter Configuration */
	if(A_txConfig->bufferType == CAN_TX_BUFFER_FIFO)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d114      	bne.n	80004c0 <CAN_voidInit+0x2a8>
		A_canx->TXBC &= ~(1 << 24);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800049c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80004a6:	e013      	b.n	80004d0 <CAN_voidInit+0x2b8>
 80004a8:	40006400 	.word	0x40006400
 80004ac:	4000a400 	.word	0x4000a400
 80004b0:	40006800 	.word	0x40006800
 80004b4:	4000a800 	.word	0x4000a800
 80004b8:	40006c00 	.word	0x40006c00
 80004bc:	4000ac00 	.word	0x4000ac00
	else // Queue FIFO
		A_canx->TXBC |= (1 << 24);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80004c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	if(A_txConfig->transmitPause == CAN_TX_PAUSE_DISABLE)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d106      	bne.n	80004e6 <CAN_voidInit+0x2ce>
		A_canx->CCCR &= ~(1 << 14);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	619a      	str	r2, [r3, #24]
 80004e4:	e005      	b.n	80004f2 <CAN_voidInit+0x2da>
	else
		A_canx->CCCR |= (1 << 14);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	619a      	str	r2, [r3, #24]

	if (A_txConfig->automaticTransmission == CAN_AUTOMATIC_TRANSMISSION_ENABLE)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d106      	bne.n	8000508 <CAN_voidInit+0x2f0>
		A_canx->CCCR &= ~(1 << 6);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	619a      	str	r2, [r3, #24]
 8000506:	e005      	b.n	8000514 <CAN_voidInit+0x2fc>
	else
		A_canx->CCCR |= (1 << 6);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	619a      	str	r2, [r3, #24]

	/* Exit Initialization and Enter Normal mode */
	A_canx->CCCR &= ~(1 << 1);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f023 0202 	bic.w	r2, r3, #2
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	619a      	str	r2, [r3, #24]
	A_canx->CCCR &= ~(1 << 0);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f023 0201 	bic.w	r2, r3, #1
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	619a      	str	r2, [r3, #24]
}
 800052c:	bf00      	nop
 800052e:	372c      	adds	r7, #44	; 0x2c
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <CAN_voidReceiveDataFrame>:

void CAN_voidReceiveDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame, u8 A_fifox)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	4a98      	ldr	r2, [pc, #608]	; (80007ac <CAN_voidReceiveDataFrame+0x274>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d102      	bne.n	8000554 <CAN_voidReceiveDataFrame+0x1c>
		L_msg = CAN1_MESSAGES;
 800054e:	4b98      	ldr	r3, [pc, #608]	; (80007b0 <CAN_voidReceiveDataFrame+0x278>)
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e00c      	b.n	800056e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN2)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a97      	ldr	r2, [pc, #604]	; (80007b4 <CAN_voidReceiveDataFrame+0x27c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d102      	bne.n	8000562 <CAN_voidReceiveDataFrame+0x2a>
		L_msg = CAN2_MESSAGES;
 800055c:	4b96      	ldr	r3, [pc, #600]	; (80007b8 <CAN_voidReceiveDataFrame+0x280>)
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e005      	b.n	800056e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN3)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4a95      	ldr	r2, [pc, #596]	; (80007bc <CAN_voidReceiveDataFrame+0x284>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d101      	bne.n	800056e <CAN_voidReceiveDataFrame+0x36>
			L_msg = CAN3_MESSAGES;
 800056a:	4b95      	ldr	r3, [pc, #596]	; (80007c0 <CAN_voidReceiveDataFrame+0x288>)
 800056c:	617b      	str	r3, [r7, #20]

	if(A_fifox == 0)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	f040 8085 	bne.w	8000680 <CAN_voidReceiveDataFrame+0x148>
	{
		u8 L_getIndex = (u8)((A_canx->RXF0S & (0b11 << 8)) >> 8);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0303 	and.w	r3, r3, #3
 8000584:	743b      	strb	r3, [r7, #16]

		A_frame->ide = ((L_msg->RxFIFO0[L_getIndex].ID >> 30) & 1);
 8000586:	7c3a      	ldrb	r2, [r7, #16]
 8000588:	6979      	ldr	r1, [r7, #20]
 800058a:	4613      	mov	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	33b0      	adds	r3, #176	; 0xb0
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	0f9b      	lsrs	r3, r3, #30
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO0[L_getIndex].ID >> 29) & 1);
 80005a6:	7c3a      	ldrb	r2, [r7, #16]
 80005a8:	6979      	ldr	r1, [r7, #20]
 80005aa:	4613      	mov	r3, r2
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	4413      	add	r3, r2
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	440b      	add	r3, r1
 80005b4:	33b0      	adds	r3, #176	; 0xb0
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	0f5b      	lsrs	r3, r3, #29
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	715a      	strb	r2, [r3, #5]

		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	799b      	ldrb	r3, [r3, #6]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <CAN_voidReceiveDataFrame+0xb4>
			A_frame->id = (L_msg->RxFIFO0[L_getIndex].ID >> 18) & (0b11111111111);
 80005ce:	7c3a      	ldrb	r2, [r7, #16]
 80005d0:	6979      	ldr	r1, [r7, #20]
 80005d2:	4613      	mov	r3, r2
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	4413      	add	r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	440b      	add	r3, r1
 80005dc:	33b0      	adds	r3, #176	; 0xb0
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	0c9b      	lsrs	r3, r3, #18
 80005e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e00c      	b.n	8000606 <CAN_voidReceiveDataFrame+0xce>
		else
			A_frame->id = L_msg->RxFIFO0[L_getIndex].ID & (0x1FFFFFFF);
 80005ec:	7c3a      	ldrb	r2, [r7, #16]
 80005ee:	6979      	ldr	r1, [r7, #20]
 80005f0:	4613      	mov	r3, r2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4413      	add	r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	440b      	add	r3, r1
 80005fa:	33b0      	adds	r3, #176	; 0xb0
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	601a      	str	r2, [r3, #0]

		if(A_frame->rtr == CAN_FRAME_DATA)
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d133      	bne.n	8000676 <CAN_voidReceiveDataFrame+0x13e>
		{
			A_frame->dlc = (u8)((L_msg->RxFIFO0[L_getIndex].DLC >> 16) & (0b1111));
 800060e:	7c3a      	ldrb	r2, [r7, #16]
 8000610:	6979      	ldr	r1, [r7, #20]
 8000612:	4613      	mov	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	440b      	add	r3, r1
 800061c:	33b4      	adds	r3, #180	; 0xb4
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 030f 	and.w	r3, r3, #15
 8000628:	b2da      	uxtb	r2, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	74fb      	strb	r3, [r7, #19]
 8000632:	e01b      	b.n	800066c <CAN_voidReceiveDataFrame+0x134>
				A_frame->data[i] = ((L_msg->RxFIFO0[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 8000634:	7c3a      	ldrb	r2, [r7, #16]
 8000636:	7cfb      	ldrb	r3, [r7, #19]
 8000638:	089b      	lsrs	r3, r3, #2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	6979      	ldr	r1, [r7, #20]
 8000640:	4613      	mov	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4403      	add	r3, r0
 800064a:	332e      	adds	r3, #46	; 0x2e
 800064c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000650:	7cfb      	ldrb	r3, [r7, #19]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	40da      	lsrs	r2, r3
 800065a:	7cfb      	ldrb	r3, [r7, #19]
 800065c:	b2d1      	uxtb	r1, r2
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	4413      	add	r3, r2
 8000662:	460a      	mov	r2, r1
 8000664:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8000666:	7cfb      	ldrb	r3, [r7, #19]
 8000668:	3301      	adds	r3, #1
 800066a:	74fb      	strb	r3, [r7, #19]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	7cfa      	ldrb	r2, [r7, #19]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3de      	bcc.n	8000634 <CAN_voidReceiveDataFrame+0xfc>
		}

		// Acknowledge Reading
		A_canx->RXF0A = L_getIndex;
 8000676:	7c3a      	ldrb	r2, [r7, #16]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		}

		// Acknowledge Reading
		A_canx->RXF1A |= (1 << L_getIndex);
	}
}
 800067e:	e08f      	b.n	80007a0 <CAN_voidReceiveDataFrame+0x268>
		u8 L_getIndex = (u8)((A_canx->RXF1S & (0b11 << 8)) >> 8);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0303 	and.w	r3, r3, #3
 800068e:	747b      	strb	r3, [r7, #17]
		A_frame->ide = ((L_msg->RxFIFO1[L_getIndex].ID >> 30) & 1);
 8000690:	7c7a      	ldrb	r2, [r7, #17]
 8000692:	6979      	ldr	r1, [r7, #20]
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	440b      	add	r3, r1
 800069e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	0f9b      	lsrs	r3, r3, #30
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO1[L_getIndex].ID >> 29) & 1);
 80006b2:	7c7a      	ldrb	r2, [r7, #17]
 80006b4:	6979      	ldr	r1, [r7, #20]
 80006b6:	4613      	mov	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	0f5b      	lsrs	r3, r3, #29
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	715a      	strb	r2, [r3, #5]
		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <CAN_voidReceiveDataFrame+0x1c4>
			A_frame->id = (L_msg->RxFIFO1[L_getIndex].ID >> 18) & (0b11111111111);
 80006dc:	7c7a      	ldrb	r2, [r7, #17]
 80006de:	6979      	ldr	r1, [r7, #20]
 80006e0:	4613      	mov	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	440b      	add	r3, r1
 80006ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c9b      	lsrs	r3, r3, #18
 80006f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e00d      	b.n	8000718 <CAN_voidReceiveDataFrame+0x1e0>
			A_frame->id = L_msg->RxFIFO1[L_getIndex].ID & (0x1FFFFFFF);
 80006fc:	7c7a      	ldrb	r2, [r7, #17]
 80006fe:	6979      	ldr	r1, [r7, #20]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	4413      	add	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	440b      	add	r3, r1
 800070a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	601a      	str	r2, [r3, #0]
		if(A_frame->rtr == CAN_FRAME_DATA)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d134      	bne.n	800078a <CAN_voidReceiveDataFrame+0x252>
			A_frame->dlc = (u8)((L_msg->RxFIFO1[L_getIndex].DLC >> 16) & (0b1111));
 8000720:	7c7a      	ldrb	r2, [r7, #17]
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	4613      	mov	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	b2da      	uxtb	r2, r3
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	74bb      	strb	r3, [r7, #18]
 8000746:	e01b      	b.n	8000780 <CAN_voidReceiveDataFrame+0x248>
				A_frame->data[i] = ((L_msg->RxFIFO1[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 8000748:	7c7a      	ldrb	r2, [r7, #17]
 800074a:	7cbb      	ldrb	r3, [r7, #18]
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	6979      	ldr	r1, [r7, #20]
 8000754:	4613      	mov	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4403      	add	r3, r0
 800075e:	3364      	adds	r3, #100	; 0x64
 8000760:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000764:	7cbb      	ldrb	r3, [r7, #18]
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	40da      	lsrs	r2, r3
 800076e:	7cbb      	ldrb	r3, [r7, #18]
 8000770:	b2d1      	uxtb	r1, r2
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	460a      	mov	r2, r1
 8000778:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 800077a:	7cbb      	ldrb	r3, [r7, #18]
 800077c:	3301      	adds	r3, #1
 800077e:	74bb      	strb	r3, [r7, #18]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	7cba      	ldrb	r2, [r7, #18]
 8000786:	429a      	cmp	r2, r3
 8000788:	d3de      	bcc.n	8000748 <CAN_voidReceiveDataFrame+0x210>
		A_canx->RXF1A |= (1 << L_getIndex);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000790:	7c7a      	ldrb	r2, [r7, #17]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	431a      	orrs	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80007a0:	bf00      	nop
 80007a2:	371c      	adds	r7, #28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40006400 	.word	0x40006400
 80007b0:	4000a400 	.word	0x4000a400
 80007b4:	40006800 	.word	0x40006800
 80007b8:	4000a800 	.word	0x4000a800
 80007bc:	40006c00 	.word	0x40006c00
 80007c0:	4000ac00 	.word	0x4000ac00

080007c4 <CAN_u8GetReceivedMessagesCount>:

u8 CAN_u8GetReceivedMessagesCount(CAN_RegMap_t* A_canx, u8 A_fifox)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	u8 L_result;
	if(A_fifox == CAN_RX_FIFO0)
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d107      	bne.n	80007e6 <CAN_u8GetReceivedMessagesCount+0x22>
		L_result = (u8)(A_canx->RXF0S & (0b1111 << 0));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e006      	b.n	80007f4 <CAN_u8GetReceivedMessagesCount+0x30>
	else
		L_result = (u8)(A_canx->RXF1S & (0b1111 << 0));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	73fb      	strb	r3, [r7, #15]
	return L_result;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <GPIO_voidSetPinMode>:
/************************************************************/
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D);
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc);

static void GPIO_voidSetPinMode(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Mode)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	460b      	mov	r3, r1
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	4613      	mov	r3, r2
 8000814:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b06      	cmp	r3, #6
 800081e:	d827      	bhi.n	8000870 <GPIO_voidSetPinMode+0x6c>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <GPIO_voidSetPinMode+0x24>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000845 	.word	0x08000845
 800082c:	0800084d 	.word	0x0800084d
 8000830:	08000853 	.word	0x08000853
 8000834:	08000859 	.word	0x08000859
 8000838:	0800085f 	.word	0x0800085f
 800083c:	08000865 	.word	0x08000865
 8000840:	0800086b 	.word	0x0800086b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000848:	60fb      	str	r3, [r7, #12]
		break;
 800084a:	e012      	b.n	8000872 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <GPIO_voidSetPinMode+0xa4>)
 800084e:	60fb      	str	r3, [r7, #12]
		break;
 8000850:	e00f      	b.n	8000872 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <GPIO_voidSetPinMode+0xa8>)
 8000854:	60fb      	str	r3, [r7, #12]
		break;
 8000856:	e00c      	b.n	8000872 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <GPIO_voidSetPinMode+0xac>)
 800085a:	60fb      	str	r3, [r7, #12]
		break;
 800085c:	e009      	b.n	8000872 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <GPIO_voidSetPinMode+0xb0>)
 8000860:	60fb      	str	r3, [r7, #12]
		break;
 8000862:	e006      	b.n	8000872 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <GPIO_voidSetPinMode+0xb4>)
 8000866:	60fb      	str	r3, [r7, #12]
		break;
 8000868:	e003      	b.n	8000872 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <GPIO_voidSetPinMode+0xb8>)
 800086c:	60fb      	str	r3, [r7, #12]
		break;
 800086e:	e000      	b.n	8000872 <GPIO_voidSetPinMode+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000870:	bf00      	nop
	}
	GPIOx->MODER &= ~(0b11<<(2*A_u8PinNo));
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	0052      	lsls	r2, r2, #1
 800087a:	2103      	movs	r1, #3
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (A_u8Mode<<(2*A_u8PinNo));
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	7979      	ldrb	r1, [r7, #5]
 800088e:	79ba      	ldrb	r2, [r7, #6]
 8000890:	0052      	lsls	r2, r2, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	431a      	orrs	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	48000400 	.word	0x48000400
 80008ac:	48000800 	.word	0x48000800
 80008b0:	48000c00 	.word	0x48000c00
 80008b4:	48001000 	.word	0x48001000
 80008b8:	48001400 	.word	0x48001400
 80008bc:	48001800 	.word	0x48001800

080008c0 <GPIO_voidSetPinOutput_typ_spd>:
static void GPIO_voidSetPinOutput_typ_spd(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Output_t, u8 A_u8OutputSpeed)
{
 80008c0:	b490      	push	{r4, r7}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4604      	mov	r4, r0
 80008c8:	4608      	mov	r0, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	4623      	mov	r3, r4
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	4603      	mov	r3, r0
 80008d4:	71bb      	strb	r3, [r7, #6]
 80008d6:	460b      	mov	r3, r1
 80008d8:	717b      	strb	r3, [r7, #5]
 80008da:	4613      	mov	r3, r2
 80008dc:	713b      	strb	r3, [r7, #4]
	GPIO_RegMap_t *GPIOx = NULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d827      	bhi.n	8000938 <GPIO_voidSetPinOutput_typ_spd+0x78>
 80008e8:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <GPIO_voidSetPinOutput_typ_spd+0x30>)
 80008ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	bf00      	nop
 80008f0:	0800090d 	.word	0x0800090d
 80008f4:	08000915 	.word	0x08000915
 80008f8:	0800091b 	.word	0x0800091b
 80008fc:	08000921 	.word	0x08000921
 8000900:	08000927 	.word	0x08000927
 8000904:	0800092d 	.word	0x0800092d
 8000908:	08000933 	.word	0x08000933
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 800090c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000910:	60fb      	str	r3, [r7, #12]
		break;
 8000912:	e012      	b.n	800093a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <GPIO_voidSetPinOutput_typ_spd+0xe4>)
 8000916:	60fb      	str	r3, [r7, #12]
		break;
 8000918:	e00f      	b.n	800093a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <GPIO_voidSetPinOutput_typ_spd+0xe8>)
 800091c:	60fb      	str	r3, [r7, #12]
		break;
 800091e:	e00c      	b.n	800093a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <GPIO_voidSetPinOutput_typ_spd+0xec>)
 8000922:	60fb      	str	r3, [r7, #12]
		break;
 8000924:	e009      	b.n	800093a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <GPIO_voidSetPinOutput_typ_spd+0xf0>)
 8000928:	60fb      	str	r3, [r7, #12]
		break;
 800092a:	e006      	b.n	800093a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <GPIO_voidSetPinOutput_typ_spd+0xf4>)
 800092e:	60fb      	str	r3, [r7, #12]
		break;
 8000930:	e003      	b.n	800093a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <GPIO_voidSetPinOutput_typ_spd+0xf8>)
 8000934:	60fb      	str	r3, [r7, #12]
		break;
 8000936:	e000      	b.n	800093a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	default:
		/* Port ID out of range */
		break;
 8000938:	bf00      	nop
	}
	if(A_u8Output_t == GPIO_OT_PUSHPULL)
 800093a:	797b      	ldrb	r3, [r7, #5]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10a      	bne.n	8000956 <GPIO_voidSetPinOutput_typ_spd+0x96>
	{
		/* Set pin type */
		CLR_BIT(GPIOx->OTYPER,A_u8PinNo);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	43d2      	mvns	r2, r2
 800094e:	401a      	ands	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	e00b      	b.n	800096e <GPIO_voidSetPinOutput_typ_spd+0xae>

	}else if(A_u8Output_t == GPIO_OT_OPEN_DRAIN)
 8000956:	797b      	ldrb	r3, [r7, #5]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d108      	bne.n	800096e <GPIO_voidSetPinOutput_typ_spd+0xae>
	{
		SET_BIT(GPIOx->OTYPER,A_u8PinNo);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	2101      	movs	r1, #1
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	431a      	orrs	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	605a      	str	r2, [r3, #4]
	}
	/* Set pin speed */
	GPIOx->OSPEEDR &= ~(0b11<<(2*A_u8PinNo));
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	79ba      	ldrb	r2, [r7, #6]
 8000974:	0052      	lsls	r2, r2, #1
 8000976:	2103      	movs	r1, #3
 8000978:	fa01 f202 	lsl.w	r2, r1, r2
 800097c:	43d2      	mvns	r2, r2
 800097e:	401a      	ands	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (A_u8OutputSpeed<<(2*A_u8PinNo));
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	7939      	ldrb	r1, [r7, #4]
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	0052      	lsls	r2, r2, #1
 800098e:	fa01 f202 	lsl.w	r2, r1, r2
 8000992:	431a      	orrs	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	609a      	str	r2, [r3, #8]
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bc90      	pop	{r4, r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	48000400 	.word	0x48000400
 80009a8:	48000800 	.word	0x48000800
 80009ac:	48000c00 	.word	0x48000c00
 80009b0:	48001000 	.word	0x48001000
 80009b4:	48001400 	.word	0x48001400
 80009b8:	48001800 	.word	0x48001800

080009bc <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PinValue)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	460b      	mov	r3, r1
 80009c8:	71bb      	strb	r3, [r7, #6]
 80009ca:	4613      	mov	r3, r2
 80009cc:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d827      	bhi.n	8000a28 <GPIO_voidSetPinValue+0x6c>
 80009d8:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <GPIO_voidSetPinValue+0x24>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	080009fd 	.word	0x080009fd
 80009e4:	08000a05 	.word	0x08000a05
 80009e8:	08000a0b 	.word	0x08000a0b
 80009ec:	08000a11 	.word	0x08000a11
 80009f0:	08000a17 	.word	0x08000a17
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	08000a23 	.word	0x08000a23
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 80009fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a00:	60fb      	str	r3, [r7, #12]
		break;
 8000a02:	e012      	b.n	8000a2a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <GPIO_voidSetPinValue+0xb0>)
 8000a06:	60fb      	str	r3, [r7, #12]
		break;
 8000a08:	e00f      	b.n	8000a2a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <GPIO_voidSetPinValue+0xb4>)
 8000a0c:	60fb      	str	r3, [r7, #12]
		break;
 8000a0e:	e00c      	b.n	8000a2a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <GPIO_voidSetPinValue+0xb8>)
 8000a12:	60fb      	str	r3, [r7, #12]
		break;
 8000a14:	e009      	b.n	8000a2a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <GPIO_voidSetPinValue+0xbc>)
 8000a18:	60fb      	str	r3, [r7, #12]
		break;
 8000a1a:	e006      	b.n	8000a2a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <GPIO_voidSetPinValue+0xc0>)
 8000a1e:	60fb      	str	r3, [r7, #12]
		break;
 8000a20:	e003      	b.n	8000a2a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <GPIO_voidSetPinValue+0xc4>)
 8000a24:	60fb      	str	r3, [r7, #12]
		break;
 8000a26:	e000      	b.n	8000a2a <GPIO_voidSetPinValue+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000a28:	bf00      	nop
	}
	if(A_u8PinValue == GPIO_VALUE_HIGH)
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d109      	bne.n	8000a44 <GPIO_voidSetPinValue+0x88>
	{
		SET_BIT(GPIOx->ODR,A_u8PinNo);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	2101      	movs	r1, #1
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	615a      	str	r2, [r3, #20]
	}
	else if(A_u8PinValue == GPIO_VALUE_LOW)
	{
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
	}
}
 8000a42:	e00c      	b.n	8000a5e <GPIO_voidSetPinValue+0xa2>
	else if(A_u8PinValue == GPIO_VALUE_LOW)
 8000a44:	797b      	ldrb	r3, [r7, #5]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d109      	bne.n	8000a5e <GPIO_voidSetPinValue+0xa2>
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	79ba      	ldrb	r2, [r7, #6]
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	43d2      	mvns	r2, r2
 8000a58:	401a      	ands	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	615a      	str	r2, [r3, #20]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800
 8000a74:	48000c00 	.word	0x48000c00
 8000a78:	48001000 	.word	0x48001000
 8000a7c:	48001400 	.word	0x48001400
 8000a80:	48001800 	.word	0x48001800

08000a84 <GPIO_voidSetPinPUPD>:
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	71bb      	strb	r3, [r7, #6]
 8000a92:	4613      	mov	r3, r2
 8000a94:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d827      	bhi.n	8000af0 <GPIO_voidSetPinPUPD+0x6c>
 8000aa0:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <GPIO_voidSetPinPUPD+0x24>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000ac5 	.word	0x08000ac5
 8000aac:	08000acd 	.word	0x08000acd
 8000ab0:	08000ad3 	.word	0x08000ad3
 8000ab4:	08000ad9 	.word	0x08000ad9
 8000ab8:	08000adf 	.word	0x08000adf
 8000abc:	08000ae5 	.word	0x08000ae5
 8000ac0:	08000aeb 	.word	0x08000aeb
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac8:	60fb      	str	r3, [r7, #12]
		break;
 8000aca:	e012      	b.n	8000af2 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <GPIO_voidSetPinPUPD+0xa4>)
 8000ace:	60fb      	str	r3, [r7, #12]
		break;
 8000ad0:	e00f      	b.n	8000af2 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <GPIO_voidSetPinPUPD+0xa8>)
 8000ad4:	60fb      	str	r3, [r7, #12]
		break;
 8000ad6:	e00c      	b.n	8000af2 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <GPIO_voidSetPinPUPD+0xac>)
 8000ada:	60fb      	str	r3, [r7, #12]
		break;
 8000adc:	e009      	b.n	8000af2 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <GPIO_voidSetPinPUPD+0xb0>)
 8000ae0:	60fb      	str	r3, [r7, #12]
		break;
 8000ae2:	e006      	b.n	8000af2 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <GPIO_voidSetPinPUPD+0xb4>)
 8000ae6:	60fb      	str	r3, [r7, #12]
		break;
 8000ae8:	e003      	b.n	8000af2 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <GPIO_voidSetPinPUPD+0xb8>)
 8000aec:	60fb      	str	r3, [r7, #12]
		break;
 8000aee:	e000      	b.n	8000af2 <GPIO_voidSetPinPUPD+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000af0:	bf00      	nop
	}
	GPIOx->PUPDR &= ~(0b11<<(2*A_u8PinNo));
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	2103      	movs	r1, #3
 8000afc:	fa01 f202 	lsl.w	r2, r1, r2
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (A_u8PullU_D<<(2*A_u8PinNo));
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	7979      	ldrb	r1, [r7, #5]
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	0052      	lsls	r2, r2, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	431a      	orrs	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	60da      	str	r2, [r3, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000c00 	.word	0x48000c00
 8000b34:	48001000 	.word	0x48001000
 8000b38:	48001400 	.word	0x48001400
 8000b3c:	48001800 	.word	0x48001800

08000b40 <GPIO_voidTogglePin>:
	}
	L_u8PinData = GET_BIT(GPIOx->IDR,A_u8PinNo);
	return L_u8PinData;
}
void GPIO_voidTogglePin(u8 A_u8PortID, u8 A_u8PinNo)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
	GPIO_RegMap_t *GPIOx = NULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d826      	bhi.n	8000ba8 <GPIO_voidTogglePin+0x68>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <GPIO_voidTogglePin+0x20>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b7d 	.word	0x08000b7d
 8000b64:	08000b85 	.word	0x08000b85
 8000b68:	08000b8b 	.word	0x08000b8b
 8000b6c:	08000b91 	.word	0x08000b91
 8000b70:	08000b97 	.word	0x08000b97
 8000b74:	08000b9d 	.word	0x08000b9d
 8000b78:	08000ba3 	.word	0x08000ba3
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000b7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b80:	60fb      	str	r3, [r7, #12]
		break;
 8000b82:	e012      	b.n	8000baa <GPIO_voidTogglePin+0x6a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <GPIO_voidTogglePin+0x88>)
 8000b86:	60fb      	str	r3, [r7, #12]
		break;
 8000b88:	e00f      	b.n	8000baa <GPIO_voidTogglePin+0x6a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <GPIO_voidTogglePin+0x8c>)
 8000b8c:	60fb      	str	r3, [r7, #12]
		break;
 8000b8e:	e00c      	b.n	8000baa <GPIO_voidTogglePin+0x6a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <GPIO_voidTogglePin+0x90>)
 8000b92:	60fb      	str	r3, [r7, #12]
		break;
 8000b94:	e009      	b.n	8000baa <GPIO_voidTogglePin+0x6a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <GPIO_voidTogglePin+0x94>)
 8000b98:	60fb      	str	r3, [r7, #12]
		break;
 8000b9a:	e006      	b.n	8000baa <GPIO_voidTogglePin+0x6a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <GPIO_voidTogglePin+0x98>)
 8000b9e:	60fb      	str	r3, [r7, #12]
		break;
 8000ba0:	e003      	b.n	8000baa <GPIO_voidTogglePin+0x6a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <GPIO_voidTogglePin+0x9c>)
 8000ba4:	60fb      	str	r3, [r7, #12]
		break;
 8000ba6:	e000      	b.n	8000baa <GPIO_voidTogglePin+0x6a>
	default:
		/* Port ID out of range */
		break;
 8000ba8:	bf00      	nop
	}
	TOG_BIT(GPIOx->ODR,A_u8PinNo);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	79ba      	ldrb	r2, [r7, #6]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	405a      	eors	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	615a      	str	r2, [r3, #20]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	48001400 	.word	0x48001400
 8000bdc:	48001800 	.word	0x48001800

08000be0 <GPIO_voidAltFunc>:
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	460b      	mov	r3, r1
 8000bec:	71bb      	strb	r3, [r7, #6]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	d827      	bhi.n	8000c4c <GPIO_voidAltFunc+0x6c>
 8000bfc:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <GPIO_voidAltFunc+0x24>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c21 	.word	0x08000c21
 8000c08:	08000c29 	.word	0x08000c29
 8000c0c:	08000c2f 	.word	0x08000c2f
 8000c10:	08000c35 	.word	0x08000c35
 8000c14:	08000c3b 	.word	0x08000c3b
 8000c18:	08000c41 	.word	0x08000c41
 8000c1c:	08000c47 	.word	0x08000c47
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c24:	60fb      	str	r3, [r7, #12]
		break;
 8000c26:	e012      	b.n	8000c4e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <GPIO_voidAltFunc+0xdc>)
 8000c2a:	60fb      	str	r3, [r7, #12]
		break;
 8000c2c:	e00f      	b.n	8000c4e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <GPIO_voidAltFunc+0xe0>)
 8000c30:	60fb      	str	r3, [r7, #12]
		break;
 8000c32:	e00c      	b.n	8000c4e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <GPIO_voidAltFunc+0xe4>)
 8000c36:	60fb      	str	r3, [r7, #12]
		break;
 8000c38:	e009      	b.n	8000c4e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <GPIO_voidAltFunc+0xe8>)
 8000c3c:	60fb      	str	r3, [r7, #12]
		break;
 8000c3e:	e006      	b.n	8000c4e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <GPIO_voidAltFunc+0xec>)
 8000c42:	60fb      	str	r3, [r7, #12]
		break;
 8000c44:	e003      	b.n	8000c4e <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <GPIO_voidAltFunc+0xf0>)
 8000c48:	60fb      	str	r3, [r7, #12]
		break;
 8000c4a:	e000      	b.n	8000c4e <GPIO_voidAltFunc+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000c4c:	bf00      	nop
	}
	if(A_u8PinNo < 8)
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	d815      	bhi.n	8000c80 <GPIO_voidAltFunc+0xa0>
	{
		GPIOx->AFRL &= ~(0b1111<<(4*A_u8PinNo));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	79ba      	ldrb	r2, [r7, #6]
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	43d2      	mvns	r2, r2
 8000c64:	401a      	ands	r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	621a      	str	r2, [r3, #32]
		GPIOx->AFRL |= (A_u8AltFunc<<(4*A_u8PinNo));
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	7979      	ldrb	r1, [r7, #5]
 8000c70:	79ba      	ldrb	r2, [r7, #6]
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	621a      	str	r2, [r3, #32]
	{
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
	}

}
 8000c7e:	e016      	b.n	8000cae <GPIO_voidAltFunc+0xce>
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	3a08      	subs	r2, #8
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	43d2      	mvns	r2, r2
 8000c92:	401a      	ands	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	7979      	ldrb	r1, [r7, #5]
 8000c9e:	79ba      	ldrb	r2, [r7, #6]
 8000ca0:	3a08      	subs	r2, #8
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	48001400 	.word	0x48001400
 8000cd0:	48001800 	.word	0x48001800

08000cd4 <GPIO_voidInitPin>:
		break;
	}
	GPIOx->ODR ^= 0xFFFF;
}
void GPIO_voidInitPin(MGPIO_Config_t *A_xPin_Port_Config)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinMode(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->Mode);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7818      	ldrb	r0, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7859      	ldrb	r1, [r3, #1]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f7ff fd8b 	bl	8000804 <GPIO_voidSetPinMode>
	GPIO_voidSetPinOutput_typ_spd(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->OutputType,A_xPin_Port_Config->OutputSpeed);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7818      	ldrb	r0, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7859      	ldrb	r1, [r3, #1]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	78da      	ldrb	r2, [r3, #3]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	f7ff fddf 	bl	80008c0 <GPIO_voidSetPinOutput_typ_spd>
	GPIO_voidSetPinPUPD(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->InputPull);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7818      	ldrb	r0, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7859      	ldrb	r1, [r3, #1]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f7ff feb8 	bl	8000a84 <GPIO_voidSetPinPUPD>
	GPIO_voidAltFunc(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->AltFunc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7818      	ldrb	r0, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7859      	ldrb	r1, [r3, #1]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	799b      	ldrb	r3, [r3, #6]
 8000d20:	461a      	mov	r2, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <GPIO_voidAltFunc>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <RCC_voidInit>:

/****************************************************************************/
/*							Function Implementation							*/
/****************************************************************************/
void RCC_voidInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	/*Clear All Registers To Avoid Errors*/
	RCC->CR = 0x00000000;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
	RCC->ICSCR = 0x00000000;
 8000d3a:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
	RCC->CFGR = 0x00000000;
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00000000;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
	RCC->BDCR = 0x00000000;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RCC->CSR = 0x00000000;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RCC->CRRCR = 0x00000000;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	/*Turn on the different clocks*/
	RCC->CR |= (RCC_HSI_ON<<8);			//HSI Clock ON
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSIKER_ON<<9);		//HSIKER Clock ON
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSE_ON<<16);		//HSE Clock ON
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSEBYP_ON<<18);		//HSE BYP ON
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]
	//RCC->CR |= (RCC_PLL_ON<<24);		//PLL Clock ON

	/*HSI Trimming Value Adjust*/
	RCC->ICSCR |= (RCC_HSITRIM_VAL<<24);
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <RCC_voidInit+0xb0>)
 8000d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d9e:	6053      	str	r3, [r2, #4]

	/*Select System Clock*/
	RCC->CFGR |= (RCC_SYSCLK_SEL<<0);
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <RCC_voidInit+0xb0>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <RCC_voidInit+0xb0>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6093      	str	r3, [r2, #8]
	/*Select Micro-controller Output Clock*/
	RCC->CFGR |= (RCC_MCO_SEL<<24);
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <RCC_voidInit+0xb0>)
 8000dae:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <RCC_voidInit+0xb0>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	6093      	str	r3, [r2, #8]

	/*Select Micro-controller Output Prescaler*/
	RCC->CFGR |= (RCC_MCO_PRE<<28);
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <RCC_voidInit+0xb0>)
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <RCC_voidInit+0xb0>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	6093      	str	r3, [r2, #8]
	/*Select AHB Prescaler*/
	RCC->CFGR |= (RCC_AHB_PRE<<4);
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <RCC_voidInit+0xb0>)
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <RCC_voidInit+0xb0>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	6093      	str	r3, [r2, #8]
	/*Select APB1 Prescaler*/
	RCC->CFGR |= (RCC_APB1_PRE<<8);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <RCC_voidInit+0xb0>)
 8000dc6:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <RCC_voidInit+0xb0>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	6093      	str	r3, [r2, #8]
	/*Select APB2 Prescaler*/
	RCC->CFGR |= (RCC_APB2_PRE<<11);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <RCC_voidInit+0xb0>)
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <RCC_voidInit+0xb0>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	6093      	str	r3, [r2, #8]


}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <RCC_voidPeripheralClockEnable>:
void RCC_voidPeripheralClockEnable(u8 A_u8BusName, RCC_Peripheral_t A_tPeripheral)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
	switch(A_u8BusName)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d850      	bhi.n	8000e9c <RCC_voidPeripheralClockEnable+0xb8>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <RCC_voidPeripheralClockEnable+0x1c>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e19 	.word	0x08000e19
 8000e04:	08000e2f 	.word	0x08000e2f
 8000e08:	08000e45 	.word	0x08000e45
 8000e0c:	08000e5b 	.word	0x08000e5b
 8000e10:	08000e71 	.word	0x08000e71
 8000e14:	08000e87 	.word	0x08000e87
	{
		case RCC_AHB1:
			SET_BIT(RCC->AHB1ENR, A_tPeripheral);
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1c:	79ba      	ldrb	r2, [r7, #6]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 8000e2c:	e036      	b.n	8000e9c <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB2:
			SET_BIT(RCC->AHB2ENR, A_tPeripheral);
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8000e42:	e02b      	b.n	8000e9c <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB3:
			SET_BIT(RCC->AHB3ENR, A_tPeripheral);
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8000e58:	e020      	b.n	8000e9c <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_1:
			SET_BIT(RCC->APB1ENR1, A_tPeripheral);
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	79ba      	ldrb	r2, [r7, #6]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8000e6e:	e015      	b.n	8000e9c <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_2:
			SET_BIT(RCC->APB1ENR2, A_tPeripheral);
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e74:	79ba      	ldrb	r2, [r7, #6]
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 8000e84:	e00a      	b.n	8000e9c <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB2:
			SET_BIT(RCC->APB2ENR, A_tPeripheral);
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	79ba      	ldrb	r2, [r7, #6]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	4611      	mov	r1, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <RCC_voidPeripheralClockEnable+0xc4>)
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 8000e9a:	bf00      	nop
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000

08000eac <main>:
void APP_voidGpioInit(void);
void APP_voidCanInit(void);
void delay(u32 ms);

int main()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b096      	sub	sp, #88	; 0x58
 8000eb0:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8000eb2:	f7ff ff3d 	bl	8000d30 <RCC_voidInit>
	RCC->CCIPR |= (1 << 25);
 8000eb6:	4b8c      	ldr	r3, [pc, #560]	; (80010e8 <main+0x23c>)
 8000eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebc:	4a8a      	ldr	r2, [pc, #552]	; (80010e8 <main+0x23c>)
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_A);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff ff8b 	bl	8000de4 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_B);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff ff87 	bl	8000de4 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_C);
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff83 	bl	8000de4 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, FDCAN);
 8000ede:	2119      	movs	r1, #25
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f7ff ff7f 	bl	8000de4 <RCC_voidPeripheralClockEnable>

	APP_voidGpioInit();
 8000ee6:	f000 f905 	bl	80010f4 <APP_voidGpioInit>
	APP_voidCanInit();
 8000eea:	f000 f963 	bl	80011b4 <APP_voidCanInit>

	// Initialize Variables
	CAN_Frame_t Frame[4];
	Frame[0].ide = CAN_FRAME_STANDARD_ID;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	76bb      	strb	r3, [r7, #26]
	Frame[0].id = 0x008;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	617b      	str	r3, [r7, #20]
	Frame[0].rtr = CAN_FRAME_DATA;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	767b      	strb	r3, [r7, #25]
	Frame[0].dlc = 8;
 8000efa:	2308      	movs	r3, #8
 8000efc:	763b      	strb	r3, [r7, #24]
	Frame[0].data[0] = 'H';
 8000efe:	2348      	movs	r3, #72	; 0x48
 8000f00:	76fb      	strb	r3, [r7, #27]
	Frame[0].data[1] = 'e';
 8000f02:	2365      	movs	r3, #101	; 0x65
 8000f04:	773b      	strb	r3, [r7, #28]
	Frame[0].data[2] = 'l';
 8000f06:	236c      	movs	r3, #108	; 0x6c
 8000f08:	777b      	strb	r3, [r7, #29]
	Frame[0].data[3] = 'l';
 8000f0a:	236c      	movs	r3, #108	; 0x6c
 8000f0c:	77bb      	strb	r3, [r7, #30]
	Frame[0].data[4] = 'o';
 8000f0e:	236f      	movs	r3, #111	; 0x6f
 8000f10:	77fb      	strb	r3, [r7, #31]
	Frame[0].data[5] = ' ';
 8000f12:	2320      	movs	r3, #32
 8000f14:	f887 3020 	strb.w	r3, [r7, #32]
	Frame[0].data[6] = 'H';
 8000f18:	2348      	movs	r3, #72	; 0x48
 8000f1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	Frame[0].data[7] = 'i';
 8000f1e:	2369      	movs	r3, #105	; 0x69
 8000f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	Frame[1].ide = CAN_FRAME_STANDARD_ID;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Frame[1].id = 0x009;
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
	Frame[1].rtr = CAN_FRAME_DATA;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Frame[1].dlc = 5;
 8000f34:	2305      	movs	r3, #5
 8000f36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Frame[1].data[0] = 'H';
 8000f3a:	2348      	movs	r3, #72	; 0x48
 8000f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	Frame[1].data[1] = 'e';
 8000f40:	2365      	movs	r3, #101	; 0x65
 8000f42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	Frame[1].data[2] = 'l';
 8000f46:	236c      	movs	r3, #108	; 0x6c
 8000f48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	Frame[1].data[3] = 'l';
 8000f4c:	236c      	movs	r3, #108	; 0x6c
 8000f4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Frame[1].data[4] = 'o';
 8000f52:	236f      	movs	r3, #111	; 0x6f
 8000f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Frame[1].data[5] = ' ';
 8000f58:	2320      	movs	r3, #32
 8000f5a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	Frame[1].data[6] = 'H';
 8000f5e:	2348      	movs	r3, #72	; 0x48
 8000f60:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	Frame[1].data[7] = 'i';
 8000f64:	2369      	movs	r3, #105	; 0x69
 8000f66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	Frame[2].ide = CAN_FRAME_STANDARD_ID;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	Frame[2].id = 0x00F;
 8000f70:	230f      	movs	r3, #15
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
	Frame[2].rtr = CAN_FRAME_REMOTE;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	Frame[2].dlc = 5;
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	Frame[2].data[0] = 'M';
 8000f80:	234d      	movs	r3, #77	; 0x4d
 8000f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Frame[2].data[1] = 'a';
 8000f86:	2361      	movs	r3, #97	; 0x61
 8000f88:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Frame[2].data[2] = 'h';
 8000f8c:	2368      	movs	r3, #104	; 0x68
 8000f8e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	Frame[2].data[3] = 'm';
 8000f92:	236d      	movs	r3, #109	; 0x6d
 8000f94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	Frame[2].data[4] = 'o';
 8000f98:	236f      	movs	r3, #111	; 0x6f
 8000f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Frame[2].data[5] = 'u';
 8000f9e:	2375      	movs	r3, #117	; 0x75
 8000fa0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Frame[2].data[6] = 'd';
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	Frame[2].data[7] = '0';
 8000faa:	2330      	movs	r3, #48	; 0x30
 8000fac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	Frame[3].ide = CAN_FRAME_STANDARD_ID;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	Frame[3].id = 0x00F;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
	Frame[3].rtr = CAN_FRAME_REMOTE;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	CAN_Frame_t receiveFrame;

	GPIO_voidSetPinValue(GPIO_PORTA, 3, 1);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fcf9 	bl	80009bc <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIO_PORTA, 9, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2109      	movs	r1, #9
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff fcf4 	bl	80009bc <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIO_PORTA, 10, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	210a      	movs	r1, #10
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fcef 	bl	80009bc <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIO_PORTC, 13, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	210d      	movs	r1, #13
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f7ff fcea 	bl	80009bc <GPIO_voidSetPinValue>

	u8 leds[3] = {9, 10, 3};
 8000fe8:	4a40      	ldr	r2, [pc, #256]	; (80010ec <main+0x240>)
 8000fea:	463b      	mov	r3, r7
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	8019      	strh	r1, [r3, #0]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	0c12      	lsrs	r2, r2, #16
 8000ff6:	701a      	strb	r2, [r3, #0]
	u8 matched = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(1)
	{

		if(CAN_u8GetReceivedMessagesCount(CAN1, CAN_RX_FIFO0) != 0)
 8000ffe:	2100      	movs	r1, #0
 8001000:	483b      	ldr	r0, [pc, #236]	; (80010f0 <main+0x244>)
 8001002:	f7ff fbdf 	bl	80007c4 <CAN_u8GetReceivedMessagesCount>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f8      	beq.n	8000ffe <main+0x152>
		{
			CAN_voidReceiveDataFrame(CAN1, &receiveFrame, CAN_RX_FIFO0);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4837      	ldr	r0, [pc, #220]	; (80010f0 <main+0x244>)
 8001014:	f7ff fa90 	bl	8000538 <CAN_voidReceiveDataFrame>

			for(u8 i = 0; i < 3; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800101e:	e05e      	b.n	80010de <main+0x232>
			{
				if(receiveFrame.id == Frame[i].id
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	3358      	adds	r3, #88	; 0x58
 800102a:	443b      	add	r3, r7
 800102c:	3b44      	subs	r3, #68	; 0x44
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d14f      	bne.n	80010d4 <main+0x228>
				&& receiveFrame.dlc == Frame[i].dlc
 8001034:	7a3a      	ldrb	r2, [r7, #8]
 8001036:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	3358      	adds	r3, #88	; 0x58
 800103e:	443b      	add	r3, r7
 8001040:	3b40      	subs	r3, #64	; 0x40
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d145      	bne.n	80010d4 <main+0x228>
				&& receiveFrame.rtr == Frame[i].rtr
 8001048:	7a7a      	ldrb	r2, [r7, #9]
 800104a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	3358      	adds	r3, #88	; 0x58
 8001052:	443b      	add	r3, r7
 8001054:	3b3f      	subs	r3, #63	; 0x3f
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d13b      	bne.n	80010d4 <main+0x228>
				)
				{
					matched = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					for(u8 j = 0; j < Frame[i].dlc; j++){
 8001062:	2300      	movs	r3, #0
 8001064:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001068:	e01a      	b.n	80010a0 <main+0x1f4>
						if(receiveFrame.data[j] != Frame[i].data[j]){
 800106a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800106e:	3358      	adds	r3, #88	; 0x58
 8001070:	443b      	add	r3, r7
 8001072:	f813 2c4d 	ldrb.w	r2, [r3, #-77]
 8001076:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 800107a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800107e:	0109      	lsls	r1, r1, #4
 8001080:	3158      	adds	r1, #88	; 0x58
 8001082:	4439      	add	r1, r7
 8001084:	440b      	add	r3, r1
 8001086:	3b3d      	subs	r3, #61	; 0x3d
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d003      	beq.n	8001096 <main+0x1ea>
							matched = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							break;
 8001094:	e00f      	b.n	80010b6 <main+0x20a>
					for(u8 j = 0; j < Frame[i].dlc; j++){
 8001096:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800109a:	3301      	adds	r3, #1
 800109c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80010a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	3358      	adds	r3, #88	; 0x58
 80010a8:	443b      	add	r3, r7
 80010aa:	3b40      	subs	r3, #64	; 0x40
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3d9      	bcc.n	800106a <main+0x1be>
						}
					}
					if(matched){
 80010b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <main+0x228>
						GPIO_voidTogglePin(GPIO_PORTA, leds[i]);
 80010be:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010c2:	3358      	adds	r3, #88	; 0x58
 80010c4:	443b      	add	r3, r7
 80010c6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80010ca:	4619      	mov	r1, r3
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fd37 	bl	8000b40 <GPIO_voidTogglePin>
						break;
 80010d2:	e008      	b.n	80010e6 <main+0x23a>
			for(u8 i = 0; i < 3; i++)
 80010d4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010d8:	3301      	adds	r3, #1
 80010da:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80010de:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d99c      	bls.n	8001020 <main+0x174>
		if(CAN_u8GetReceivedMessagesCount(CAN1, CAN_RX_FIFO0) != 0)
 80010e6:	e78a      	b.n	8000ffe <main+0x152>
 80010e8:	40021000 	.word	0x40021000
 80010ec:	0800131c 	.word	0x0800131c
 80010f0:	40006400 	.word	0x40006400

080010f4 <APP_voidGpioInit>:
		}
	}
}

void APP_voidGpioInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
	MGPIO_Config_t Tx2 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN2, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	f8c3 2003 	str.w	r2, [r3, #3]
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800110c:	2301      	movs	r3, #1
 800110e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001112:	2309      	movs	r3, #9
 8001114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	MGPIO_Config_t Rx2 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN3, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	f8c3 2003 	str.w	r2, [r3, #3]
 8001124:	2303      	movs	r3, #3
 8001126:	767b      	strb	r3, [r7, #25]
 8001128:	2301      	movs	r3, #1
 800112a:	76bb      	strb	r3, [r7, #26]
 800112c:	2309      	movs	r3, #9
 800112e:	77bb      	strb	r3, [r7, #30]
	MGPIO_Config_t Tx1 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	f8c3 2003 	str.w	r2, [r3, #3]
 800113c:	2309      	movs	r3, #9
 800113e:	747b      	strb	r3, [r7, #17]
 8001140:	2301      	movs	r3, #1
 8001142:	74bb      	strb	r3, [r7, #18]
 8001144:	2309      	movs	r3, #9
 8001146:	75bb      	strb	r3, [r7, #22]
	MGPIO_Config_t Rx1 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN10, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	f8c3 2003 	str.w	r2, [r3, #3]
 8001154:	230a      	movs	r3, #10
 8001156:	727b      	strb	r3, [r7, #9]
 8001158:	2301      	movs	r3, #1
 800115a:	72bb      	strb	r3, [r7, #10]
 800115c:	2309      	movs	r3, #9
 800115e:	73bb      	strb	r3, [r7, #14]

	MGPIO_Config_t PC13 = {.Port = GPIO_PORTC, .Pin = GPIO_PIN13, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	f8c3 2003 	str.w	r2, [r3, #3]
 800116a:	2302      	movs	r3, #2
 800116c:	703b      	strb	r3, [r7, #0]
 800116e:	230d      	movs	r3, #13
 8001170:	707b      	strb	r3, [r7, #1]
 8001172:	2301      	movs	r3, #1
 8001174:	70bb      	strb	r3, [r7, #2]
 8001176:	2309      	movs	r3, #9
 8001178:	71bb      	strb	r3, [r7, #6]

	GPIO_voidInitPin(&Tx1);
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fda8 	bl	8000cd4 <GPIO_voidInitPin>
	GPIO_voidInitPin(&Rx1);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fda3 	bl	8000cd4 <GPIO_voidInitPin>
	GPIO_voidInitPin(&Tx2);
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fd9e 	bl	8000cd4 <GPIO_voidInitPin>
	GPIO_voidInitPin(&Rx2);
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fd99 	bl	8000cd4 <GPIO_voidInitPin>

	GPIO_voidInitPin(&PC13);
 80011a2:	463b      	mov	r3, r7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fd95 	bl	8000cd4 <GPIO_voidInitPin>
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <APP_voidCanInit>:

void APP_voidCanInit(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0
	MGPIO_Config_t canTxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80011ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f8c3 2003 	str.w	r2, [r3, #3]
 80011c6:	2301      	movs	r3, #1
 80011c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80011cc:	2309      	movs	r3, #9
 80011ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80011d2:	2302      	movs	r3, #2
 80011d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80011d8:	2309      	movs	r3, #9
 80011da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	MGPIO_Config_t canRxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN8, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	f8c3 2003 	str.w	r2, [r3, #3]
 80011ea:	2301      	movs	r3, #1
 80011ec:	f887 3020 	strb.w	r3, [r7, #32]
 80011f0:	2308      	movs	r3, #8
 80011f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80011f6:	2302      	movs	r3, #2
 80011f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011fc:	2309      	movs	r3, #9
 80011fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	CAN_TxConfig_t txCfg;
	txCfg.automaticTransmission = CAN_AUTOMATIC_TRANSMISSION_DISABLE;
 8001202:	2301      	movs	r3, #1
 8001204:	77bb      	strb	r3, [r7, #30]
	txCfg.bufferType = CAN_TX_BUFFER_FIFO;
 8001206:	2300      	movs	r3, #0
 8001208:	777b      	strb	r3, [r7, #29]
	txCfg.transmitPause = CAN_TX_PAUSE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	773b      	strb	r3, [r7, #28]

	CAN_RxConfig_t rxCfg;
	rxCfg.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 800120e:	2301      	movs	r3, #1
 8001210:	737b      	strb	r3, [r7, #13]
	rxCfg.FIFO1_Mode = CAN_RX_FIFO_OVERWRITE;
 8001212:	2301      	movs	r3, #1
 8001214:	73bb      	strb	r3, [r7, #14]
	rxCfg.FIFO0_numberOfIDs = 3;
 8001216:	2303      	movs	r3, #3
 8001218:	73fb      	strb	r3, [r7, #15]
	rxCfg.FIFO1_numberOfIDs = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	743b      	strb	r3, [r7, #16]
	u32 ids[3] = {0x008, 0x009, 0x00F};
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <APP_voidCanInit+0xac>)
 8001220:	463b      	mov	r3, r7
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rxCfg.FIFO0_IDs = ids;
 8001228:	463b      	mov	r3, r7
 800122a:	617b      	str	r3, [r7, #20]
	rxCfg.FIFO1_IDs = NULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
	rxCfg.nonMatchingFrames = CAN_RX_REJECT;
 8001230:	2302      	movs	r3, #2
 8001232:	733b      	strb	r3, [r7, #12]

	GPIO_voidInitPin(&canTxPin);
 8001234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd4b 	bl	8000cd4 <GPIO_voidInitPin>
	GPIO_voidInitPin(&canRxPin);
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd46 	bl	8000cd4 <GPIO_voidInitPin>
	CAN_voidInit(CAN1, &rxCfg, &txCfg);
 8001248:	f107 021c 	add.w	r2, r7, #28
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <APP_voidCanInit+0xb0>)
 8001254:	f7fe ffe0 	bl	8000218 <CAN_voidInit>
}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	; 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	08001320 	.word	0x08001320
 8001264:	40006400 	.word	0x40006400

08001268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800126c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <LoopForever+0xe>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	; (80012b4 <LoopForever+0x16>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001296:	f000 f811 	bl	80012bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129a:	f7ff fe07 	bl	8000eac <main>

0800129e <LoopForever>:

LoopForever:
    b LoopForever
 800129e:	e7fe      	b.n	800129e <LoopForever>
  ldr   r0, =_estack
 80012a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80012ac:	08001334 	.word	0x08001334
  ldr r2, =_sbss
 80012b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80012b4:	2000001c 	.word	0x2000001c

080012b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>
	...

080012bc <__libc_init_array>:
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	4d0d      	ldr	r5, [pc, #52]	; (80012f4 <__libc_init_array+0x38>)
 80012c0:	4c0d      	ldr	r4, [pc, #52]	; (80012f8 <__libc_init_array+0x3c>)
 80012c2:	1b64      	subs	r4, r4, r5
 80012c4:	10a4      	asrs	r4, r4, #2
 80012c6:	2600      	movs	r6, #0
 80012c8:	42a6      	cmp	r6, r4
 80012ca:	d109      	bne.n	80012e0 <__libc_init_array+0x24>
 80012cc:	4d0b      	ldr	r5, [pc, #44]	; (80012fc <__libc_init_array+0x40>)
 80012ce:	4c0c      	ldr	r4, [pc, #48]	; (8001300 <__libc_init_array+0x44>)
 80012d0:	f000 f818 	bl	8001304 <_init>
 80012d4:	1b64      	subs	r4, r4, r5
 80012d6:	10a4      	asrs	r4, r4, #2
 80012d8:	2600      	movs	r6, #0
 80012da:	42a6      	cmp	r6, r4
 80012dc:	d105      	bne.n	80012ea <__libc_init_array+0x2e>
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e4:	4798      	blx	r3
 80012e6:	3601      	adds	r6, #1
 80012e8:	e7ee      	b.n	80012c8 <__libc_init_array+0xc>
 80012ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ee:	4798      	blx	r3
 80012f0:	3601      	adds	r6, #1
 80012f2:	e7f2      	b.n	80012da <__libc_init_array+0x1e>
 80012f4:	0800132c 	.word	0x0800132c
 80012f8:	0800132c 	.word	0x0800132c
 80012fc:	0800132c 	.word	0x0800132c
 8001300:	08001330 	.word	0x08001330

08001304 <_init>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr

08001310 <_fini>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr
