
FDCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001328  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001514  08001514  0001151c  2**0
                  CONTENTS
  4 .ARM          00000000  08001514  08001514  0001151c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001514  0800151c  0001151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001518  08001518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0001151c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001151c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001eb4  00000000  00000000  0001154c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b6  00000000  00000000  00013400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  000139b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  00013b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010a2  00000000  00000000  00013c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001065  00000000  00000000  00014d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000048f9  00000000  00000000  00015d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a660  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000504  00000000  00000000  0001a6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080014e8 	.word	0x080014e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080014e8 	.word	0x080014e8

08000218 <CAN_voidInit>:
 */

#include "CAN_Interface.h"

void CAN_voidInit(CAN_RegMap_t* A_canx, CAN_RxConfig_t* A_rxConfig, CAN_TxConfig_t* A_txConfig)
{
 8000218:	b480      	push	{r7}
 800021a:	b08b      	sub	sp, #44	; 0x2c
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	4aa0      	ldr	r2, [pc, #640]	; (80004a8 <CAN_voidInit+0x290>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d102      	bne.n	8000232 <CAN_voidInit+0x1a>
		L_msg = CAN1_MESSAGES;
 800022c:	4b9f      	ldr	r3, [pc, #636]	; (80004ac <CAN_voidInit+0x294>)
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
 8000230:	e00c      	b.n	800024c <CAN_voidInit+0x34>
	else if(A_canx == CAN2)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	4a9e      	ldr	r2, [pc, #632]	; (80004b0 <CAN_voidInit+0x298>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d102      	bne.n	8000240 <CAN_voidInit+0x28>
		L_msg = CAN2_MESSAGES;
 800023a:	4b9e      	ldr	r3, [pc, #632]	; (80004b4 <CAN_voidInit+0x29c>)
 800023c:	627b      	str	r3, [r7, #36]	; 0x24
 800023e:	e005      	b.n	800024c <CAN_voidInit+0x34>
	else if(A_canx == CAN3)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a9d      	ldr	r2, [pc, #628]	; (80004b8 <CAN_voidInit+0x2a0>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d101      	bne.n	800024c <CAN_voidInit+0x34>
			L_msg = CAN3_MESSAGES;
 8000248:	4b9c      	ldr	r3, [pc, #624]	; (80004bc <CAN_voidInit+0x2a4>)
 800024a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enter Initialization mode */
	A_canx->CCCR |= (1 << 0);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f043 0201 	orr.w	r2, r3, #1
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	619a      	str	r2, [r3, #24]
	while(! ((A_canx->CCCR >> 0) & 1));  // Wait to make sure INIT bit has been written (Recommendation from reference manual)
 8000258:	bf00      	nop
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0301 	and.w	r3, r3, #1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <CAN_voidInit+0x42>

	// might configure Timeout value here
	A_canx->CCCR |= (1 << 1);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f043 0202 	orr.w	r2, r3, #2
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	619a      	str	r2, [r3, #24]

/* Setup General Configuration */
#if CAN_FDCAN_OPERATION == CAN_FDCAN_DISABLE
		A_canx->CCCR &= ~(1 << 8);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 8);
#endif

#if CAN_BIT_RATE_SWITCHING == CAN_BIT_RATE_SWITCHING_DISABLE
		A_canx->CCCR &= ~(1 << 9);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 9);
#endif

#if CAN_EDGE_FILTERING == CAN_FILTERING_DISABLE
		A_canx->CCCR &= ~(1 << 13);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 13);
#endif

#if CAN_EXCEPTION_HANDLING == CAN_EXCEPTION_ENABLE
		A_canx->CCCR &= ~(1 << 12);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 12);
#endif

#if CAN_BUS_MONITORING == CAN_BUS_MONITORING_DISABLE
		A_canx->CCCR &= ~(1 << 5);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f023 0220 	bic.w	r2, r3, #32
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 5);
#endif

#if CAN_OPERATION_MODE == CAN_MODE_NORMAL_OPERATION
		A_canx->CCCR &= ~(1 << 2);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	f023 0204 	bic.w	r2, r3, #4
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 2);
#endif

	/* Timing Configuration */
	u32 L_timing = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 25);		// 3 is default value for NSJW (Nominal (re)synchronization jump width)
 80002be:	69bb      	ldr	r3, [r7, #24]
 80002c0:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80002c4:	61bb      	str	r3, [r7, #24]
	// L_timing |= (0 << 16);		// 0 is the default value for NBRP (Bit rate prescaler)
	L_timing |= (10 << 8);		// 10 is the default value for NTSEG1
 80002c6:	69bb      	ldr	r3, [r7, #24]
 80002c8:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80002cc:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 0);		// 3 is the default value for NTSEG2
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	f043 0303 	orr.w	r3, r3, #3
 80002d4:	61bb      	str	r3, [r7, #24]
	 * for 125kb  (8us)	 BRB = 8
	 * for 250kb  (4us)  BRB = 4
	 * for 500kb  (2us)  BRB = 2
	 * for 1000kb (1us)  BRB = 1
	 * */
	L_timing |= (CAN_BAUD_RATE << 16);
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002dc:	61bb      	str	r3, [r7, #24]

	A_canx->NBTP = L_timing;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	61da      	str	r2, [r3, #28]

	/* Receiver Configuration */
	if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO0){
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d108      	bne.n	80002fe <CAN_voidInit+0xe6>
		A_canx->RXGFC &= ~(0b11 << 4);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80002fc:	e01c      	b.n	8000338 <CAN_voidInit+0x120>
	}
	else if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO1){
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d110      	bne.n	8000328 <CAN_voidInit+0x110>
		A_canx->RXGFC &= ~(0b11 << 4);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800030c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		A_canx->RXGFC |= (1 << 4);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800031c:	f043 0210 	orr.w	r2, r3, #16
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000326:	e007      	b.n	8000338 <CAN_voidInit+0x120>
	}
	else{	// Reject
		A_canx->RXGFC |= (0b11 << 4);
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800032e:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	if(A_rxConfig->FIFO0_Mode == CAN_RX_FIFO_BLOCKING)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	785b      	ldrb	r3, [r3, #1]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d108      	bne.n	8000352 <CAN_voidInit+0x13a>
		A_canx->RXGFC &= ~(1 << 9);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000346:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000350:	e007      	b.n	8000362 <CAN_voidInit+0x14a>
	else	// Overwrite
		A_canx->RXGFC |= (1 << 9);
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000358:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	if(A_rxConfig->FIFO1_Mode == CAN_RX_FIFO_BLOCKING)
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	789b      	ldrb	r3, [r3, #2]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d108      	bne.n	800037c <CAN_voidInit+0x164>
			A_canx->RXGFC &= ~(1 << 8);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800037a:	e007      	b.n	800038c <CAN_voidInit+0x174>
		else
			A_canx->RXGFC |= (1 << 8);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	A_canx->RXGFC &= ~(0b11111 << 16);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000392:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	A_canx->RXGFC |= ((A_rxConfig->FIFO0_numberOfIDs + A_rxConfig->FIFO1_numberOfIDs) << 16);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	78d2      	ldrb	r2, [r2, #3]
 80003a6:	4611      	mov	r1, r2
 80003a8:	68ba      	ldr	r2, [r7, #8]
 80003aa:	7912      	ldrb	r2, [r2, #4]
 80003ac:	440a      	add	r2, r1
 80003ae:	0412      	lsls	r2, r2, #16
 80003b0:	431a      	orrs	r2, r3
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Flush SRAM */
	u32 pointer;
	pointer = (u32)L_msg;
 80003b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ba:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 80003bc:	2300      	movs	r3, #0
 80003be:	77fb      	strb	r3, [r7, #31]
 80003c0:	e008      	b.n	80003d4 <CAN_voidInit+0x1bc>
		*(u32 *)(pointer) = 0x00000000U;
 80003c2:	6a3b      	ldr	r3, [r7, #32]
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
		pointer += 4;
 80003c8:	6a3b      	ldr	r3, [r7, #32]
 80003ca:	3304      	adds	r3, #4
 80003cc:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 80003ce:	7ffb      	ldrb	r3, [r7, #31]
 80003d0:	3301      	adds	r3, #1
 80003d2:	77fb      	strb	r3, [r7, #31]
 80003d4:	7ffb      	ldrb	r3, [r7, #31]
 80003d6:	2bd3      	cmp	r3, #211	; 0xd3
 80003d8:	d9f3      	bls.n	80003c2 <CAN_voidInit+0x1aa>
	}

	/* Store The IDs */
	u32 L_temp;
	u8 L_idIndex = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	77bb      	strb	r3, [r7, #30]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 80003de:	2300      	movs	r3, #0
 80003e0:	777b      	strb	r3, [r7, #29]
 80003e2:	e023      	b.n	800042c <CAN_voidInit+0x214>
		L_temp = A_rxConfig->FIFO0_IDs[i];			// SID1
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	7f7b      	ldrb	r3, [r7, #29]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO0_IDs[i] << 16);	// SID2
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	7f7b      	ldrb	r3, [r7, #29]
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	041b      	lsls	r3, r3, #16
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	4313      	orrs	r3, r2
 8000404:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 27);				// Store in FIFO0 (if filter matches)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800040c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000414:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 8000416:	7fbb      	ldrb	r3, [r7, #30]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	77ba      	strb	r2, [r7, #30]
 800041c:	4619      	mov	r1, r3
 800041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 8000426:	7f7b      	ldrb	r3, [r7, #29]
 8000428:	3301      	adds	r3, #1
 800042a:	777b      	strb	r3, [r7, #29]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	7f7a      	ldrb	r2, [r7, #29]
 8000432:	429a      	cmp	r2, r3
 8000434:	d3d6      	bcc.n	80003e4 <CAN_voidInit+0x1cc>
	}

	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 8000436:	2300      	movs	r3, #0
 8000438:	773b      	strb	r3, [r7, #28]
 800043a:	e023      	b.n	8000484 <CAN_voidInit+0x26c>
		L_temp = A_rxConfig->FIFO1_IDs[i];			// SID1
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	68da      	ldr	r2, [r3, #12]
 8000440:	7f3b      	ldrb	r3, [r7, #28]
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO1_IDs[i] << 16);	// SID2
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	68da      	ldr	r2, [r3, #12]
 800044e:	7f3b      	ldrb	r3, [r7, #28]
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	041b      	lsls	r3, r3, #16
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	4313      	orrs	r3, r2
 800045c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 28);				// Store in FIFO1 (if filter matches)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800046c:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 800046e:	7fbb      	ldrb	r3, [r7, #30]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	77ba      	strb	r2, [r7, #30]
 8000474:	4619      	mov	r1, r3
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 800047e:	7f3b      	ldrb	r3, [r7, #28]
 8000480:	3301      	adds	r3, #1
 8000482:	773b      	strb	r3, [r7, #28]
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	7f3a      	ldrb	r2, [r7, #28]
 800048a:	429a      	cmp	r2, r3
 800048c:	d3d6      	bcc.n	800043c <CAN_voidInit+0x224>
	}

	/* Transmitter Configuration */
	if(A_txConfig->bufferType == CAN_TX_BUFFER_FIFO)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d114      	bne.n	80004c0 <CAN_voidInit+0x2a8>
		A_canx->TXBC &= ~(1 << 24);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800049c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80004a6:	e013      	b.n	80004d0 <CAN_voidInit+0x2b8>
 80004a8:	40006400 	.word	0x40006400
 80004ac:	4000a400 	.word	0x4000a400
 80004b0:	40006800 	.word	0x40006800
 80004b4:	4000a800 	.word	0x4000a800
 80004b8:	40006c00 	.word	0x40006c00
 80004bc:	4000ac00 	.word	0x4000ac00
	else // Queue FIFO
		A_canx->TXBC |= (1 << 24);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80004c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	if(A_txConfig->transmitPause == CAN_TX_PAUSE_DISABLE)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d106      	bne.n	80004e6 <CAN_voidInit+0x2ce>
		A_canx->CCCR &= ~(1 << 14);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	619a      	str	r2, [r3, #24]
 80004e4:	e005      	b.n	80004f2 <CAN_voidInit+0x2da>
	else
		A_canx->CCCR |= (1 << 14);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	619a      	str	r2, [r3, #24]

	if (A_txConfig->automaticTransmission == CAN_AUTOMATIC_TRANSMISSION_ENABLE)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d106      	bne.n	8000508 <CAN_voidInit+0x2f0>
		A_canx->CCCR &= ~(1 << 6);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	619a      	str	r2, [r3, #24]
 8000506:	e005      	b.n	8000514 <CAN_voidInit+0x2fc>
	else
		A_canx->CCCR |= (1 << 6);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	619a      	str	r2, [r3, #24]

	/* Exit Initialization and Enter Normal mode */
	A_canx->CCCR &= ~(1 << 1);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f023 0202 	bic.w	r2, r3, #2
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	619a      	str	r2, [r3, #24]
	A_canx->CCCR &= ~(1 << 0);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f023 0201 	bic.w	r2, r3, #1
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	619a      	str	r2, [r3, #24]
}
 800052c:	bf00      	nop
 800052e:	372c      	adds	r7, #44	; 0x2c
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <CAN_voidReceiveDataFrame>:

void CAN_voidReceiveDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame, u8 A_fifox)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	4a98      	ldr	r2, [pc, #608]	; (80007ac <CAN_voidReceiveDataFrame+0x274>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d102      	bne.n	8000554 <CAN_voidReceiveDataFrame+0x1c>
		L_msg = CAN1_MESSAGES;
 800054e:	4b98      	ldr	r3, [pc, #608]	; (80007b0 <CAN_voidReceiveDataFrame+0x278>)
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e00c      	b.n	800056e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN2)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a97      	ldr	r2, [pc, #604]	; (80007b4 <CAN_voidReceiveDataFrame+0x27c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d102      	bne.n	8000562 <CAN_voidReceiveDataFrame+0x2a>
		L_msg = CAN2_MESSAGES;
 800055c:	4b96      	ldr	r3, [pc, #600]	; (80007b8 <CAN_voidReceiveDataFrame+0x280>)
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e005      	b.n	800056e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN3)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4a95      	ldr	r2, [pc, #596]	; (80007bc <CAN_voidReceiveDataFrame+0x284>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d101      	bne.n	800056e <CAN_voidReceiveDataFrame+0x36>
			L_msg = CAN3_MESSAGES;
 800056a:	4b95      	ldr	r3, [pc, #596]	; (80007c0 <CAN_voidReceiveDataFrame+0x288>)
 800056c:	617b      	str	r3, [r7, #20]

	if(A_fifox == 0)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	f040 8085 	bne.w	8000680 <CAN_voidReceiveDataFrame+0x148>
	{
		u8 L_getIndex = (u8)((A_canx->RXF0S & (0b11 << 8)) >> 8);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0303 	and.w	r3, r3, #3
 8000584:	743b      	strb	r3, [r7, #16]

		A_frame->ide = ((L_msg->RxFIFO0[L_getIndex].ID >> 30) & 1);
 8000586:	7c3a      	ldrb	r2, [r7, #16]
 8000588:	6979      	ldr	r1, [r7, #20]
 800058a:	4613      	mov	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	33b0      	adds	r3, #176	; 0xb0
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	0f9b      	lsrs	r3, r3, #30
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO0[L_getIndex].ID >> 29) & 1);
 80005a6:	7c3a      	ldrb	r2, [r7, #16]
 80005a8:	6979      	ldr	r1, [r7, #20]
 80005aa:	4613      	mov	r3, r2
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	4413      	add	r3, r2
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	440b      	add	r3, r1
 80005b4:	33b0      	adds	r3, #176	; 0xb0
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	0f5b      	lsrs	r3, r3, #29
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	715a      	strb	r2, [r3, #5]

		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	799b      	ldrb	r3, [r3, #6]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <CAN_voidReceiveDataFrame+0xb4>
			A_frame->id = (L_msg->RxFIFO0[L_getIndex].ID >> 18) & (0b11111111111);
 80005ce:	7c3a      	ldrb	r2, [r7, #16]
 80005d0:	6979      	ldr	r1, [r7, #20]
 80005d2:	4613      	mov	r3, r2
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	4413      	add	r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	440b      	add	r3, r1
 80005dc:	33b0      	adds	r3, #176	; 0xb0
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	0c9b      	lsrs	r3, r3, #18
 80005e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e00c      	b.n	8000606 <CAN_voidReceiveDataFrame+0xce>
		else
			A_frame->id = L_msg->RxFIFO0[L_getIndex].ID & (0x1FFFFFFF);
 80005ec:	7c3a      	ldrb	r2, [r7, #16]
 80005ee:	6979      	ldr	r1, [r7, #20]
 80005f0:	4613      	mov	r3, r2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4413      	add	r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	440b      	add	r3, r1
 80005fa:	33b0      	adds	r3, #176	; 0xb0
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	601a      	str	r2, [r3, #0]

		if(A_frame->rtr == CAN_FRAME_DATA)
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d133      	bne.n	8000676 <CAN_voidReceiveDataFrame+0x13e>
		{
			A_frame->dlc = (u8)((L_msg->RxFIFO0[L_getIndex].DLC >> 16) & (0b1111));
 800060e:	7c3a      	ldrb	r2, [r7, #16]
 8000610:	6979      	ldr	r1, [r7, #20]
 8000612:	4613      	mov	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	440b      	add	r3, r1
 800061c:	33b4      	adds	r3, #180	; 0xb4
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 030f 	and.w	r3, r3, #15
 8000628:	b2da      	uxtb	r2, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	74fb      	strb	r3, [r7, #19]
 8000632:	e01b      	b.n	800066c <CAN_voidReceiveDataFrame+0x134>
				A_frame->data[i] = ((L_msg->RxFIFO0[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 8000634:	7c3a      	ldrb	r2, [r7, #16]
 8000636:	7cfb      	ldrb	r3, [r7, #19]
 8000638:	089b      	lsrs	r3, r3, #2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	6979      	ldr	r1, [r7, #20]
 8000640:	4613      	mov	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4403      	add	r3, r0
 800064a:	332e      	adds	r3, #46	; 0x2e
 800064c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000650:	7cfb      	ldrb	r3, [r7, #19]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	40da      	lsrs	r2, r3
 800065a:	7cfb      	ldrb	r3, [r7, #19]
 800065c:	b2d1      	uxtb	r1, r2
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	4413      	add	r3, r2
 8000662:	460a      	mov	r2, r1
 8000664:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8000666:	7cfb      	ldrb	r3, [r7, #19]
 8000668:	3301      	adds	r3, #1
 800066a:	74fb      	strb	r3, [r7, #19]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	7cfa      	ldrb	r2, [r7, #19]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3de      	bcc.n	8000634 <CAN_voidReceiveDataFrame+0xfc>
		}

		// Acknowledge Reading
		A_canx->RXF0A = L_getIndex;
 8000676:	7c3a      	ldrb	r2, [r7, #16]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		}

		// Acknowledge Reading
		A_canx->RXF1A |= (1 << L_getIndex);
	}
}
 800067e:	e08f      	b.n	80007a0 <CAN_voidReceiveDataFrame+0x268>
		u8 L_getIndex = (u8)((A_canx->RXF1S & (0b11 << 8)) >> 8);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0303 	and.w	r3, r3, #3
 800068e:	747b      	strb	r3, [r7, #17]
		A_frame->ide = ((L_msg->RxFIFO1[L_getIndex].ID >> 30) & 1);
 8000690:	7c7a      	ldrb	r2, [r7, #17]
 8000692:	6979      	ldr	r1, [r7, #20]
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	440b      	add	r3, r1
 800069e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	0f9b      	lsrs	r3, r3, #30
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO1[L_getIndex].ID >> 29) & 1);
 80006b2:	7c7a      	ldrb	r2, [r7, #17]
 80006b4:	6979      	ldr	r1, [r7, #20]
 80006b6:	4613      	mov	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	0f5b      	lsrs	r3, r3, #29
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	715a      	strb	r2, [r3, #5]
		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <CAN_voidReceiveDataFrame+0x1c4>
			A_frame->id = (L_msg->RxFIFO1[L_getIndex].ID >> 18) & (0b11111111111);
 80006dc:	7c7a      	ldrb	r2, [r7, #17]
 80006de:	6979      	ldr	r1, [r7, #20]
 80006e0:	4613      	mov	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	440b      	add	r3, r1
 80006ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c9b      	lsrs	r3, r3, #18
 80006f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e00d      	b.n	8000718 <CAN_voidReceiveDataFrame+0x1e0>
			A_frame->id = L_msg->RxFIFO1[L_getIndex].ID & (0x1FFFFFFF);
 80006fc:	7c7a      	ldrb	r2, [r7, #17]
 80006fe:	6979      	ldr	r1, [r7, #20]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	4413      	add	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	440b      	add	r3, r1
 800070a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	601a      	str	r2, [r3, #0]
		if(A_frame->rtr == CAN_FRAME_DATA)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d134      	bne.n	800078a <CAN_voidReceiveDataFrame+0x252>
			A_frame->dlc = (u8)((L_msg->RxFIFO1[L_getIndex].DLC >> 16) & (0b1111));
 8000720:	7c7a      	ldrb	r2, [r7, #17]
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	4613      	mov	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	b2da      	uxtb	r2, r3
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	74bb      	strb	r3, [r7, #18]
 8000746:	e01b      	b.n	8000780 <CAN_voidReceiveDataFrame+0x248>
				A_frame->data[i] = ((L_msg->RxFIFO1[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 8000748:	7c7a      	ldrb	r2, [r7, #17]
 800074a:	7cbb      	ldrb	r3, [r7, #18]
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	6979      	ldr	r1, [r7, #20]
 8000754:	4613      	mov	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4403      	add	r3, r0
 800075e:	3364      	adds	r3, #100	; 0x64
 8000760:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000764:	7cbb      	ldrb	r3, [r7, #18]
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	40da      	lsrs	r2, r3
 800076e:	7cbb      	ldrb	r3, [r7, #18]
 8000770:	b2d1      	uxtb	r1, r2
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	460a      	mov	r2, r1
 8000778:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 800077a:	7cbb      	ldrb	r3, [r7, #18]
 800077c:	3301      	adds	r3, #1
 800077e:	74bb      	strb	r3, [r7, #18]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	7cba      	ldrb	r2, [r7, #18]
 8000786:	429a      	cmp	r2, r3
 8000788:	d3de      	bcc.n	8000748 <CAN_voidReceiveDataFrame+0x210>
		A_canx->RXF1A |= (1 << L_getIndex);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000790:	7c7a      	ldrb	r2, [r7, #17]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	431a      	orrs	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80007a0:	bf00      	nop
 80007a2:	371c      	adds	r7, #28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40006400 	.word	0x40006400
 80007b0:	4000a400 	.word	0x4000a400
 80007b4:	40006800 	.word	0x40006800
 80007b8:	4000a800 	.word	0x4000a800
 80007bc:	40006c00 	.word	0x40006c00
 80007c0:	4000ac00 	.word	0x4000ac00

080007c4 <CAN_u8GetReceivedMessagesCount>:

u8 CAN_u8GetReceivedMessagesCount(CAN_RegMap_t* A_canx, u8 A_fifox)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	u8 L_result;
	if(A_fifox == CAN_RX_FIFO0)
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d107      	bne.n	80007e6 <CAN_u8GetReceivedMessagesCount+0x22>
		L_result = (u8)(A_canx->RXF0S & (0b1111 << 0));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e006      	b.n	80007f4 <CAN_u8GetReceivedMessagesCount+0x30>
	else
		L_result = (u8)(A_canx->RXF1S & (0b1111 << 0));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	73fb      	strb	r3, [r7, #15]
	return L_result;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <CAN_voidSendDataFrame>:
		L_result = (A_canx->RXF1S & (1 << 24)) >> 24;
	return L_result;
}

void CAN_voidSendDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a54      	ldr	r2, [pc, #336]	; (8000964 <CAN_voidSendDataFrame+0x160>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d102      	bne.n	800081c <CAN_voidSendDataFrame+0x18>
		L_msg = CAN1_MESSAGES;
 8000816:	4b54      	ldr	r3, [pc, #336]	; (8000968 <CAN_voidSendDataFrame+0x164>)
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	e00c      	b.n	8000836 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a53      	ldr	r2, [pc, #332]	; (800096c <CAN_voidSendDataFrame+0x168>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d102      	bne.n	800082a <CAN_voidSendDataFrame+0x26>
		L_msg = CAN2_MESSAGES;
 8000824:	4b52      	ldr	r3, [pc, #328]	; (8000970 <CAN_voidSendDataFrame+0x16c>)
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	e005      	b.n	8000836 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN3)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a51      	ldr	r2, [pc, #324]	; (8000974 <CAN_voidSendDataFrame+0x170>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <CAN_voidSendDataFrame+0x32>
			L_msg = CAN3_MESSAGES;
 8000832:	4b51      	ldr	r3, [pc, #324]	; (8000978 <CAN_voidSendDataFrame+0x174>)
 8000834:	61fb      	str	r3, [r7, #28]

	// Define the put index
	u8 L_putIndex = (u8)((A_canx->TXFQS >> 16) & 0b11);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800083c:	0c1b      	lsrs	r3, r3, #16
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	73bb      	strb	r3, [r7, #14]

	// write the message
	u32 L_tmp = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
	if(A_frame->ide == CAN_FRAME_EXTENDED_ID){
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	799b      	ldrb	r3, [r3, #6]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d107      	bne.n	8000862 <CAN_voidSendDataFrame+0x5e>
		L_tmp = A_frame->id;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	61bb      	str	r3, [r7, #24]
		L_tmp |= (1 << 30); // XTD bit
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	e003      	b.n	800086a <CAN_voidSendDataFrame+0x66>
	}
	else{
		L_tmp = A_frame->id << 18;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	049b      	lsls	r3, r3, #18
 8000868:	61bb      	str	r3, [r7, #24]
	}
	if(A_frame->rtr == CAN_FRAME_REMOTE){
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	795b      	ldrb	r3, [r3, #5]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <CAN_voidSendDataFrame+0x7c>
		L_tmp |= (1 << 29);
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000878:	61bb      	str	r3, [r7, #24]
		A_frame->dlc = 0;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
	}
	L_msg->TxBuffer[L_putIndex].ID = L_tmp;
 8000880:	7bba      	ldrb	r2, [r7, #14]
 8000882:	69f9      	ldr	r1, [r7, #28]
 8000884:	4613      	mov	r3, r2
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	4413      	add	r3, r2
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	440b      	add	r3, r1
 800088e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 23); // Don't store event
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 21); // Classic Can
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 20); // No bit rate switching
*/

	L_msg->TxBuffer[L_putIndex].DLC = (A_frame->dlc << 16); // write DLC
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	041b      	lsls	r3, r3, #16
 800089c:	7bba      	ldrb	r2, [r7, #14]
 800089e:	4618      	mov	r0, r3
 80008a0:	69f9      	ldr	r1, [r7, #28]
 80008a2:	4613      	mov	r3, r2
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4413      	add	r3, r2
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	440b      	add	r3, r1
 80008ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80008b0:	6018      	str	r0, [r3, #0]

	u32 data0 = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
	u32 data1 = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
	for(u8 i = 0; i < A_frame->dlc; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	e024      	b.n	800090a <CAN_voidSendDataFrame+0x106>
	{
		 if(i < 4)
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d80f      	bhi.n	80008e6 <CAN_voidSendDataFrame+0xe2>
			 data0 |= (u32)(A_frame->data[i] << (8 * (i%4)));
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	79db      	ldrb	r3, [r3, #7]
 80008ce:	461a      	mov	r2, r3
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00e      	b.n	8000904 <CAN_voidSendDataFrame+0x100>
		 else
			 data1 |= (u32)(A_frame->data[i] << (8 * (i%4)));
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	79db      	ldrb	r3, [r3, #7]
 80008ee:	461a      	mov	r2, r3
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
	for(u8 i = 0; i < A_frame->dlc; i++)
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	3301      	adds	r3, #1
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	7bfa      	ldrb	r2, [r7, #15]
 8000910:	429a      	cmp	r2, r3
 8000912:	d3d5      	bcc.n	80008c0 <CAN_voidSendDataFrame+0xbc>
	}
	L_msg->TxBuffer[L_putIndex].data[0] = data0;
 8000914:	7bba      	ldrb	r2, [r7, #14]
 8000916:	69f9      	ldr	r1, [r7, #28]
 8000918:	4613      	mov	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4413      	add	r3, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	440b      	add	r3, r1
 8000922:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].data[1] = data1;
 800092a:	7bba      	ldrb	r2, [r7, #14]
 800092c:	69f9      	ldr	r1, [r7, #28]
 800092e:	4613      	mov	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	4413      	add	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	440b      	add	r3, r1
 8000938:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	601a      	str	r2, [r3, #0]

	// Request Transmission
	A_canx->TXBAR |= (1 << L_putIndex);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000946:	7bba      	ldrb	r2, [r7, #14]
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	431a      	orrs	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	// Wait for transmission to be done
	//while(! ((A_canx->TXBTO >> L_putIndex) & 1) );
}
 8000956:	bf00      	nop
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40006400 	.word	0x40006400
 8000968:	4000a400 	.word	0x4000a400
 800096c:	40006800 	.word	0x40006800
 8000970:	4000a800 	.word	0x4000a800
 8000974:	40006c00 	.word	0x40006c00
 8000978:	4000ac00 	.word	0x4000ac00

0800097c <GPIO_voidSetPinMode>:
/************************************************************/
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D);
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc);

static void GPIO_voidSetPinMode(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Mode)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	460b      	mov	r3, r1
 8000988:	71bb      	strb	r3, [r7, #6]
 800098a:	4613      	mov	r3, r2
 800098c:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b06      	cmp	r3, #6
 8000996:	d827      	bhi.n	80009e8 <GPIO_voidSetPinMode+0x6c>
 8000998:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <GPIO_voidSetPinMode+0x24>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	080009bd 	.word	0x080009bd
 80009a4:	080009c5 	.word	0x080009c5
 80009a8:	080009cb 	.word	0x080009cb
 80009ac:	080009d1 	.word	0x080009d1
 80009b0:	080009d7 	.word	0x080009d7
 80009b4:	080009dd 	.word	0x080009dd
 80009b8:	080009e3 	.word	0x080009e3
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 80009bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009c0:	60fb      	str	r3, [r7, #12]
		break;
 80009c2:	e012      	b.n	80009ea <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <GPIO_voidSetPinMode+0xa4>)
 80009c6:	60fb      	str	r3, [r7, #12]
		break;
 80009c8:	e00f      	b.n	80009ea <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <GPIO_voidSetPinMode+0xa8>)
 80009cc:	60fb      	str	r3, [r7, #12]
		break;
 80009ce:	e00c      	b.n	80009ea <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <GPIO_voidSetPinMode+0xac>)
 80009d2:	60fb      	str	r3, [r7, #12]
		break;
 80009d4:	e009      	b.n	80009ea <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <GPIO_voidSetPinMode+0xb0>)
 80009d8:	60fb      	str	r3, [r7, #12]
		break;
 80009da:	e006      	b.n	80009ea <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <GPIO_voidSetPinMode+0xb4>)
 80009de:	60fb      	str	r3, [r7, #12]
		break;
 80009e0:	e003      	b.n	80009ea <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <GPIO_voidSetPinMode+0xb8>)
 80009e4:	60fb      	str	r3, [r7, #12]
		break;
 80009e6:	e000      	b.n	80009ea <GPIO_voidSetPinMode+0x6e>
	default:
		/* Port ID out of range */
		break;
 80009e8:	bf00      	nop
	}
	GPIOx->MODER &= ~(0b11<<(2*A_u8PinNo));
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	79ba      	ldrb	r2, [r7, #6]
 80009f0:	0052      	lsls	r2, r2, #1
 80009f2:	2103      	movs	r1, #3
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	401a      	ands	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (A_u8Mode<<(2*A_u8PinNo));
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	7979      	ldrb	r1, [r7, #5]
 8000a06:	79ba      	ldrb	r2, [r7, #6]
 8000a08:	0052      	lsls	r2, r2, #1
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	48000400 	.word	0x48000400
 8000a24:	48000800 	.word	0x48000800
 8000a28:	48000c00 	.word	0x48000c00
 8000a2c:	48001000 	.word	0x48001000
 8000a30:	48001400 	.word	0x48001400
 8000a34:	48001800 	.word	0x48001800

08000a38 <GPIO_voidSetPinOutput_typ_spd>:
static void GPIO_voidSetPinOutput_typ_spd(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Output_t, u8 A_u8OutputSpeed)
{
 8000a38:	b490      	push	{r4, r7}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4604      	mov	r4, r0
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4623      	mov	r3, r4
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71bb      	strb	r3, [r7, #6]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	717b      	strb	r3, [r7, #5]
 8000a52:	4613      	mov	r3, r2
 8000a54:	713b      	strb	r3, [r7, #4]
	GPIO_RegMap_t *GPIOx = NULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	d827      	bhi.n	8000ab0 <GPIO_voidSetPinOutput_typ_spd+0x78>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <GPIO_voidSetPinOutput_typ_spd+0x30>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a85 	.word	0x08000a85
 8000a6c:	08000a8d 	.word	0x08000a8d
 8000a70:	08000a93 	.word	0x08000a93
 8000a74:	08000a99 	.word	0x08000a99
 8000a78:	08000a9f 	.word	0x08000a9f
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	08000aab 	.word	0x08000aab
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000a84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a88:	60fb      	str	r3, [r7, #12]
		break;
 8000a8a:	e012      	b.n	8000ab2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <GPIO_voidSetPinOutput_typ_spd+0xe4>)
 8000a8e:	60fb      	str	r3, [r7, #12]
		break;
 8000a90:	e00f      	b.n	8000ab2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <GPIO_voidSetPinOutput_typ_spd+0xe8>)
 8000a94:	60fb      	str	r3, [r7, #12]
		break;
 8000a96:	e00c      	b.n	8000ab2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <GPIO_voidSetPinOutput_typ_spd+0xec>)
 8000a9a:	60fb      	str	r3, [r7, #12]
		break;
 8000a9c:	e009      	b.n	8000ab2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <GPIO_voidSetPinOutput_typ_spd+0xf0>)
 8000aa0:	60fb      	str	r3, [r7, #12]
		break;
 8000aa2:	e006      	b.n	8000ab2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <GPIO_voidSetPinOutput_typ_spd+0xf4>)
 8000aa6:	60fb      	str	r3, [r7, #12]
		break;
 8000aa8:	e003      	b.n	8000ab2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <GPIO_voidSetPinOutput_typ_spd+0xf8>)
 8000aac:	60fb      	str	r3, [r7, #12]
		break;
 8000aae:	e000      	b.n	8000ab2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	default:
		/* Port ID out of range */
		break;
 8000ab0:	bf00      	nop
	}
	if(A_u8Output_t == GPIO_OT_PUSHPULL)
 8000ab2:	797b      	ldrb	r3, [r7, #5]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10a      	bne.n	8000ace <GPIO_voidSetPinOutput_typ_spd+0x96>
	{
		/* Set pin type */
		CLR_BIT(GPIOx->OTYPER,A_u8PinNo);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	79ba      	ldrb	r2, [r7, #6]
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	e00b      	b.n	8000ae6 <GPIO_voidSetPinOutput_typ_spd+0xae>

	}else if(A_u8Output_t == GPIO_OT_OPEN_DRAIN)
 8000ace:	797b      	ldrb	r3, [r7, #5]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d108      	bne.n	8000ae6 <GPIO_voidSetPinOutput_typ_spd+0xae>
	{
		SET_BIT(GPIOx->OTYPER,A_u8PinNo);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	605a      	str	r2, [r3, #4]
	}
	/* Set pin speed */
	GPIOx->OSPEEDR &= ~(0b11<<(2*A_u8PinNo));
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	79ba      	ldrb	r2, [r7, #6]
 8000aec:	0052      	lsls	r2, r2, #1
 8000aee:	2103      	movs	r1, #3
 8000af0:	fa01 f202 	lsl.w	r2, r1, r2
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (A_u8OutputSpeed<<(2*A_u8PinNo));
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	7939      	ldrb	r1, [r7, #4]
 8000b02:	79ba      	ldrb	r2, [r7, #6]
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc90      	pop	{r4, r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000c00 	.word	0x48000c00
 8000b28:	48001000 	.word	0x48001000
 8000b2c:	48001400 	.word	0x48001400
 8000b30:	48001800 	.word	0x48001800

08000b34 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PinValue)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	71bb      	strb	r3, [r7, #6]
 8000b42:	4613      	mov	r3, r2
 8000b44:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b06      	cmp	r3, #6
 8000b4e:	d827      	bhi.n	8000ba0 <GPIO_voidSetPinValue+0x6c>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <GPIO_voidSetPinValue+0x24>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b75 	.word	0x08000b75
 8000b5c:	08000b7d 	.word	0x08000b7d
 8000b60:	08000b83 	.word	0x08000b83
 8000b64:	08000b89 	.word	0x08000b89
 8000b68:	08000b8f 	.word	0x08000b8f
 8000b6c:	08000b95 	.word	0x08000b95
 8000b70:	08000b9b 	.word	0x08000b9b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b78:	60fb      	str	r3, [r7, #12]
		break;
 8000b7a:	e012      	b.n	8000ba2 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <GPIO_voidSetPinValue+0xb0>)
 8000b7e:	60fb      	str	r3, [r7, #12]
		break;
 8000b80:	e00f      	b.n	8000ba2 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <GPIO_voidSetPinValue+0xb4>)
 8000b84:	60fb      	str	r3, [r7, #12]
		break;
 8000b86:	e00c      	b.n	8000ba2 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <GPIO_voidSetPinValue+0xb8>)
 8000b8a:	60fb      	str	r3, [r7, #12]
		break;
 8000b8c:	e009      	b.n	8000ba2 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <GPIO_voidSetPinValue+0xbc>)
 8000b90:	60fb      	str	r3, [r7, #12]
		break;
 8000b92:	e006      	b.n	8000ba2 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <GPIO_voidSetPinValue+0xc0>)
 8000b96:	60fb      	str	r3, [r7, #12]
		break;
 8000b98:	e003      	b.n	8000ba2 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <GPIO_voidSetPinValue+0xc4>)
 8000b9c:	60fb      	str	r3, [r7, #12]
		break;
 8000b9e:	e000      	b.n	8000ba2 <GPIO_voidSetPinValue+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000ba0:	bf00      	nop
	}
	if(A_u8PinValue == GPIO_VALUE_HIGH)
 8000ba2:	797b      	ldrb	r3, [r7, #5]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d109      	bne.n	8000bbc <GPIO_voidSetPinValue+0x88>
	{
		SET_BIT(GPIOx->ODR,A_u8PinNo);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	79ba      	ldrb	r2, [r7, #6]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	615a      	str	r2, [r3, #20]
	}
	else if(A_u8PinValue == GPIO_VALUE_LOW)
	{
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
	}
}
 8000bba:	e00c      	b.n	8000bd6 <GPIO_voidSetPinValue+0xa2>
	else if(A_u8PinValue == GPIO_VALUE_LOW)
 8000bbc:	797b      	ldrb	r3, [r7, #5]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d109      	bne.n	8000bd6 <GPIO_voidSetPinValue+0xa2>
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	79ba      	ldrb	r2, [r7, #6]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	fa01 f202 	lsl.w	r2, r1, r2
 8000bce:	43d2      	mvns	r2, r2
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	615a      	str	r2, [r3, #20]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00
 8000bf0:	48001000 	.word	0x48001000
 8000bf4:	48001400 	.word	0x48001400
 8000bf8:	48001800 	.word	0x48001800

08000bfc <GPIO_voidSetPinPUPD>:
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	460b      	mov	r3, r1
 8000c08:	71bb      	strb	r3, [r7, #6]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b06      	cmp	r3, #6
 8000c16:	d827      	bhi.n	8000c68 <GPIO_voidSetPinPUPD+0x6c>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <GPIO_voidSetPinPUPD+0x24>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c3d 	.word	0x08000c3d
 8000c24:	08000c45 	.word	0x08000c45
 8000c28:	08000c4b 	.word	0x08000c4b
 8000c2c:	08000c51 	.word	0x08000c51
 8000c30:	08000c57 	.word	0x08000c57
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	08000c63 	.word	0x08000c63
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000c3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c40:	60fb      	str	r3, [r7, #12]
		break;
 8000c42:	e012      	b.n	8000c6a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <GPIO_voidSetPinPUPD+0xa4>)
 8000c46:	60fb      	str	r3, [r7, #12]
		break;
 8000c48:	e00f      	b.n	8000c6a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <GPIO_voidSetPinPUPD+0xa8>)
 8000c4c:	60fb      	str	r3, [r7, #12]
		break;
 8000c4e:	e00c      	b.n	8000c6a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <GPIO_voidSetPinPUPD+0xac>)
 8000c52:	60fb      	str	r3, [r7, #12]
		break;
 8000c54:	e009      	b.n	8000c6a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <GPIO_voidSetPinPUPD+0xb0>)
 8000c58:	60fb      	str	r3, [r7, #12]
		break;
 8000c5a:	e006      	b.n	8000c6a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <GPIO_voidSetPinPUPD+0xb4>)
 8000c5e:	60fb      	str	r3, [r7, #12]
		break;
 8000c60:	e003      	b.n	8000c6a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <GPIO_voidSetPinPUPD+0xb8>)
 8000c64:	60fb      	str	r3, [r7, #12]
		break;
 8000c66:	e000      	b.n	8000c6a <GPIO_voidSetPinPUPD+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000c68:	bf00      	nop
	}
	GPIOx->PUPDR &= ~(0b11<<(2*A_u8PinNo));
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	79ba      	ldrb	r2, [r7, #6]
 8000c70:	0052      	lsls	r2, r2, #1
 8000c72:	2103      	movs	r1, #3
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (A_u8PullU_D<<(2*A_u8PinNo));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	7979      	ldrb	r1, [r7, #5]
 8000c86:	79ba      	ldrb	r2, [r7, #6]
 8000c88:	0052      	lsls	r2, r2, #1
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	60da      	str	r2, [r3, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	48001000 	.word	0x48001000
 8000cb0:	48001400 	.word	0x48001400
 8000cb4:	48001800 	.word	0x48001800

08000cb8 <GPIO_voidAltFunc>:
		break;
	}
	TOG_BIT(GPIOx->ODR,A_u8PinNo);
}
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	71bb      	strb	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b06      	cmp	r3, #6
 8000cd2:	d827      	bhi.n	8000d24 <GPIO_voidAltFunc+0x6c>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <GPIO_voidAltFunc+0x24>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000cf9 	.word	0x08000cf9
 8000ce0:	08000d01 	.word	0x08000d01
 8000ce4:	08000d07 	.word	0x08000d07
 8000ce8:	08000d0d 	.word	0x08000d0d
 8000cec:	08000d13 	.word	0x08000d13
 8000cf0:	08000d19 	.word	0x08000d19
 8000cf4:	08000d1f 	.word	0x08000d1f
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000cf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cfc:	60fb      	str	r3, [r7, #12]
		break;
 8000cfe:	e012      	b.n	8000d26 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <GPIO_voidAltFunc+0xdc>)
 8000d02:	60fb      	str	r3, [r7, #12]
		break;
 8000d04:	e00f      	b.n	8000d26 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <GPIO_voidAltFunc+0xe0>)
 8000d08:	60fb      	str	r3, [r7, #12]
		break;
 8000d0a:	e00c      	b.n	8000d26 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <GPIO_voidAltFunc+0xe4>)
 8000d0e:	60fb      	str	r3, [r7, #12]
		break;
 8000d10:	e009      	b.n	8000d26 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <GPIO_voidAltFunc+0xe8>)
 8000d14:	60fb      	str	r3, [r7, #12]
		break;
 8000d16:	e006      	b.n	8000d26 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <GPIO_voidAltFunc+0xec>)
 8000d1a:	60fb      	str	r3, [r7, #12]
		break;
 8000d1c:	e003      	b.n	8000d26 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <GPIO_voidAltFunc+0xf0>)
 8000d20:	60fb      	str	r3, [r7, #12]
		break;
 8000d22:	e000      	b.n	8000d26 <GPIO_voidAltFunc+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000d24:	bf00      	nop
	}
	if(A_u8PinNo < 8)
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d815      	bhi.n	8000d58 <GPIO_voidAltFunc+0xa0>
	{
		GPIOx->AFRL &= ~(0b1111<<(4*A_u8PinNo));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	79ba      	ldrb	r2, [r7, #6]
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	210f      	movs	r1, #15
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	43d2      	mvns	r2, r2
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	621a      	str	r2, [r3, #32]
		GPIOx->AFRL |= (A_u8AltFunc<<(4*A_u8PinNo));
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	7979      	ldrb	r1, [r7, #5]
 8000d48:	79ba      	ldrb	r2, [r7, #6]
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	431a      	orrs	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	621a      	str	r2, [r3, #32]
	{
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
	}

}
 8000d56:	e016      	b.n	8000d86 <GPIO_voidAltFunc+0xce>
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	3a08      	subs	r2, #8
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	210f      	movs	r1, #15
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d74:	7979      	ldrb	r1, [r7, #5]
 8000d76:	79ba      	ldrb	r2, [r7, #6]
 8000d78:	3a08      	subs	r2, #8
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	431a      	orrs	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	48000400 	.word	0x48000400
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	48000c00 	.word	0x48000c00
 8000da0:	48001000 	.word	0x48001000
 8000da4:	48001400 	.word	0x48001400
 8000da8:	48001800 	.word	0x48001800

08000dac <GPIO_voidInitPin>:
		break;
	}
	GPIOx->ODR ^= 0xFFFF;
}
void GPIO_voidInitPin(MGPIO_Config_t *A_xPin_Port_Config)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinMode(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->Mode);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7818      	ldrb	r0, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7859      	ldrb	r1, [r3, #1]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	f7ff fddb 	bl	800097c <GPIO_voidSetPinMode>
	GPIO_voidSetPinOutput_typ_spd(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->OutputType,A_xPin_Port_Config->OutputSpeed);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7818      	ldrb	r0, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7859      	ldrb	r1, [r3, #1]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	78da      	ldrb	r2, [r3, #3]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	791b      	ldrb	r3, [r3, #4]
 8000dd6:	f7ff fe2f 	bl	8000a38 <GPIO_voidSetPinOutput_typ_spd>
	GPIO_voidSetPinPUPD(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->InputPull);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7818      	ldrb	r0, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7859      	ldrb	r1, [r3, #1]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	795b      	ldrb	r3, [r3, #5]
 8000de6:	461a      	mov	r2, r3
 8000de8:	f7ff ff08 	bl	8000bfc <GPIO_voidSetPinPUPD>
	GPIO_voidAltFunc(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->AltFunc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7818      	ldrb	r0, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7859      	ldrb	r1, [r3, #1]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	799b      	ldrb	r3, [r3, #6]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <GPIO_voidAltFunc>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <RCC_voidInit>:

/****************************************************************************/
/*							Function Implementation							*/
/****************************************************************************/
void RCC_voidInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	/*Clear All Registers To Avoid Errors*/
	RCC->CR = 0x00000000;
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
	RCC->ICSCR = 0x00000000;
 8000e12:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
	RCC->CFGR = 0x00000000;
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00000000;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
	RCC->BDCR = 0x00000000;
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RCC->CSR = 0x00000000;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RCC->CRRCR = 0x00000000;
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	/*Turn on the different clocks*/
	RCC->CR |= (RCC_HSI_ON<<8);			//HSI Clock ON
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSIKER_ON<<9);		//HSIKER Clock ON
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSE_ON<<16);		//HSE Clock ON
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSEBYP_ON<<18);		//HSE BYP ON
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]
	//RCC->CR |= (RCC_PLL_ON<<24);		//PLL Clock ON

	/*HSI Trimming Value Adjust*/
	RCC->ICSCR |= (RCC_HSITRIM_VAL<<24);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e76:	6053      	str	r3, [r2, #4]

	/*Select System Clock*/
	RCC->CFGR |= (RCC_SYSCLK_SEL<<0);
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6093      	str	r3, [r2, #8]
	/*Select Micro-controller Output Clock*/
	RCC->CFGR |= (RCC_MCO_SEL<<24);
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	6093      	str	r3, [r2, #8]

	/*Select Micro-controller Output Prescaler*/
	RCC->CFGR |= (RCC_MCO_PRE<<28);
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	6093      	str	r3, [r2, #8]
	/*Select AHB Prescaler*/
	RCC->CFGR |= (RCC_AHB_PRE<<4);
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	6093      	str	r3, [r2, #8]
	/*Select APB1 Prescaler*/
	RCC->CFGR |= (RCC_APB1_PRE<<8);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000e9e:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	6093      	str	r3, [r2, #8]
	/*Select APB2 Prescaler*/
	RCC->CFGR |= (RCC_APB2_PRE<<11);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <RCC_voidInit+0xb0>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	6093      	str	r3, [r2, #8]


}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <RCC_voidPeripheralClockEnable>:
void RCC_voidPeripheralClockEnable(u8 A_u8BusName, RCC_Peripheral_t A_tPeripheral)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
	switch(A_u8BusName)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d850      	bhi.n	8000f74 <RCC_voidPeripheralClockEnable+0xb8>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <RCC_voidPeripheralClockEnable+0x1c>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000f07 	.word	0x08000f07
 8000ee0:	08000f1d 	.word	0x08000f1d
 8000ee4:	08000f33 	.word	0x08000f33
 8000ee8:	08000f49 	.word	0x08000f49
 8000eec:	08000f5f 	.word	0x08000f5f
	{
		case RCC_AHB1:
			SET_BIT(RCC->AHB1ENR, A_tPeripheral);
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4611      	mov	r1, r2
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 8000f04:	e036      	b.n	8000f74 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB2:
			SET_BIT(RCC->AHB2ENR, A_tPeripheral);
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	79ba      	ldrb	r2, [r7, #6]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	4611      	mov	r1, r2
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f16:	430b      	orrs	r3, r1
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8000f1a:	e02b      	b.n	8000f74 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB3:
			SET_BIT(RCC->AHB3ENR, A_tPeripheral);
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f20:	79ba      	ldrb	r2, [r7, #6]
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f202 	lsl.w	r2, r1, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8000f30:	e020      	b.n	8000f74 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_1:
			SET_BIT(RCC->APB1ENR1, A_tPeripheral);
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	79ba      	ldrb	r2, [r7, #6]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8000f46:	e015      	b.n	8000f74 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_2:
			SET_BIT(RCC->APB1ENR2, A_tPeripheral);
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 8000f5c:	e00a      	b.n	8000f74 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB2:
			SET_BIT(RCC->APB2ENR, A_tPeripheral);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	79ba      	ldrb	r2, [r7, #6]
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <RCC_voidPeripheralClockEnable+0xc4>)
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 8000f72:	bf00      	nop
	}
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <main>:
void APP_voidGpioInit(void);
void APP_voidCanInit(void);
void delay(u32 ms);

int main()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09a      	sub	sp, #104	; 0x68
 8000f88:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8000f8a:	f7ff ff3d 	bl	8000e08 <RCC_voidInit>
	RCC->CCIPR |= (1 << 25);
 8000f8e:	4bcc      	ldr	r3, [pc, #816]	; (80012c0 <main+0x33c>)
 8000f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f94:	4aca      	ldr	r2, [pc, #808]	; (80012c0 <main+0x33c>)
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_A);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff ff8b 	bl	8000ebc <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_B);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff ff87 	bl	8000ebc <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_C);
 8000fae:	2102      	movs	r1, #2
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff ff83 	bl	8000ebc <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, FDCAN);
 8000fb6:	2119      	movs	r1, #25
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f7ff ff7f 	bl	8000ebc <RCC_voidPeripheralClockEnable>

	APP_voidGpioInit();
 8000fbe:	f000 f987 	bl	80012d0 <APP_voidGpioInit>
	APP_voidCanInit();
 8000fc2:	f000 f9e5 	bl	8001390 <APP_voidCanInit>

	// Initialize Variables
	CAN_Frame_t Frame[4];
	Frame[0].ide = CAN_FRAME_STANDARD_ID;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Frame[0].id = 0x008;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
	Frame[0].rtr = CAN_FRAME_DATA;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Frame[0].dlc = 8;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Frame[0].data[0] = 'H';
 8000fdc:	2348      	movs	r3, #72	; 0x48
 8000fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	Frame[0].data[1] = 'e';
 8000fe2:	2365      	movs	r3, #101	; 0x65
 8000fe4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	Frame[0].data[2] = 'l';
 8000fe8:	236c      	movs	r3, #108	; 0x6c
 8000fea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	Frame[0].data[3] = 'l';
 8000fee:	236c      	movs	r3, #108	; 0x6c
 8000ff0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Frame[0].data[4] = 'o';
 8000ff4:	236f      	movs	r3, #111	; 0x6f
 8000ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Frame[0].data[5] = ' ';
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	Frame[0].data[6] = 'H';
 8001000:	2348      	movs	r3, #72	; 0x48
 8001002:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	Frame[0].data[7] = 'i';
 8001006:	2369      	movs	r3, #105	; 0x69
 8001008:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	Frame[1].ide = CAN_FRAME_STANDARD_ID;
 800100c:	2300      	movs	r3, #0
 800100e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	Frame[1].id = 0x009;
 8001012:	2309      	movs	r3, #9
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
	Frame[1].rtr = CAN_FRAME_DATA;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	Frame[1].dlc = 5;
 800101c:	2305      	movs	r3, #5
 800101e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	Frame[1].data[0] = 'H';
 8001022:	2348      	movs	r3, #72	; 0x48
 8001024:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Frame[1].data[1] = 'e';
 8001028:	2365      	movs	r3, #101	; 0x65
 800102a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Frame[1].data[2] = 'l';
 800102e:	236c      	movs	r3, #108	; 0x6c
 8001030:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	Frame[1].data[3] = 'l';
 8001034:	236c      	movs	r3, #108	; 0x6c
 8001036:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	Frame[1].data[4] = 'o';
 800103a:	236f      	movs	r3, #111	; 0x6f
 800103c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Frame[1].data[5] = ' ';
 8001040:	2320      	movs	r3, #32
 8001042:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Frame[1].data[6] = 'H';
 8001046:	2348      	movs	r3, #72	; 0x48
 8001048:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	Frame[1].data[7] = 'i';
 800104c:	2369      	movs	r3, #105	; 0x69
 800104e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	Frame[2].ide = CAN_FRAME_STANDARD_ID;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	Frame[2].id = 0x00F;
 8001058:	230f      	movs	r3, #15
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
	Frame[2].rtr = CAN_FRAME_REMOTE;
 800105c:	2301      	movs	r3, #1
 800105e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	Frame[2].dlc = 5;
 8001062:	2305      	movs	r3, #5
 8001064:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	Frame[2].data[0] = 'M';
 8001068:	234d      	movs	r3, #77	; 0x4d
 800106a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	Frame[2].data[1] = 'a';
 800106e:	2361      	movs	r3, #97	; 0x61
 8001070:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	Frame[2].data[2] = 'h';
 8001074:	2368      	movs	r3, #104	; 0x68
 8001076:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	Frame[2].data[3] = 'm';
 800107a:	236d      	movs	r3, #109	; 0x6d
 800107c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	Frame[2].data[4] = 'o';
 8001080:	236f      	movs	r3, #111	; 0x6f
 8001082:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Frame[2].data[5] = 'u';
 8001086:	2375      	movs	r3, #117	; 0x75
 8001088:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	Frame[2].data[6] = 'd';
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	Frame[2].data[7] = '0';
 8001092:	2330      	movs	r3, #48	; 0x30
 8001094:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	Frame[3].ide = CAN_FRAME_STANDARD_ID;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Frame[3].id = 0x00F;
 800109e:	230f      	movs	r3, #15
 80010a0:	657b      	str	r3, [r7, #84]	; 0x54
	Frame[3].rtr = CAN_FRAME_REMOTE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	CAN_Frame_t receiveFrame;
	CAN_Frame_t transmitFrame;
	transmitFrame.ide = CAN_FRAME_STANDARD_ID;
 80010a8:	2300      	movs	r3, #0
 80010aa:	72bb      	strb	r3, [r7, #10]
	transmitFrame.rtr = CAN_FRAME_DATA;
 80010ac:	2300      	movs	r3, #0
 80010ae:	727b      	strb	r3, [r7, #9]


	GPIO_voidSetPinValue(GPIO_PORTA, 3, 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fd3d 	bl	8000b34 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIO_PORTA, 9, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2109      	movs	r1, #9
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fd38 	bl	8000b34 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIO_PORTA, 10, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	210a      	movs	r1, #10
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fd33 	bl	8000b34 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIO_PORTC, 13, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	210d      	movs	r1, #13
 80010d2:	2002      	movs	r0, #2
 80010d4:	f7ff fd2e 	bl	8000b34 <GPIO_voidSetPinValue>
	u8 counter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	u8 ledState[3] = {0, 0, 0};
 80010de:	4a79      	ldr	r2, [pc, #484]	; (80012c4 <main+0x340>)
 80010e0:	463b      	mov	r3, r7
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	4611      	mov	r1, r2
 80010e6:	8019      	strh	r1, [r3, #0]
 80010e8:	3302      	adds	r3, #2
 80010ea:	0c12      	lsrs	r2, r2, #16
 80010ec:	701a      	strb	r2, [r3, #0]
	while(1)
	{

		if(CAN_u8GetReceivedMessagesCount(CAN1, CAN_RX_FIFO0) != 0)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4875      	ldr	r0, [pc, #468]	; (80012c8 <main+0x344>)
 80010f2:	f7ff fb67 	bl	80007c4 <CAN_u8GetReceivedMessagesCount>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f8      	beq.n	80010ee <main+0x16a>
		{
			CAN_voidReceiveDataFrame(CAN1, &receiveFrame, CAN_RX_FIFO0);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	4619      	mov	r1, r3
 8001104:	4870      	ldr	r0, [pc, #448]	; (80012c8 <main+0x344>)
 8001106:	f7ff fa17 	bl	8000538 <CAN_voidReceiveDataFrame>

			if(receiveFrame.rtr == CAN_FRAME_REMOTE)
 800110a:	7e7b      	ldrb	r3, [r7, #25]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d167      	bne.n	80011e0 <main+0x25c>
			{
				transmitFrame.id = receiveFrame.id;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	607b      	str	r3, [r7, #4]

				u8 state;
				if(receiveFrame.id == 0x009)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b09      	cmp	r3, #9
 8001118:	d103      	bne.n	8001122 <main+0x19e>
					state = ledState[0];
 800111a:	783b      	ldrb	r3, [r7, #0]
 800111c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001120:	e015      	b.n	800114e <main+0x1ca>
				else if(receiveFrame.id == 0x00A)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2b0a      	cmp	r3, #10
 8001126:	d103      	bne.n	8001130 <main+0x1ac>
					state = ledState[1];
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800112e:	e00e      	b.n	800114e <main+0x1ca>
				else if(receiveFrame.id == 0x003)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d103      	bne.n	800113e <main+0x1ba>
					state = ledState[2];
 8001136:	78bb      	ldrb	r3, [r7, #2]
 8001138:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800113c:	e007      	b.n	800114e <main+0x1ca>
				else{
					state = 5;
 800113e:	2305      	movs	r3, #5
 8001140:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					counter++;
 8001144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001148:	3301      	adds	r3, #1
 800114a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if(state == 0){
 800114e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001152:	2b00      	cmp	r3, #0
 8001154:	d108      	bne.n	8001168 <main+0x1e4>
					transmitFrame.dlc = 3;
 8001156:	2303      	movs	r3, #3
 8001158:	723b      	strb	r3, [r7, #8]
					transmitFrame.data[0] = 'O';
 800115a:	234f      	movs	r3, #79	; 0x4f
 800115c:	72fb      	strb	r3, [r7, #11]
					transmitFrame.data[1] = 'F';
 800115e:	2346      	movs	r3, #70	; 0x46
 8001160:	733b      	strb	r3, [r7, #12]
					transmitFrame.data[2] = 'F';
 8001162:	2346      	movs	r3, #70	; 0x46
 8001164:	737b      	strb	r3, [r7, #13]
 8001166:	e035      	b.n	80011d4 <main+0x250>
				}
				else if(state == 1){
 8001168:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800116c:	2b01      	cmp	r3, #1
 800116e:	d106      	bne.n	800117e <main+0x1fa>
					transmitFrame.dlc = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	723b      	strb	r3, [r7, #8]
					transmitFrame.data[0] = 'O';
 8001174:	234f      	movs	r3, #79	; 0x4f
 8001176:	72fb      	strb	r3, [r7, #11]
					transmitFrame.data[1] = 'N';
 8001178:	234e      	movs	r3, #78	; 0x4e
 800117a:	733b      	strb	r3, [r7, #12]
 800117c:	e02a      	b.n	80011d4 <main+0x250>
				}
				else if(state == 5){
 800117e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001182:	2b05      	cmp	r3, #5
 8001184:	d126      	bne.n	80011d4 <main+0x250>
					if(counter < 10){
 8001186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800118a:	2b09      	cmp	r3, #9
 800118c:	d807      	bhi.n	800119e <main+0x21a>
						transmitFrame.dlc = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	723b      	strb	r3, [r7, #8]
						transmitFrame.data[0] = '0' + counter;
 8001192:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001196:	3330      	adds	r3, #48	; 0x30
 8001198:	b2db      	uxtb	r3, r3
 800119a:	72fb      	strb	r3, [r7, #11]
 800119c:	e01a      	b.n	80011d4 <main+0x250>
					}
					else{
						transmitFrame.dlc = 2;
 800119e:	2302      	movs	r3, #2
 80011a0:	723b      	strb	r3, [r7, #8]
						transmitFrame.data[0] = '0' + (counter/10);
 80011a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011a6:	4a49      	ldr	r2, [pc, #292]	; (80012cc <main+0x348>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	08db      	lsrs	r3, r3, #3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3330      	adds	r3, #48	; 0x30
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72fb      	strb	r3, [r7, #11]
						transmitFrame.data[0] = '0' + (counter%10);
 80011b6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <main+0x348>)
 80011bc:	fba3 1302 	umull	r1, r3, r3, r2
 80011c0:	08d9      	lsrs	r1, r3, #3
 80011c2:	460b      	mov	r3, r1
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3330      	adds	r3, #48	; 0x30
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	72fb      	strb	r3, [r7, #11]
					}

				}

				CAN_voidSendDataFrame(CAN1, &transmitFrame);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	483b      	ldr	r0, [pc, #236]	; (80012c8 <main+0x344>)
 80011da:	f7ff fb13 	bl	8000804 <CAN_voidSendDataFrame>
 80011de:	e786      	b.n	80010ee <main+0x16a>
			}
			else
			{
				if(receiveFrame.dlc >= 6
 80011e0:	7e3b      	ldrb	r3, [r7, #24]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d983      	bls.n	80010ee <main+0x16a>
				&& 	receiveFrame.data[0] == 't'
 80011e6:	7efb      	ldrb	r3, [r7, #27]
 80011e8:	2b74      	cmp	r3, #116	; 0x74
 80011ea:	d180      	bne.n	80010ee <main+0x16a>
				&& 	receiveFrame.data[1] == 'u'
 80011ec:	7f3b      	ldrb	r3, [r7, #28]
 80011ee:	2b75      	cmp	r3, #117	; 0x75
 80011f0:	f47f af7d 	bne.w	80010ee <main+0x16a>
				&& 	receiveFrame.data[2] == 'r'
 80011f4:	7f7b      	ldrb	r3, [r7, #29]
 80011f6:	2b72      	cmp	r3, #114	; 0x72
 80011f8:	f47f af79 	bne.w	80010ee <main+0x16a>
				&& 	receiveFrame.data[3] == 'n'
 80011fc:	7fbb      	ldrb	r3, [r7, #30]
 80011fe:	2b6e      	cmp	r3, #110	; 0x6e
 8001200:	f47f af75 	bne.w	80010ee <main+0x16a>
				&& 	receiveFrame.data[4] == 'O'
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	2b4f      	cmp	r3, #79	; 0x4f
 8001208:	f47f af71 	bne.w	80010ee <main+0x16a>
				)
				{
					if(receiveFrame.dlc == 6 && receiveFrame.data[5] == 'N')
 800120c:	7e3b      	ldrb	r3, [r7, #24]
 800120e:	2b06      	cmp	r3, #6
 8001210:	d124      	bne.n	800125c <main+0x2d8>
 8001212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001216:	2b4e      	cmp	r3, #78	; 0x4e
 8001218:	d120      	bne.n	800125c <main+0x2d8>
					{
						if(receiveFrame.id == 0x009){
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b09      	cmp	r3, #9
 800121e:	d107      	bne.n	8001230 <main+0x2ac>
							ledState[0] = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	703b      	strb	r3, [r7, #0]
							GPIO_voidSetPinValue(GPIO_PORTA, 9, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2109      	movs	r1, #9
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fc83 	bl	8000b34 <GPIO_voidSetPinValue>
						if(receiveFrame.id == 0x009){
 800122e:	e045      	b.n	80012bc <main+0x338>
						}
						else if(receiveFrame.id == 0x00A){
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d107      	bne.n	8001246 <main+0x2c2>
							ledState[1] = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	707b      	strb	r3, [r7, #1]
							GPIO_voidSetPinValue(GPIO_PORTA, 10, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	210a      	movs	r1, #10
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fc78 	bl	8000b34 <GPIO_voidSetPinValue>
						if(receiveFrame.id == 0x009){
 8001244:	e03a      	b.n	80012bc <main+0x338>
						}
						else if(receiveFrame.id == 0x003){
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d137      	bne.n	80012bc <main+0x338>
							ledState[2] = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	70bb      	strb	r3, [r7, #2]
							GPIO_voidSetPinValue(GPIO_PORTA, 3, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2103      	movs	r1, #3
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fc6d 	bl	8000b34 <GPIO_voidSetPinValue>
						if(receiveFrame.id == 0x009){
 800125a:	e02f      	b.n	80012bc <main+0x338>
						}
					}
					else if(receiveFrame.dlc == 7 && receiveFrame.data[5] == 'F' && receiveFrame.data[6] == 'F')
 800125c:	7e3b      	ldrb	r3, [r7, #24]
 800125e:	2b07      	cmp	r3, #7
 8001260:	f47f af45 	bne.w	80010ee <main+0x16a>
 8001264:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001268:	2b46      	cmp	r3, #70	; 0x46
 800126a:	f47f af40 	bne.w	80010ee <main+0x16a>
 800126e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001272:	2b46      	cmp	r3, #70	; 0x46
 8001274:	f47f af3b 	bne.w	80010ee <main+0x16a>
					{
						if(receiveFrame.id == 0x009){
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b09      	cmp	r3, #9
 800127c:	d107      	bne.n	800128e <main+0x30a>
							ledState[0] = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	703b      	strb	r3, [r7, #0]
							GPIO_voidSetPinValue(GPIO_PORTA, 9, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	2109      	movs	r1, #9
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fc54 	bl	8000b34 <GPIO_voidSetPinValue>
 800128c:	e72f      	b.n	80010ee <main+0x16a>
						}
						else if(receiveFrame.id == 0x00A){
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b0a      	cmp	r3, #10
 8001292:	d107      	bne.n	80012a4 <main+0x320>
							ledState[1] = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	707b      	strb	r3, [r7, #1]
							GPIO_voidSetPinValue(GPIO_PORTA, 10, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	210a      	movs	r1, #10
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fc49 	bl	8000b34 <GPIO_voidSetPinValue>
 80012a2:	e724      	b.n	80010ee <main+0x16a>
						}
						else if(receiveFrame.id == 0x003){
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	f47f af21 	bne.w	80010ee <main+0x16a>
							ledState[2] = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	70bb      	strb	r3, [r7, #2]
							GPIO_voidSetPinValue(GPIO_PORTA, 3, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2103      	movs	r1, #3
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fc3d 	bl	8000b34 <GPIO_voidSetPinValue>
 80012ba:	e718      	b.n	80010ee <main+0x16a>
						if(receiveFrame.id == 0x009){
 80012bc:	bf00      	nop
		if(CAN_u8GetReceivedMessagesCount(CAN1, CAN_RX_FIFO0) != 0)
 80012be:	e716      	b.n	80010ee <main+0x16a>
 80012c0:	40021000 	.word	0x40021000
 80012c4:	08001500 	.word	0x08001500
 80012c8:	40006400 	.word	0x40006400
 80012cc:	cccccccd 	.word	0xcccccccd

080012d0 <APP_voidGpioInit>:
		}
	}
}

void APP_voidGpioInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
	MGPIO_Config_t Tx2 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN2, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f8c3 2003 	str.w	r2, [r3, #3]
 80012e2:	2302      	movs	r3, #2
 80012e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80012ee:	2309      	movs	r3, #9
 80012f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	MGPIO_Config_t Rx2 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN3, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	f8c3 2003 	str.w	r2, [r3, #3]
 8001300:	2303      	movs	r3, #3
 8001302:	767b      	strb	r3, [r7, #25]
 8001304:	2301      	movs	r3, #1
 8001306:	76bb      	strb	r3, [r7, #26]
 8001308:	2309      	movs	r3, #9
 800130a:	77bb      	strb	r3, [r7, #30]
	MGPIO_Config_t Tx1 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	f8c3 2003 	str.w	r2, [r3, #3]
 8001318:	2309      	movs	r3, #9
 800131a:	747b      	strb	r3, [r7, #17]
 800131c:	2301      	movs	r3, #1
 800131e:	74bb      	strb	r3, [r7, #18]
 8001320:	2309      	movs	r3, #9
 8001322:	75bb      	strb	r3, [r7, #22]
	MGPIO_Config_t Rx1 = {.Port = GPIO_PORTA, .Pin = GPIO_PIN10, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	f8c3 2003 	str.w	r2, [r3, #3]
 8001330:	230a      	movs	r3, #10
 8001332:	727b      	strb	r3, [r7, #9]
 8001334:	2301      	movs	r3, #1
 8001336:	72bb      	strb	r3, [r7, #10]
 8001338:	2309      	movs	r3, #9
 800133a:	73bb      	strb	r3, [r7, #14]

	MGPIO_Config_t PC13 = {.Port = GPIO_PORTC, .Pin = GPIO_PIN13, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	f8c3 2003 	str.w	r2, [r3, #3]
 8001346:	2302      	movs	r3, #2
 8001348:	703b      	strb	r3, [r7, #0]
 800134a:	230d      	movs	r3, #13
 800134c:	707b      	strb	r3, [r7, #1]
 800134e:	2301      	movs	r3, #1
 8001350:	70bb      	strb	r3, [r7, #2]
 8001352:	2309      	movs	r3, #9
 8001354:	71bb      	strb	r3, [r7, #6]

	GPIO_voidInitPin(&Tx1);
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fd26 	bl	8000dac <GPIO_voidInitPin>
	GPIO_voidInitPin(&Rx1);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fd21 	bl	8000dac <GPIO_voidInitPin>
	GPIO_voidInitPin(&Tx2);
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd1c 	bl	8000dac <GPIO_voidInitPin>
	GPIO_voidInitPin(&Rx2);
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fd17 	bl	8000dac <GPIO_voidInitPin>

	GPIO_voidInitPin(&PC13);
 800137e:	463b      	mov	r3, r7
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fd13 	bl	8000dac <GPIO_voidInitPin>
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <APP_voidCanInit>:

void APP_voidCanInit(void)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08f      	sub	sp, #60	; 0x3c
 8001394:	af00      	add	r7, sp, #0
	MGPIO_Config_t canTxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8001396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	f8c3 2003 	str.w	r2, [r3, #3]
 80013a2:	2301      	movs	r3, #1
 80013a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80013a8:	2309      	movs	r3, #9
 80013aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80013ae:	2302      	movs	r3, #2
 80013b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80013b4:	2309      	movs	r3, #9
 80013b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	MGPIO_Config_t canRxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN8, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80013ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f8c3 2003 	str.w	r2, [r3, #3]
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80013cc:	2308      	movs	r3, #8
 80013ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80013d2:	2302      	movs	r3, #2
 80013d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80013d8:	2309      	movs	r3, #9
 80013da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	CAN_TxConfig_t txCfg;
	txCfg.automaticTransmission = CAN_AUTOMATIC_TRANSMISSION_DISABLE;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	txCfg.bufferType = CAN_TX_BUFFER_FIFO;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	txCfg.transmitPause = CAN_TX_PAUSE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	CAN_RxConfig_t rxCfg;
	rxCfg.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	757b      	strb	r3, [r7, #21]
	rxCfg.FIFO1_Mode = CAN_RX_FIFO_OVERWRITE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	75bb      	strb	r3, [r7, #22]
	rxCfg.FIFO0_numberOfIDs = 4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	75fb      	strb	r3, [r7, #23]
	rxCfg.FIFO1_numberOfIDs = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	763b      	strb	r3, [r7, #24]
	u32 ids[4] = {0x003, 0x009, 0x00A, 0x00F};
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <APP_voidCanInit+0xb4>)
 8001402:	1d3c      	adds	r4, r7, #4
 8001404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxCfg.FIFO0_IDs = ids;
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	61fb      	str	r3, [r7, #28]
	rxCfg.FIFO1_IDs = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
	rxCfg.nonMatchingFrames = CAN_RX_REJECT;
 8001412:	2302      	movs	r3, #2
 8001414:	753b      	strb	r3, [r7, #20]

	GPIO_voidInitPin(&canTxPin);
 8001416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fcc6 	bl	8000dac <GPIO_voidInitPin>
	GPIO_voidInitPin(&canRxPin);
 8001420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fcc1 	bl	8000dac <GPIO_voidInitPin>
	CAN_voidInit(CAN1, &rxCfg, &txCfg);
 800142a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <APP_voidCanInit+0xb8>)
 8001436:	f7fe feef 	bl	8000218 <CAN_voidInit>
}
 800143a:	bf00      	nop
 800143c:	373c      	adds	r7, #60	; 0x3c
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	08001504 	.word	0x08001504
 8001448:	40006400 	.word	0x40006400

0800144c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001450:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <LoopForever+0x6>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	; (800148c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <LoopForever+0xe>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	; (8001498 <LoopForever+0x16>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800147a:	f000 f811 	bl	80014a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147e:	f7ff fd81 	bl	8000f84 <main>

08001482 <LoopForever>:

LoopForever:
    b LoopForever
 8001482:	e7fe      	b.n	8001482 <LoopForever>
  ldr   r0, =_estack
 8001484:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001490:	0800151c 	.word	0x0800151c
  ldr r2, =_sbss
 8001494:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001498:	2000001c 	.word	0x2000001c

0800149c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_2_IRQHandler>
	...

080014a0 <__libc_init_array>:
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	4d0d      	ldr	r5, [pc, #52]	; (80014d8 <__libc_init_array+0x38>)
 80014a4:	4c0d      	ldr	r4, [pc, #52]	; (80014dc <__libc_init_array+0x3c>)
 80014a6:	1b64      	subs	r4, r4, r5
 80014a8:	10a4      	asrs	r4, r4, #2
 80014aa:	2600      	movs	r6, #0
 80014ac:	42a6      	cmp	r6, r4
 80014ae:	d109      	bne.n	80014c4 <__libc_init_array+0x24>
 80014b0:	4d0b      	ldr	r5, [pc, #44]	; (80014e0 <__libc_init_array+0x40>)
 80014b2:	4c0c      	ldr	r4, [pc, #48]	; (80014e4 <__libc_init_array+0x44>)
 80014b4:	f000 f818 	bl	80014e8 <_init>
 80014b8:	1b64      	subs	r4, r4, r5
 80014ba:	10a4      	asrs	r4, r4, #2
 80014bc:	2600      	movs	r6, #0
 80014be:	42a6      	cmp	r6, r4
 80014c0:	d105      	bne.n	80014ce <__libc_init_array+0x2e>
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
 80014c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80014c8:	4798      	blx	r3
 80014ca:	3601      	adds	r6, #1
 80014cc:	e7ee      	b.n	80014ac <__libc_init_array+0xc>
 80014ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80014d2:	4798      	blx	r3
 80014d4:	3601      	adds	r6, #1
 80014d6:	e7f2      	b.n	80014be <__libc_init_array+0x1e>
 80014d8:	08001514 	.word	0x08001514
 80014dc:	08001514 	.word	0x08001514
 80014e0:	08001514 	.word	0x08001514
 80014e4:	08001518 	.word	0x08001518

080014e8 <_init>:
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ea:	bf00      	nop
 80014ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ee:	bc08      	pop	{r3}
 80014f0:	469e      	mov	lr, r3
 80014f2:	4770      	bx	lr

080014f4 <_fini>:
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f6:	bf00      	nop
 80014f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fa:	bc08      	pop	{r3}
 80014fc:	469e      	mov	lr, r3
 80014fe:	4770      	bx	lr
